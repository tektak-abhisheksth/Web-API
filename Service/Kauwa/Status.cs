/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Status : TBase
  {
    private string _userId;
    private string _statusTypeId;
    private string _beginDate;
    private string _endDate;
    private string _location;
    private string _friendId;
    private int _receptionMode;
    private string _beginTime;
    private string _endTime;
    private short _statusContactType;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string StatusTypeId
    {
      get
      {
        return _statusTypeId;
      }
      set
      {
        __isset.statusTypeId = true;
        this._statusTypeId = value;
      }
    }

    public string BeginDate
    {
      get
      {
        return _beginDate;
      }
      set
      {
        __isset.beginDate = true;
        this._beginDate = value;
      }
    }

    public string EndDate
    {
      get
      {
        return _endDate;
      }
      set
      {
        __isset.endDate = true;
        this._endDate = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public string FriendId
    {
      get
      {
        return _friendId;
      }
      set
      {
        __isset.friendId = true;
        this._friendId = value;
      }
    }

    public int ReceptionMode
    {
      get
      {
        return _receptionMode;
      }
      set
      {
        __isset.receptionMode = true;
        this._receptionMode = value;
      }
    }

    public string BeginTime
    {
      get
      {
        return _beginTime;
      }
      set
      {
        __isset.beginTime = true;
        this._beginTime = value;
      }
    }

    public string EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public short StatusContactType
    {
      get
      {
        return _statusContactType;
      }
      set
      {
        __isset.statusContactType = true;
        this._statusContactType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool statusTypeId;
      public bool beginDate;
      public bool endDate;
      public bool location;
      public bool friendId;
      public bool receptionMode;
      public bool beginTime;
      public bool endTime;
      public bool statusContactType;
    }

    public Status() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StatusTypeId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              BeginDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              EndDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              FriendId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ReceptionMode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              BeginTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              EndTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I16) {
              StatusContactType = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Status");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (StatusTypeId != null && __isset.statusTypeId) {
        field.Name = "statusTypeId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StatusTypeId);
        oprot.WriteFieldEnd();
      }
      if (BeginDate != null && __isset.beginDate) {
        field.Name = "beginDate";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BeginDate);
        oprot.WriteFieldEnd();
      }
      if (EndDate != null && __isset.endDate) {
        field.Name = "endDate";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EndDate);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (FriendId != null && __isset.friendId) {
        field.Name = "friendId";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FriendId);
        oprot.WriteFieldEnd();
      }
      if (__isset.receptionMode) {
        field.Name = "receptionMode";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ReceptionMode);
        oprot.WriteFieldEnd();
      }
      if (BeginTime != null && __isset.beginTime) {
        field.Name = "beginTime";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BeginTime);
        oprot.WriteFieldEnd();
      }
      if (EndTime != null && __isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EndTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.statusContactType) {
        field.Name = "statusContactType";
        field.Type = TType.I16;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(StatusContactType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Status(");
      bool __first = true;
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (StatusTypeId != null && __isset.statusTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusTypeId: ");
        __sb.Append(StatusTypeId);
      }
      if (BeginDate != null && __isset.beginDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BeginDate: ");
        __sb.Append(BeginDate);
      }
      if (EndDate != null && __isset.endDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndDate: ");
        __sb.Append(EndDate);
      }
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      if (FriendId != null && __isset.friendId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FriendId: ");
        __sb.Append(FriendId);
      }
      if (__isset.receptionMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceptionMode: ");
        __sb.Append(ReceptionMode);
      }
      if (BeginTime != null && __isset.beginTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BeginTime: ");
        __sb.Append(BeginTime);
      }
      if (EndTime != null && __isset.endTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndTime: ");
        __sb.Append(EndTime);
      }
      if (__isset.statusContactType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusContactType: ");
        __sb.Append(StatusContactType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
