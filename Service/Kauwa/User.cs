/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  /// <summary>
  /// User Model
  /// Used By User Service
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class User : TBase
  {
    private string _userId;
    private string _email;
    private string _userName;
    private string _password;
    private string _lastActivityDate;
    private string _primaryContactNumber;
    private bool _isApproved;
    private bool _isLockedOut;
    private bool _isActivated;
    private string _createDate;
    private string _lastLoginDate;
    private string _lastPasswordChangedDate;
    private string _lastLockoutDate;
    private int _failedPasswordAttemptCount;
    private bool _isFirstLogin;
    private string _cTag;
    private bool _hasDeactivated;
    private int _chatStatus;
    private UserInfo _userInfo;
    private UserInfoPerson _userInfoPerson;
    private UserCategory _userCategory;
    private Contact _contact;
    private Status _status;
    private Session _session;
    private string _deviceId;
    private string _userGUID;
    private string _mobileResetCode;
    private UserInfoCompany _userInforCompany;
    private bool _isMobile;
    private int _dbStatusCode;
    private string _usernameEmail;
    private string _deviceType;
    private string _pushCode;
    private int _dbSubStatusCode;
    private string _dbStatusMsg;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string LastActivityDate
    {
      get
      {
        return _lastActivityDate;
      }
      set
      {
        __isset.lastActivityDate = true;
        this._lastActivityDate = value;
      }
    }

    public string PrimaryContactNumber
    {
      get
      {
        return _primaryContactNumber;
      }
      set
      {
        __isset.primaryContactNumber = true;
        this._primaryContactNumber = value;
      }
    }

    public bool IsApproved
    {
      get
      {
        return _isApproved;
      }
      set
      {
        __isset.isApproved = true;
        this._isApproved = value;
      }
    }

    public bool IsLockedOut
    {
      get
      {
        return _isLockedOut;
      }
      set
      {
        __isset.isLockedOut = true;
        this._isLockedOut = value;
      }
    }

    public bool IsActivated
    {
      get
      {
        return _isActivated;
      }
      set
      {
        __isset.isActivated = true;
        this._isActivated = value;
      }
    }

    public string CreateDate
    {
      get
      {
        return _createDate;
      }
      set
      {
        __isset.createDate = true;
        this._createDate = value;
      }
    }

    public string LastLoginDate
    {
      get
      {
        return _lastLoginDate;
      }
      set
      {
        __isset.lastLoginDate = true;
        this._lastLoginDate = value;
      }
    }

    public string LastPasswordChangedDate
    {
      get
      {
        return _lastPasswordChangedDate;
      }
      set
      {
        __isset.lastPasswordChangedDate = true;
        this._lastPasswordChangedDate = value;
      }
    }

    public string LastLockoutDate
    {
      get
      {
        return _lastLockoutDate;
      }
      set
      {
        __isset.lastLockoutDate = true;
        this._lastLockoutDate = value;
      }
    }

    public int FailedPasswordAttemptCount
    {
      get
      {
        return _failedPasswordAttemptCount;
      }
      set
      {
        __isset.failedPasswordAttemptCount = true;
        this._failedPasswordAttemptCount = value;
      }
    }

    public bool IsFirstLogin
    {
      get
      {
        return _isFirstLogin;
      }
      set
      {
        __isset.isFirstLogin = true;
        this._isFirstLogin = value;
      }
    }

    public string CTag
    {
      get
      {
        return _cTag;
      }
      set
      {
        __isset.cTag = true;
        this._cTag = value;
      }
    }

    public bool HasDeactivated
    {
      get
      {
        return _hasDeactivated;
      }
      set
      {
        __isset.hasDeactivated = true;
        this._hasDeactivated = value;
      }
    }

    public int ChatStatus
    {
      get
      {
        return _chatStatus;
      }
      set
      {
        __isset.chatStatus = true;
        this._chatStatus = value;
      }
    }

    public UserInfo UserInfo
    {
      get
      {
        return _userInfo;
      }
      set
      {
        __isset.userInfo = true;
        this._userInfo = value;
      }
    }

    public UserInfoPerson UserInfoPerson
    {
      get
      {
        return _userInfoPerson;
      }
      set
      {
        __isset.userInfoPerson = true;
        this._userInfoPerson = value;
      }
    }

    public UserCategory UserCategory
    {
      get
      {
        return _userCategory;
      }
      set
      {
        __isset.userCategory = true;
        this._userCategory = value;
      }
    }

    public Contact Contact
    {
      get
      {
        return _contact;
      }
      set
      {
        __isset.contact = true;
        this._contact = value;
      }
    }

    public Status Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public Session Session
    {
      get
      {
        return _session;
      }
      set
      {
        __isset.session = true;
        this._session = value;
      }
    }

    public string DeviceId
    {
      get
      {
        return _deviceId;
      }
      set
      {
        __isset.deviceId = true;
        this._deviceId = value;
      }
    }

    public string UserGUID
    {
      get
      {
        return _userGUID;
      }
      set
      {
        __isset.userGUID = true;
        this._userGUID = value;
      }
    }

    public string MobileResetCode
    {
      get
      {
        return _mobileResetCode;
      }
      set
      {
        __isset.mobileResetCode = true;
        this._mobileResetCode = value;
      }
    }

    public UserInfoCompany UserInforCompany
    {
      get
      {
        return _userInforCompany;
      }
      set
      {
        __isset.userInforCompany = true;
        this._userInforCompany = value;
      }
    }

    public bool IsMobile
    {
      get
      {
        return _isMobile;
      }
      set
      {
        __isset.isMobile = true;
        this._isMobile = value;
      }
    }

    public int DbStatusCode
    {
      get
      {
        return _dbStatusCode;
      }
      set
      {
        __isset.dbStatusCode = true;
        this._dbStatusCode = value;
      }
    }

    public string UsernameEmail
    {
      get
      {
        return _usernameEmail;
      }
      set
      {
        __isset.usernameEmail = true;
        this._usernameEmail = value;
      }
    }

    public string DeviceType
    {
      get
      {
        return _deviceType;
      }
      set
      {
        __isset.deviceType = true;
        this._deviceType = value;
      }
    }

    public string PushCode
    {
      get
      {
        return _pushCode;
      }
      set
      {
        __isset.pushCode = true;
        this._pushCode = value;
      }
    }

    public int DbSubStatusCode
    {
      get
      {
        return _dbSubStatusCode;
      }
      set
      {
        __isset.dbSubStatusCode = true;
        this._dbSubStatusCode = value;
      }
    }

    public string DbStatusMsg
    {
      get
      {
        return _dbStatusMsg;
      }
      set
      {
        __isset.dbStatusMsg = true;
        this._dbStatusMsg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool email;
      public bool userName;
      public bool password;
      public bool lastActivityDate;
      public bool primaryContactNumber;
      public bool isApproved;
      public bool isLockedOut;
      public bool isActivated;
      public bool createDate;
      public bool lastLoginDate;
      public bool lastPasswordChangedDate;
      public bool lastLockoutDate;
      public bool failedPasswordAttemptCount;
      public bool isFirstLogin;
      public bool cTag;
      public bool hasDeactivated;
      public bool chatStatus;
      public bool userInfo;
      public bool userInfoPerson;
      public bool userCategory;
      public bool contact;
      public bool status;
      public bool session;
      public bool deviceId;
      public bool userGUID;
      public bool mobileResetCode;
      public bool userInforCompany;
      public bool isMobile;
      public bool dbStatusCode;
      public bool usernameEmail;
      public bool deviceType;
      public bool pushCode;
      public bool dbSubStatusCode;
      public bool dbStatusMsg;
    }

    public User() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Email = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              LastActivityDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              PrimaryContactNumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              IsApproved = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              IsLockedOut = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              IsActivated = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              CreateDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              LastLoginDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              LastPasswordChangedDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              LastLockoutDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              FailedPasswordAttemptCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Bool) {
              IsFirstLogin = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              CTag = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Bool) {
              HasDeactivated = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              ChatStatus = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Struct) {
              UserInfo = new UserInfo();
              UserInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              UserInfoPerson = new UserInfoPerson();
              UserInfoPerson.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Struct) {
              UserCategory = new UserCategory();
              UserCategory.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Struct) {
              Contact = new Contact();
              Contact.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Struct) {
              Status = new Status();
              Status.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Struct) {
              Session = new Session();
              Session.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.String) {
              DeviceId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.String) {
              UserGUID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.String) {
              MobileResetCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Struct) {
              UserInforCompany = new UserInfoCompany();
              UserInforCompany.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Bool) {
              IsMobile = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DbStatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.String) {
              UsernameEmail = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.String) {
              DeviceType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.String) {
              PushCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.I32) {
              DbSubStatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.String) {
              DbStatusMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("User");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (Email != null && __isset.email) {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Email);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (LastActivityDate != null && __isset.lastActivityDate) {
        field.Name = "lastActivityDate";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastActivityDate);
        oprot.WriteFieldEnd();
      }
      if (PrimaryContactNumber != null && __isset.primaryContactNumber) {
        field.Name = "primaryContactNumber";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PrimaryContactNumber);
        oprot.WriteFieldEnd();
      }
      if (__isset.isApproved) {
        field.Name = "isApproved";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsApproved);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLockedOut) {
        field.Name = "isLockedOut";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLockedOut);
        oprot.WriteFieldEnd();
      }
      if (__isset.isActivated) {
        field.Name = "isActivated";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsActivated);
        oprot.WriteFieldEnd();
      }
      if (CreateDate != null && __isset.createDate) {
        field.Name = "createDate";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CreateDate);
        oprot.WriteFieldEnd();
      }
      if (LastLoginDate != null && __isset.lastLoginDate) {
        field.Name = "lastLoginDate";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastLoginDate);
        oprot.WriteFieldEnd();
      }
      if (LastPasswordChangedDate != null && __isset.lastPasswordChangedDate) {
        field.Name = "lastPasswordChangedDate";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastPasswordChangedDate);
        oprot.WriteFieldEnd();
      }
      if (LastLockoutDate != null && __isset.lastLockoutDate) {
        field.Name = "lastLockoutDate";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastLockoutDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.failedPasswordAttemptCount) {
        field.Name = "failedPasswordAttemptCount";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FailedPasswordAttemptCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.isFirstLogin) {
        field.Name = "isFirstLogin";
        field.Type = TType.Bool;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsFirstLogin);
        oprot.WriteFieldEnd();
      }
      if (CTag != null && __isset.cTag) {
        field.Name = "cTag";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CTag);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasDeactivated) {
        field.Name = "hasDeactivated";
        field.Type = TType.Bool;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasDeactivated);
        oprot.WriteFieldEnd();
      }
      if (__isset.chatStatus) {
        field.Name = "chatStatus";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ChatStatus);
        oprot.WriteFieldEnd();
      }
      if (UserInfo != null && __isset.userInfo) {
        field.Name = "userInfo";
        field.Type = TType.Struct;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        UserInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UserInfoPerson != null && __isset.userInfoPerson) {
        field.Name = "userInfoPerson";
        field.Type = TType.Struct;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        UserInfoPerson.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UserCategory != null && __isset.userCategory) {
        field.Name = "userCategory";
        field.Type = TType.Struct;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        UserCategory.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Contact != null && __isset.contact) {
        field.Name = "contact";
        field.Type = TType.Struct;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        Contact.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.Struct;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        Status.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Session != null && __isset.session) {
        field.Name = "session";
        field.Type = TType.Struct;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        Session.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (DeviceId != null && __isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.String;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (UserGUID != null && __isset.userGUID) {
        field.Name = "userGUID";
        field.Type = TType.String;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserGUID);
        oprot.WriteFieldEnd();
      }
      if (MobileResetCode != null && __isset.mobileResetCode) {
        field.Name = "mobileResetCode";
        field.Type = TType.String;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MobileResetCode);
        oprot.WriteFieldEnd();
      }
      if (UserInforCompany != null && __isset.userInforCompany) {
        field.Name = "userInforCompany";
        field.Type = TType.Struct;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        UserInforCompany.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.isMobile) {
        field.Name = "isMobile";
        field.Type = TType.Bool;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsMobile);
        oprot.WriteFieldEnd();
      }
      if (__isset.dbStatusCode) {
        field.Name = "dbStatusCode";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DbStatusCode);
        oprot.WriteFieldEnd();
      }
      if (UsernameEmail != null && __isset.usernameEmail) {
        field.Name = "usernameEmail";
        field.Type = TType.String;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UsernameEmail);
        oprot.WriteFieldEnd();
      }
      if (DeviceType != null && __isset.deviceType) {
        field.Name = "deviceType";
        field.Type = TType.String;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceType);
        oprot.WriteFieldEnd();
      }
      if (PushCode != null && __isset.pushCode) {
        field.Name = "pushCode";
        field.Type = TType.String;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PushCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.dbSubStatusCode) {
        field.Name = "dbSubStatusCode";
        field.Type = TType.I32;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DbSubStatusCode);
        oprot.WriteFieldEnd();
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        field.Name = "dbStatusMsg";
        field.Type = TType.String;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DbStatusMsg);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("User(");
      bool __first = true;
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (UserName != null && __isset.userName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserName: ");
        __sb.Append(UserName);
      }
      if (Password != null && __isset.password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (LastActivityDate != null && __isset.lastActivityDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastActivityDate: ");
        __sb.Append(LastActivityDate);
      }
      if (PrimaryContactNumber != null && __isset.primaryContactNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PrimaryContactNumber: ");
        __sb.Append(PrimaryContactNumber);
      }
      if (__isset.isApproved) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsApproved: ");
        __sb.Append(IsApproved);
      }
      if (__isset.isLockedOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsLockedOut: ");
        __sb.Append(IsLockedOut);
      }
      if (__isset.isActivated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsActivated: ");
        __sb.Append(IsActivated);
      }
      if (CreateDate != null && __isset.createDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreateDate: ");
        __sb.Append(CreateDate);
      }
      if (LastLoginDate != null && __isset.lastLoginDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastLoginDate: ");
        __sb.Append(LastLoginDate);
      }
      if (LastPasswordChangedDate != null && __isset.lastPasswordChangedDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastPasswordChangedDate: ");
        __sb.Append(LastPasswordChangedDate);
      }
      if (LastLockoutDate != null && __isset.lastLockoutDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastLockoutDate: ");
        __sb.Append(LastLockoutDate);
      }
      if (__isset.failedPasswordAttemptCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailedPasswordAttemptCount: ");
        __sb.Append(FailedPasswordAttemptCount);
      }
      if (__isset.isFirstLogin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsFirstLogin: ");
        __sb.Append(IsFirstLogin);
      }
      if (CTag != null && __isset.cTag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CTag: ");
        __sb.Append(CTag);
      }
      if (__isset.hasDeactivated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasDeactivated: ");
        __sb.Append(HasDeactivated);
      }
      if (__isset.chatStatus) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatStatus: ");
        __sb.Append(ChatStatus);
      }
      if (UserInfo != null && __isset.userInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserInfo: ");
        __sb.Append(UserInfo== null ? "<null>" : UserInfo.ToString());
      }
      if (UserInfoPerson != null && __isset.userInfoPerson) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserInfoPerson: ");
        __sb.Append(UserInfoPerson== null ? "<null>" : UserInfoPerson.ToString());
      }
      if (UserCategory != null && __isset.userCategory) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserCategory: ");
        __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
      }
      if (Contact != null && __isset.contact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contact: ");
        __sb.Append(Contact== null ? "<null>" : Contact.ToString());
      }
      if (Status != null && __isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status== null ? "<null>" : Status.ToString());
      }
      if (Session != null && __isset.session) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session: ");
        __sb.Append(Session== null ? "<null>" : Session.ToString());
      }
      if (DeviceId != null && __isset.deviceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceId: ");
        __sb.Append(DeviceId);
      }
      if (UserGUID != null && __isset.userGUID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserGUID: ");
        __sb.Append(UserGUID);
      }
      if (MobileResetCode != null && __isset.mobileResetCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MobileResetCode: ");
        __sb.Append(MobileResetCode);
      }
      if (UserInforCompany != null && __isset.userInforCompany) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserInforCompany: ");
        __sb.Append(UserInforCompany== null ? "<null>" : UserInforCompany.ToString());
      }
      if (__isset.isMobile) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsMobile: ");
        __sb.Append(IsMobile);
      }
      if (__isset.dbStatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbStatusCode: ");
        __sb.Append(DbStatusCode);
      }
      if (UsernameEmail != null && __isset.usernameEmail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UsernameEmail: ");
        __sb.Append(UsernameEmail);
      }
      if (DeviceType != null && __isset.deviceType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceType: ");
        __sb.Append(DeviceType);
      }
      if (PushCode != null && __isset.pushCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushCode: ");
        __sb.Append(PushCode);
      }
      if (__isset.dbSubStatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbSubStatusCode: ");
        __sb.Append(DbSubStatusCode);
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbStatusMsg: ");
        __sb.Append(DbStatusMsg);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
