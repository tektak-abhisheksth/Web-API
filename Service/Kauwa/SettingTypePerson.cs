/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SettingTypePerson : TBase
  {
    private int _settingTypeId;
    private string _name;
    private string _description;
    private int _settingGroup;
    private bool _visible;
    private int _displayOrder;
    private int _defaultValue;
    private int _displayGroup;

    public int SettingTypeId
    {
      get
      {
        return _settingTypeId;
      }
      set
      {
        __isset.settingTypeId = true;
        this._settingTypeId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public int SettingGroup
    {
      get
      {
        return _settingGroup;
      }
      set
      {
        __isset.settingGroup = true;
        this._settingGroup = value;
      }
    }

    public bool Visible
    {
      get
      {
        return _visible;
      }
      set
      {
        __isset.visible = true;
        this._visible = value;
      }
    }

    public int DisplayOrder
    {
      get
      {
        return _displayOrder;
      }
      set
      {
        __isset.displayOrder = true;
        this._displayOrder = value;
      }
    }

    public int DefaultValue
    {
      get
      {
        return _defaultValue;
      }
      set
      {
        __isset.defaultValue = true;
        this._defaultValue = value;
      }
    }

    public int DisplayGroup
    {
      get
      {
        return _displayGroup;
      }
      set
      {
        __isset.displayGroup = true;
        this._displayGroup = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool settingTypeId;
      public bool name;
      public bool description;
      public bool settingGroup;
      public bool visible;
      public bool displayOrder;
      public bool defaultValue;
      public bool displayGroup;
    }

    public SettingTypePerson() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SettingTypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SettingGroup = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Visible = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              DisplayOrder = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              DefaultValue = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              DisplayGroup = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SettingTypePerson");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.settingTypeId) {
        field.Name = "settingTypeId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SettingTypeId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.settingGroup) {
        field.Name = "settingGroup";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SettingGroup);
        oprot.WriteFieldEnd();
      }
      if (__isset.visible) {
        field.Name = "visible";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Visible);
        oprot.WriteFieldEnd();
      }
      if (__isset.displayOrder) {
        field.Name = "displayOrder";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayOrder);
        oprot.WriteFieldEnd();
      }
      if (__isset.defaultValue) {
        field.Name = "defaultValue";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DefaultValue);
        oprot.WriteFieldEnd();
      }
      if (__isset.displayGroup) {
        field.Name = "displayGroup";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayGroup);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SettingTypePerson(");
      bool __first = true;
      if (__isset.settingTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SettingTypeId: ");
        __sb.Append(SettingTypeId);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (__isset.settingGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SettingGroup: ");
        __sb.Append(SettingGroup);
      }
      if (__isset.visible) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Visible: ");
        __sb.Append(Visible);
      }
      if (__isset.displayOrder) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisplayOrder: ");
        __sb.Append(DisplayOrder);
      }
      if (__isset.defaultValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DefaultValue: ");
        __sb.Append(DefaultValue);
      }
      if (__isset.displayGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisplayGroup: ");
        __sb.Append(DisplayGroup);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
