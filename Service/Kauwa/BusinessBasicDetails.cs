/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BusinessBasicDetails : TBase
  {
    private int _userId;
    private string _about;
    private string _companyName;
    private string _street;
    private string _town;
    private int _cityId;
    private string _phone;
    private string _fax;
    private string _email;
    private string _web;

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string About
    {
      get
      {
        return _about;
      }
      set
      {
        __isset.about = true;
        this._about = value;
      }
    }

    public string CompanyName
    {
      get
      {
        return _companyName;
      }
      set
      {
        __isset.companyName = true;
        this._companyName = value;
      }
    }

    public string Street
    {
      get
      {
        return _street;
      }
      set
      {
        __isset.street = true;
        this._street = value;
      }
    }

    public string Town
    {
      get
      {
        return _town;
      }
      set
      {
        __isset.town = true;
        this._town = value;
      }
    }

    public int CityId
    {
      get
      {
        return _cityId;
      }
      set
      {
        __isset.cityId = true;
        this._cityId = value;
      }
    }

    public string Phone
    {
      get
      {
        return _phone;
      }
      set
      {
        __isset.phone = true;
        this._phone = value;
      }
    }

    public string Fax
    {
      get
      {
        return _fax;
      }
      set
      {
        __isset.fax = true;
        this._fax = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string Web
    {
      get
      {
        return _web;
      }
      set
      {
        __isset.web = true;
        this._web = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool about;
      public bool companyName;
      public bool street;
      public bool town;
      public bool cityId;
      public bool phone;
      public bool fax;
      public bool email;
      public bool web;
    }

    public BusinessBasicDetails() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              About = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CompanyName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Street = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Town = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              CityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Phone = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Fax = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Email = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Web = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BusinessBasicDetails");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (About != null && __isset.about) {
        field.Name = "about";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(About);
        oprot.WriteFieldEnd();
      }
      if (CompanyName != null && __isset.companyName) {
        field.Name = "companyName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CompanyName);
        oprot.WriteFieldEnd();
      }
      if (Street != null && __isset.street) {
        field.Name = "street";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Street);
        oprot.WriteFieldEnd();
      }
      if (Town != null && __isset.town) {
        field.Name = "town";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Town);
        oprot.WriteFieldEnd();
      }
      if (__isset.cityId) {
        field.Name = "cityId";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CityId);
        oprot.WriteFieldEnd();
      }
      if (Phone != null && __isset.phone) {
        field.Name = "phone";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Phone);
        oprot.WriteFieldEnd();
      }
      if (Fax != null && __isset.fax) {
        field.Name = "fax";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fax);
        oprot.WriteFieldEnd();
      }
      if (Email != null && __isset.email) {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Email);
        oprot.WriteFieldEnd();
      }
      if (Web != null && __isset.web) {
        field.Name = "web";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Web);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BusinessBasicDetails(");
      bool __first = true;
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (About != null && __isset.about) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("About: ");
        __sb.Append(About);
      }
      if (CompanyName != null && __isset.companyName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CompanyName: ");
        __sb.Append(CompanyName);
      }
      if (Street != null && __isset.street) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Street: ");
        __sb.Append(Street);
      }
      if (Town != null && __isset.town) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Town: ");
        __sb.Append(Town);
      }
      if (__isset.cityId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CityId: ");
        __sb.Append(CityId);
      }
      if (Phone != null && __isset.phone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Phone: ");
        __sb.Append(Phone);
      }
      if (Fax != null && __isset.fax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fax: ");
        __sb.Append(Fax);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (Web != null && __isset.web) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Web: ");
        __sb.Append(Web);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
