/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MutualFriend : TBase
  {
    private int _userId;
    private string _targetType;
    private string _targetUser;
    private int _pageIndex;
    private int _pageSize;
    private string _userName;
    private string _firstName;
    private string _lastName;
    private int _userTypeId;
    private string _picture;
    private string _title;

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string TargetType
    {
      get
      {
        return _targetType;
      }
      set
      {
        __isset.targetType = true;
        this._targetType = value;
      }
    }

    public string TargetUser
    {
      get
      {
        return _targetUser;
      }
      set
      {
        __isset.targetUser = true;
        this._targetUser = value;
      }
    }

    public int PageIndex
    {
      get
      {
        return _pageIndex;
      }
      set
      {
        __isset.pageIndex = true;
        this._pageIndex = value;
      }
    }

    public int PageSize
    {
      get
      {
        return _pageSize;
      }
      set
      {
        __isset.pageSize = true;
        this._pageSize = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string FirstName
    {
      get
      {
        return _firstName;
      }
      set
      {
        __isset.firstName = true;
        this._firstName = value;
      }
    }

    public string LastName
    {
      get
      {
        return _lastName;
      }
      set
      {
        __isset.lastName = true;
        this._lastName = value;
      }
    }

    public int UserTypeId
    {
      get
      {
        return _userTypeId;
      }
      set
      {
        __isset.userTypeId = true;
        this._userTypeId = value;
      }
    }

    public string Picture
    {
      get
      {
        return _picture;
      }
      set
      {
        __isset.picture = true;
        this._picture = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool targetType;
      public bool targetUser;
      public bool pageIndex;
      public bool pageSize;
      public bool userName;
      public bool firstName;
      public bool lastName;
      public bool userTypeId;
      public bool picture;
      public bool title;
    }

    public MutualFriend() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              TargetType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TargetUser = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              PageIndex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              PageSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              FirstName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              LastName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              UserTypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Picture = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MutualFriend");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (TargetType != null && __isset.targetType) {
        field.Name = "targetType";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetType);
        oprot.WriteFieldEnd();
      }
      if (TargetUser != null && __isset.targetUser) {
        field.Name = "targetUser";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetUser);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageIndex) {
        field.Name = "pageIndex";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageSize) {
        field.Name = "pageSize";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageSize);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (FirstName != null && __isset.firstName) {
        field.Name = "firstName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FirstName);
        oprot.WriteFieldEnd();
      }
      if (LastName != null && __isset.lastName) {
        field.Name = "lastName";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastName);
        oprot.WriteFieldEnd();
      }
      if (__isset.userTypeId) {
        field.Name = "userTypeId";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserTypeId);
        oprot.WriteFieldEnd();
      }
      if (Picture != null && __isset.picture) {
        field.Name = "picture";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Picture);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MutualFriend(");
      bool __first = true;
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (TargetType != null && __isset.targetType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TargetType: ");
        __sb.Append(TargetType);
      }
      if (TargetUser != null && __isset.targetUser) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TargetUser: ");
        __sb.Append(TargetUser);
      }
      if (__isset.pageIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageIndex: ");
        __sb.Append(PageIndex);
      }
      if (__isset.pageSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageSize: ");
        __sb.Append(PageSize);
      }
      if (UserName != null && __isset.userName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserName: ");
        __sb.Append(UserName);
      }
      if (FirstName != null && __isset.firstName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstName: ");
        __sb.Append(FirstName);
      }
      if (LastName != null && __isset.lastName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastName: ");
        __sb.Append(LastName);
      }
      if (__isset.userTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserTypeId: ");
        __sb.Append(UserTypeId);
      }
      if (Picture != null && __isset.picture) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Picture: ");
        __sb.Append(Picture);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
