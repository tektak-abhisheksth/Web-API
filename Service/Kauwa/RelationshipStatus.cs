/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RelationshipStatus : TBase
  {
    private int _relationshipStatusId;
    private string _userTypeId;
    private string _timeZone;
    private string _joinedDate;
    private string _countryCode;
    private string _visibility;
    private string _headLine;
    private string _about;
    private string _url;
    private string _picture;
    private string _lastUpdated;

    public int RelationshipStatusId
    {
      get
      {
        return _relationshipStatusId;
      }
      set
      {
        __isset.relationshipStatusId = true;
        this._relationshipStatusId = value;
      }
    }

    public string UserTypeId
    {
      get
      {
        return _userTypeId;
      }
      set
      {
        __isset.userTypeId = true;
        this._userTypeId = value;
      }
    }

    public string TimeZone
    {
      get
      {
        return _timeZone;
      }
      set
      {
        __isset.timeZone = true;
        this._timeZone = value;
      }
    }

    public string JoinedDate
    {
      get
      {
        return _joinedDate;
      }
      set
      {
        __isset.joinedDate = true;
        this._joinedDate = value;
      }
    }

    public string CountryCode
    {
      get
      {
        return _countryCode;
      }
      set
      {
        __isset.countryCode = true;
        this._countryCode = value;
      }
    }

    public string Visibility
    {
      get
      {
        return _visibility;
      }
      set
      {
        __isset.visibility = true;
        this._visibility = value;
      }
    }

    public string HeadLine
    {
      get
      {
        return _headLine;
      }
      set
      {
        __isset.headLine = true;
        this._headLine = value;
      }
    }

    public string About
    {
      get
      {
        return _about;
      }
      set
      {
        __isset.about = true;
        this._about = value;
      }
    }

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public string Picture
    {
      get
      {
        return _picture;
      }
      set
      {
        __isset.picture = true;
        this._picture = value;
      }
    }

    public string LastUpdated
    {
      get
      {
        return _lastUpdated;
      }
      set
      {
        __isset.lastUpdated = true;
        this._lastUpdated = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool relationshipStatusId;
      public bool userTypeId;
      public bool timeZone;
      public bool joinedDate;
      public bool countryCode;
      public bool visibility;
      public bool headLine;
      public bool about;
      public bool url;
      public bool picture;
      public bool lastUpdated;
    }

    public RelationshipStatus() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              RelationshipStatusId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UserTypeId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TimeZone = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              JoinedDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              CountryCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Visibility = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              HeadLine = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              About = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Picture = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              LastUpdated = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RelationshipStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.relationshipStatusId) {
        field.Name = "relationshipStatusId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RelationshipStatusId);
        oprot.WriteFieldEnd();
      }
      if (UserTypeId != null && __isset.userTypeId) {
        field.Name = "userTypeId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserTypeId);
        oprot.WriteFieldEnd();
      }
      if (TimeZone != null && __isset.timeZone) {
        field.Name = "timeZone";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TimeZone);
        oprot.WriteFieldEnd();
      }
      if (JoinedDate != null && __isset.joinedDate) {
        field.Name = "joinedDate";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JoinedDate);
        oprot.WriteFieldEnd();
      }
      if (CountryCode != null && __isset.countryCode) {
        field.Name = "countryCode";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CountryCode);
        oprot.WriteFieldEnd();
      }
      if (Visibility != null && __isset.visibility) {
        field.Name = "visibility";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Visibility);
        oprot.WriteFieldEnd();
      }
      if (HeadLine != null && __isset.headLine) {
        field.Name = "headLine";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HeadLine);
        oprot.WriteFieldEnd();
      }
      if (About != null && __isset.about) {
        field.Name = "about";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(About);
        oprot.WriteFieldEnd();
      }
      if (Url != null && __isset.url) {
        field.Name = "url";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (Picture != null && __isset.picture) {
        field.Name = "picture";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Picture);
        oprot.WriteFieldEnd();
      }
      if (LastUpdated != null && __isset.lastUpdated) {
        field.Name = "lastUpdated";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastUpdated);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RelationshipStatus(");
      bool __first = true;
      if (__isset.relationshipStatusId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RelationshipStatusId: ");
        __sb.Append(RelationshipStatusId);
      }
      if (UserTypeId != null && __isset.userTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserTypeId: ");
        __sb.Append(UserTypeId);
      }
      if (TimeZone != null && __isset.timeZone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeZone: ");
        __sb.Append(TimeZone);
      }
      if (JoinedDate != null && __isset.joinedDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JoinedDate: ");
        __sb.Append(JoinedDate);
      }
      if (CountryCode != null && __isset.countryCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CountryCode: ");
        __sb.Append(CountryCode);
      }
      if (Visibility != null && __isset.visibility) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Visibility: ");
        __sb.Append(Visibility);
      }
      if (HeadLine != null && __isset.headLine) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HeadLine: ");
        __sb.Append(HeadLine);
      }
      if (About != null && __isset.about) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("About: ");
        __sb.Append(About);
      }
      if (Url != null && __isset.url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (Picture != null && __isset.picture) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Picture: ");
        __sb.Append(Picture);
      }
      if (LastUpdated != null && __isset.lastUpdated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastUpdated: ");
        __sb.Append(LastUpdated);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
