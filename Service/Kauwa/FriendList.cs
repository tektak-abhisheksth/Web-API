/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FriendList : TBase
  {
    private List<Friend> _friends;
    private string _cTag;

    public List<Friend> Friends
    {
      get
      {
        return _friends;
      }
      set
      {
        __isset.friends = true;
        this._friends = value;
      }
    }

    public string CTag
    {
      get
      {
        return _cTag;
      }
      set
      {
        __isset.cTag = true;
        this._cTag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool friends;
      public bool cTag;
    }

    public FriendList() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Friends = new List<Friend>();
                TList _list40 = iprot.ReadListBegin();
                for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                {
                  Friend _elem42;
                  _elem42 = new Friend();
                  _elem42.Read(iprot);
                  Friends.Add(_elem42);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              CTag = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FriendList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Friends != null && __isset.friends) {
        field.Name = "friends";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Friends.Count));
          foreach (Friend _iter43 in Friends)
          {
            _iter43.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CTag != null && __isset.cTag) {
        field.Name = "cTag";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CTag);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FriendList(");
      bool __first = true;
      if (Friends != null && __isset.friends) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Friends: ");
        __sb.Append(Friends);
      }
      if (CTag != null && __isset.cTag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CTag: ");
        __sb.Append(CTag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
