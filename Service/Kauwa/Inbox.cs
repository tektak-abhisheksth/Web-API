/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Inbox : TBase
  {
    private int _inboxId;
    private int _userId;
    private int _folderId;
    private string _name;
    private string _createdDate;
    private int _ruleCount;
    private List<InboxRule> _inboxRules;
    private int _dbStatusCode;
    private int _dbSubStatusCode;
    private string _dbStatusMsg;
    private int _muted;

    public int InboxId
    {
      get
      {
        return _inboxId;
      }
      set
      {
        __isset.inboxId = true;
        this._inboxId = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int FolderId
    {
      get
      {
        return _folderId;
      }
      set
      {
        __isset.folderId = true;
        this._folderId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string CreatedDate
    {
      get
      {
        return _createdDate;
      }
      set
      {
        __isset.createdDate = true;
        this._createdDate = value;
      }
    }

    public int RuleCount
    {
      get
      {
        return _ruleCount;
      }
      set
      {
        __isset.ruleCount = true;
        this._ruleCount = value;
      }
    }

    public List<InboxRule> InboxRules
    {
      get
      {
        return _inboxRules;
      }
      set
      {
        __isset.inboxRules = true;
        this._inboxRules = value;
      }
    }

    public int DbStatusCode
    {
      get
      {
        return _dbStatusCode;
      }
      set
      {
        __isset.dbStatusCode = true;
        this._dbStatusCode = value;
      }
    }

    public int DbSubStatusCode
    {
      get
      {
        return _dbSubStatusCode;
      }
      set
      {
        __isset.dbSubStatusCode = true;
        this._dbSubStatusCode = value;
      }
    }

    public string DbStatusMsg
    {
      get
      {
        return _dbStatusMsg;
      }
      set
      {
        __isset.dbStatusMsg = true;
        this._dbStatusMsg = value;
      }
    }

    public int Muted
    {
      get
      {
        return _muted;
      }
      set
      {
        __isset.muted = true;
        this._muted = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inboxId;
      public bool userId;
      public bool folderId;
      public bool name;
      public bool createdDate;
      public bool ruleCount;
      public bool inboxRules;
      public bool dbStatusCode;
      public bool dbSubStatusCode;
      public bool dbStatusMsg;
      public bool muted;
    }

    public Inbox() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              InboxId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              FolderId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              CreatedDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              RuleCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                InboxRules = new List<InboxRule>();
                TList _list56 = iprot.ReadListBegin();
                for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                {
                  InboxRule _elem58;
                  _elem58 = new InboxRule();
                  _elem58.Read(iprot);
                  InboxRules.Add(_elem58);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              DbStatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              DbSubStatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DbStatusMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Muted = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Inbox");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.inboxId) {
        field.Name = "inboxId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InboxId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.folderId) {
        field.Name = "folderId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FolderId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (CreatedDate != null && __isset.createdDate) {
        field.Name = "createdDate";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CreatedDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.ruleCount) {
        field.Name = "ruleCount";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RuleCount);
        oprot.WriteFieldEnd();
      }
      if (InboxRules != null && __isset.inboxRules) {
        field.Name = "inboxRules";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, InboxRules.Count));
          foreach (InboxRule _iter59 in InboxRules)
          {
            _iter59.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.dbStatusCode) {
        field.Name = "dbStatusCode";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DbStatusCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.dbSubStatusCode) {
        field.Name = "dbSubStatusCode";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DbSubStatusCode);
        oprot.WriteFieldEnd();
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        field.Name = "dbStatusMsg";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DbStatusMsg);
        oprot.WriteFieldEnd();
      }
      if (__isset.muted) {
        field.Name = "muted";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Muted);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Inbox(");
      bool __first = true;
      if (__isset.inboxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InboxId: ");
        __sb.Append(InboxId);
      }
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.folderId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FolderId: ");
        __sb.Append(FolderId);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (CreatedDate != null && __isset.createdDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedDate: ");
        __sb.Append(CreatedDate);
      }
      if (__isset.ruleCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RuleCount: ");
        __sb.Append(RuleCount);
      }
      if (InboxRules != null && __isset.inboxRules) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InboxRules: ");
        __sb.Append(InboxRules);
      }
      if (__isset.dbStatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbStatusCode: ");
        __sb.Append(DbStatusCode);
      }
      if (__isset.dbSubStatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbSubStatusCode: ");
        __sb.Append(DbSubStatusCode);
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbStatusMsg: ");
        __sb.Append(DbStatusMsg);
      }
      if (__isset.muted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Muted: ");
        __sb.Append(Muted);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
