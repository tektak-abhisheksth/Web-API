/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class InboxRuleService {
    public interface Iface {
      /// <summary>
      /// Method to create Inbox Rules that takes following paramaters with their respective field set:
      /// @param Inbox messageFolder
      /// 1. int userId
      /// 2. int folderId
      /// @param InboxRule messageRule
      /// 1. int ruleUserSelection,
      /// 2. int ruleTypeUser,
      /// 3. int ruleTypeSubject,
      /// 4. String subject,
      /// 5. String[] contactList,
      /// 6. String[] groupList
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      Inbox createInboxRules(Inbox inbox, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_createInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session);
      Inbox End_createInboxRules(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to Update existing inbox rules with following parameters:
      /// @param Inbox messageFolder
      /// 1. int userId
      /// 2. int folderId
      /// @param InboxRule messageRule
      /// 1. int ruleUserSelection,
      /// 2. int ruleTypeUser,
      /// 3. int ruleTypeSubject,
      /// 4. String subject,
      /// 5. String[] contactList,
      /// 6. String[] groupList
      /// 7. int messageRuleId
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      DbStatus updateInboxRules(Inbox inbox, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updateInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session);
      DbStatus End_updateInboxRules(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to delete existing inbox rules with following parameters:
      /// @param Inbox messageFolder
      /// 1. int userId
      /// 2. int folderId
      /// @param InboxRule messageRule
      /// 1. int messageRuleId
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      DbStatus deleteInboxRules(Inbox inbox, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session);
      DbStatus End_deleteInboxRules(IAsyncResult asyncResult);
      #endif
      List<InboxRule> getRules(int userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getRules(AsyncCallback callback, object state, int userId, Session session);
      List<InboxRule> End_getRules(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      {
        return send_createInboxRules(callback, state, inbox, session);
      }

      public Inbox End_createInboxRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createInboxRules();
      }

      #endif

      /// <summary>
      /// Method to create Inbox Rules that takes following paramaters with their respective field set:
      /// @param Inbox messageFolder
      /// 1. int userId
      /// 2. int folderId
      /// @param InboxRule messageRule
      /// 1. int ruleUserSelection,
      /// 2. int ruleTypeUser,
      /// 3. int ruleTypeSubject,
      /// 4. String subject,
      /// 5. String[] contactList,
      /// 6. String[] groupList
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      public Inbox createInboxRules(Inbox inbox, Session session)
      {
        #if !SILVERLIGHT
        send_createInboxRules(inbox, session);
        return recv_createInboxRules();

        #else
        var asyncResult = Begin_createInboxRules(null, null, inbox, session);
        return End_createInboxRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      #else
      public void send_createInboxRules(Inbox inbox, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createInboxRules", TMessageType.Call, seqid_));
        createInboxRules_args args = new createInboxRules_args();
        args.Inbox = inbox;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Inbox recv_createInboxRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createInboxRules_result result = new createInboxRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createInboxRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      {
        return send_updateInboxRules(callback, state, inbox, session);
      }

      public DbStatus End_updateInboxRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateInboxRules();
      }

      #endif

      /// <summary>
      /// Method to Update existing inbox rules with following parameters:
      /// @param Inbox messageFolder
      /// 1. int userId
      /// 2. int folderId
      /// @param InboxRule messageRule
      /// 1. int ruleUserSelection,
      /// 2. int ruleTypeUser,
      /// 3. int ruleTypeSubject,
      /// 4. String subject,
      /// 5. String[] contactList,
      /// 6. String[] groupList
      /// 7. int messageRuleId
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      public DbStatus updateInboxRules(Inbox inbox, Session session)
      {
        #if !SILVERLIGHT
        send_updateInboxRules(inbox, session);
        return recv_updateInboxRules();

        #else
        var asyncResult = Begin_updateInboxRules(null, null, inbox, session);
        return End_updateInboxRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      #else
      public void send_updateInboxRules(Inbox inbox, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateInboxRules", TMessageType.Call, seqid_));
        updateInboxRules_args args = new updateInboxRules_args();
        args.Inbox = inbox;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_updateInboxRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateInboxRules_result result = new updateInboxRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateInboxRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      {
        return send_deleteInboxRules(callback, state, inbox, session);
      }

      public DbStatus End_deleteInboxRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteInboxRules();
      }

      #endif

      /// <summary>
      /// Method to delete existing inbox rules with following parameters:
      /// @param Inbox messageFolder
      /// 1. int userId
      /// 2. int folderId
      /// @param InboxRule messageRule
      /// 1. int messageRuleId
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      public DbStatus deleteInboxRules(Inbox inbox, Session session)
      {
        #if !SILVERLIGHT
        send_deleteInboxRules(inbox, session);
        return recv_deleteInboxRules();

        #else
        var asyncResult = Begin_deleteInboxRules(null, null, inbox, session);
        return End_deleteInboxRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteInboxRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      #else
      public void send_deleteInboxRules(Inbox inbox, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteInboxRules", TMessageType.Call, seqid_));
        deleteInboxRules_args args = new deleteInboxRules_args();
        args.Inbox = inbox;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_deleteInboxRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteInboxRules_result result = new deleteInboxRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteInboxRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRules(AsyncCallback callback, object state, int userId, Session session)
      {
        return send_getRules(callback, state, userId, session);
      }

      public List<InboxRule> End_getRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRules();
      }

      #endif

      public List<InboxRule> getRules(int userId, Session session)
      {
        #if !SILVERLIGHT
        send_getRules(userId, session);
        return recv_getRules();

        #else
        var asyncResult = Begin_getRules(null, null, userId, session);
        return End_getRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRules(AsyncCallback callback, object state, int userId, Session session)
      #else
      public void send_getRules(int userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRules", TMessageType.Call, seqid_));
        getRules_args args = new getRules_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<InboxRule> recv_getRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRules_result result = new getRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRules failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createInboxRules"] = createInboxRules_Process;
        processMap_["updateInboxRules"] = updateInboxRules_Process;
        processMap_["deleteInboxRules"] = deleteInboxRules_Process;
        processMap_["getRules"] = getRules_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createInboxRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createInboxRules_args args = new createInboxRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createInboxRules_result result = new createInboxRules_result();
        try {
          result.Success = iface_.createInboxRules(args.Inbox, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("createInboxRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateInboxRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateInboxRules_args args = new updateInboxRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateInboxRules_result result = new updateInboxRules_result();
        try {
          result.Success = iface_.updateInboxRules(args.Inbox, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updateInboxRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteInboxRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteInboxRules_args args = new deleteInboxRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteInboxRules_result result = new deleteInboxRules_result();
        try {
          result.Success = iface_.deleteInboxRules(args.Inbox, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("deleteInboxRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRules_args args = new getRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRules_result result = new getRules_result();
        try {
          result.Success = iface_.getRules(args.UserId, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInboxRules_args : TBase
    {
      private Inbox _inbox;
      private Session _session;

      public Inbox Inbox
      {
        get
        {
          return _inbox;
        }
        set
        {
          __isset.inbox = true;
          this._inbox = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool inbox;
        public bool session;
      }

      public createInboxRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Inbox = new Inbox();
                Inbox.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createInboxRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Inbox != null && __isset.inbox) {
          field.Name = "inbox";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Inbox.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInboxRules_args(");
        bool __first = true;
        if (Inbox != null && __isset.inbox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Inbox: ");
          __sb.Append(Inbox== null ? "<null>" : Inbox.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInboxRules_result : TBase
    {
      private Inbox _success;
      private InboxException _ex;
      private SessionException _se;

      public Inbox Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public createInboxRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Inbox();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createInboxRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInboxRules_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateInboxRules_args : TBase
    {
      private Inbox _inbox;
      private Session _session;

      public Inbox Inbox
      {
        get
        {
          return _inbox;
        }
        set
        {
          __isset.inbox = true;
          this._inbox = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool inbox;
        public bool session;
      }

      public updateInboxRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Inbox = new Inbox();
                Inbox.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateInboxRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Inbox != null && __isset.inbox) {
          field.Name = "inbox";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Inbox.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateInboxRules_args(");
        bool __first = true;
        if (Inbox != null && __isset.inbox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Inbox: ");
          __sb.Append(Inbox== null ? "<null>" : Inbox.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateInboxRules_result : TBase
    {
      private DbStatus _success;
      private InboxException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public updateInboxRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateInboxRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateInboxRules_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteInboxRules_args : TBase
    {
      private Inbox _inbox;
      private Session _session;

      public Inbox Inbox
      {
        get
        {
          return _inbox;
        }
        set
        {
          __isset.inbox = true;
          this._inbox = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool inbox;
        public bool session;
      }

      public deleteInboxRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Inbox = new Inbox();
                Inbox.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteInboxRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Inbox != null && __isset.inbox) {
          field.Name = "inbox";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Inbox.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteInboxRules_args(");
        bool __first = true;
        if (Inbox != null && __isset.inbox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Inbox: ");
          __sb.Append(Inbox== null ? "<null>" : Inbox.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteInboxRules_result : TBase
    {
      private DbStatus _success;
      private InboxException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public deleteInboxRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteInboxRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteInboxRules_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRules_args : TBase
    {
      private int _userId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRules_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRules_result : TBase
    {
      private List<InboxRule> _success;
      private InboxException _ex;
      private SessionException _se;

      public List<InboxRule> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<InboxRule>();
                  TList _list284 = iprot.ReadListBegin();
                  for( int _i285 = 0; _i285 < _list284.Count; ++_i285)
                  {
                    InboxRule _elem286;
                    _elem286 = new InboxRule();
                    _elem286.Read(iprot);
                    Success.Add(_elem286);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (InboxRule _iter287 in Success)
              {
                _iter287.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRules_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
