/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class InboxService {
    public interface Iface {
      /// <summary>
      /// Method to list the inbox folders of a user
      /// @param integer userID
      /// @param Session sessionObj
      /// @return ArrayList<Inbox> with values set:
      /// 1.int userId
      /// 2.int folderId
      /// 3.String name
      /// 4.Date created
      /// 5.int ruleCount
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<Inbox> listInboxFolders(int userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_listInboxFolders(AsyncCallback callback, object state, int userId, Session session);
      List<Inbox> End_listInboxFolders(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to Create Inbox Folder with their rules for contactList
      /// @param Inbox messageFoler with following values required
      /// 1.int userId
      /// 2.String name
      /// 3 list<InboxRule> messageRule with following values required
      /// int typeUserSelection (0 or 1)
      /// int ruleTypeUser (0 or 1 or 2)
      /// int ruleTypeSubject (0 or 1)
      /// String subject
      /// String[] contactList
      /// String[] groupList
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      Inbox createInboxWithRules(Inbox inbox, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_createInboxWithRules(AsyncCallback callback, object state, Inbox inbox, Session session);
      Inbox End_createInboxWithRules(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to update Inbox Folder Name with new name
      /// @param Inbox messageFolder with following values required
      ///  1. int userId
      ///  2. int folderId
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      DbStatus updateInboxFolderName(Inbox inbox, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updateInboxFolderName(AsyncCallback callback, object state, Inbox inbox, Session session);
      DbStatus End_updateInboxFolderName(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to delete existing inbox Folder with following parameter described below:
      /// @param Inbox messageFolder
      /// 1.int userId in messageFolder
      /// 2.int folderId in messageFolder
      /// @param Session sessionObj
      /// @return int affected_rows
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="folderId"></param>
      /// <param name="session"></param>
      DbStatus deleteInboxFolder(string folderId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteInboxFolder(AsyncCallback callback, object state, string folderId, Session session);
      DbStatus End_deleteInboxFolder(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to get Inbox Folder with all Rules
      /// @param int userId
      /// @return Inbox messageFolder datamodel with values in following fields:
      /// 1. int userId,
      /// 2. int folderId,
      /// 3. List<MessageRule> (with value int folderId),
      ///      1. int messageFolderId,
      ///      2. int ruleUserSelection,
      ///      3. int ruleTypeUser,
      ///      4. int ruleTypeSubject,
      ///      5. String subject,
      ///      6. String[] contactList,
      ///      7. String[] groupList
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="folderId"></param>
      /// <param name="session"></param>
      Inbox getInboxFolderWithRules(int userId, int folderId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getInboxFolderWithRules(AsyncCallback callback, object state, int userId, int folderId, Session session);
      Inbox End_getInboxFolderWithRules(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to get All Inbox Folder with all Rules
      /// @param int userId
      /// @return List<Inbox> messageFolder datamodel with values in following fields:
      /// 1. int userId,
      /// 2. int folderId,
      /// 3. List<InboxRule></MessageRule> (with value int folderId),
      ///      1. int messageFolderId,
      ///      2. int ruleUserSelection,
      ///      3. int ruleTypeUser,
      ///      4. int ruleTypeSubject,
      ///      5. String subject,
      ///      6. String[] contactList,
      ///      7. String[] groupList
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<Inbox> getAllInboxFolderWithRules(int userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getAllInboxFolderWithRules(AsyncCallback callback, object state, int userId, Session session);
      List<Inbox> End_getAllInboxFolderWithRules(IAsyncResult asyncResult);
      #endif
      DbStatus muteInbox(int userId, string folderId, int muteValue, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_muteInbox(AsyncCallback callback, object state, int userId, string folderId, int muteValue, Session session);
      DbStatus End_muteInbox(IAsyncResult asyncResult);
      #endif
      List<string> moveToInbox(string fromFolder, string toFolder, List<string> insatnceList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_moveToInbox(AsyncCallback callback, object state, string fromFolder, string toFolder, List<string> insatnceList, Session session);
      List<string> End_moveToInbox(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_listInboxFolders(AsyncCallback callback, object state, int userId, Session session)
      {
        return send_listInboxFolders(callback, state, userId, session);
      }

      public List<Inbox> End_listInboxFolders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listInboxFolders();
      }

      #endif

      /// <summary>
      /// Method to list the inbox folders of a user
      /// @param integer userID
      /// @param Session sessionObj
      /// @return ArrayList<Inbox> with values set:
      /// 1.int userId
      /// 2.int folderId
      /// 3.String name
      /// 4.Date created
      /// 5.int ruleCount
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<Inbox> listInboxFolders(int userId, Session session)
      {
        #if !SILVERLIGHT
        send_listInboxFolders(userId, session);
        return recv_listInboxFolders();

        #else
        var asyncResult = Begin_listInboxFolders(null, null, userId, session);
        return End_listInboxFolders(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listInboxFolders(AsyncCallback callback, object state, int userId, Session session)
      #else
      public void send_listInboxFolders(int userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listInboxFolders", TMessageType.Call, seqid_));
        listInboxFolders_args args = new listInboxFolders_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Inbox> recv_listInboxFolders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listInboxFolders_result result = new listInboxFolders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listInboxFolders failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createInboxWithRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      {
        return send_createInboxWithRules(callback, state, inbox, session);
      }

      public Inbox End_createInboxWithRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createInboxWithRules();
      }

      #endif

      /// <summary>
      /// Method to Create Inbox Folder with their rules for contactList
      /// @param Inbox messageFoler with following values required
      /// 1.int userId
      /// 2.String name
      /// 3 list<InboxRule> messageRule with following values required
      /// int typeUserSelection (0 or 1)
      /// int ruleTypeUser (0 or 1 or 2)
      /// int ruleTypeSubject (0 or 1)
      /// String subject
      /// String[] contactList
      /// String[] groupList
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      public Inbox createInboxWithRules(Inbox inbox, Session session)
      {
        #if !SILVERLIGHT
        send_createInboxWithRules(inbox, session);
        return recv_createInboxWithRules();

        #else
        var asyncResult = Begin_createInboxWithRules(null, null, inbox, session);
        return End_createInboxWithRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createInboxWithRules(AsyncCallback callback, object state, Inbox inbox, Session session)
      #else
      public void send_createInboxWithRules(Inbox inbox, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createInboxWithRules", TMessageType.Call, seqid_));
        createInboxWithRules_args args = new createInboxWithRules_args();
        args.Inbox = inbox;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Inbox recv_createInboxWithRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createInboxWithRules_result result = new createInboxWithRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createInboxWithRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateInboxFolderName(AsyncCallback callback, object state, Inbox inbox, Session session)
      {
        return send_updateInboxFolderName(callback, state, inbox, session);
      }

      public DbStatus End_updateInboxFolderName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateInboxFolderName();
      }

      #endif

      /// <summary>
      /// Method to update Inbox Folder Name with new name
      /// @param Inbox messageFolder with following values required
      ///  1. int userId
      ///  2. int folderId
      /// @param Session sessionObj
      /// @return int code
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="inbox"></param>
      /// <param name="session"></param>
      public DbStatus updateInboxFolderName(Inbox inbox, Session session)
      {
        #if !SILVERLIGHT
        send_updateInboxFolderName(inbox, session);
        return recv_updateInboxFolderName();

        #else
        var asyncResult = Begin_updateInboxFolderName(null, null, inbox, session);
        return End_updateInboxFolderName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateInboxFolderName(AsyncCallback callback, object state, Inbox inbox, Session session)
      #else
      public void send_updateInboxFolderName(Inbox inbox, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateInboxFolderName", TMessageType.Call, seqid_));
        updateInboxFolderName_args args = new updateInboxFolderName_args();
        args.Inbox = inbox;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_updateInboxFolderName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateInboxFolderName_result result = new updateInboxFolderName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateInboxFolderName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteInboxFolder(AsyncCallback callback, object state, string folderId, Session session)
      {
        return send_deleteInboxFolder(callback, state, folderId, session);
      }

      public DbStatus End_deleteInboxFolder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteInboxFolder();
      }

      #endif

      /// <summary>
      /// Method to delete existing inbox Folder with following parameter described below:
      /// @param Inbox messageFolder
      /// 1.int userId in messageFolder
      /// 2.int folderId in messageFolder
      /// @param Session sessionObj
      /// @return int affected_rows
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="folderId"></param>
      /// <param name="session"></param>
      public DbStatus deleteInboxFolder(string folderId, Session session)
      {
        #if !SILVERLIGHT
        send_deleteInboxFolder(folderId, session);
        return recv_deleteInboxFolder();

        #else
        var asyncResult = Begin_deleteInboxFolder(null, null, folderId, session);
        return End_deleteInboxFolder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteInboxFolder(AsyncCallback callback, object state, string folderId, Session session)
      #else
      public void send_deleteInboxFolder(string folderId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteInboxFolder", TMessageType.Call, seqid_));
        deleteInboxFolder_args args = new deleteInboxFolder_args();
        args.FolderId = folderId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_deleteInboxFolder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteInboxFolder_result result = new deleteInboxFolder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteInboxFolder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getInboxFolderWithRules(AsyncCallback callback, object state, int userId, int folderId, Session session)
      {
        return send_getInboxFolderWithRules(callback, state, userId, folderId, session);
      }

      public Inbox End_getInboxFolderWithRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getInboxFolderWithRules();
      }

      #endif

      /// <summary>
      /// Method to get Inbox Folder with all Rules
      /// @param int userId
      /// @return Inbox messageFolder datamodel with values in following fields:
      /// 1. int userId,
      /// 2. int folderId,
      /// 3. List<MessageRule> (with value int folderId),
      ///      1. int messageFolderId,
      ///      2. int ruleUserSelection,
      ///      3. int ruleTypeUser,
      ///      4. int ruleTypeSubject,
      ///      5. String subject,
      ///      6. String[] contactList,
      ///      7. String[] groupList
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="folderId"></param>
      /// <param name="session"></param>
      public Inbox getInboxFolderWithRules(int userId, int folderId, Session session)
      {
        #if !SILVERLIGHT
        send_getInboxFolderWithRules(userId, folderId, session);
        return recv_getInboxFolderWithRules();

        #else
        var asyncResult = Begin_getInboxFolderWithRules(null, null, userId, folderId, session);
        return End_getInboxFolderWithRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getInboxFolderWithRules(AsyncCallback callback, object state, int userId, int folderId, Session session)
      #else
      public void send_getInboxFolderWithRules(int userId, int folderId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getInboxFolderWithRules", TMessageType.Call, seqid_));
        getInboxFolderWithRules_args args = new getInboxFolderWithRules_args();
        args.UserId = userId;
        args.FolderId = folderId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Inbox recv_getInboxFolderWithRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInboxFolderWithRules_result result = new getInboxFolderWithRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInboxFolderWithRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllInboxFolderWithRules(AsyncCallback callback, object state, int userId, Session session)
      {
        return send_getAllInboxFolderWithRules(callback, state, userId, session);
      }

      public List<Inbox> End_getAllInboxFolderWithRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllInboxFolderWithRules();
      }

      #endif

      /// <summary>
      /// Method to get All Inbox Folder with all Rules
      /// @param int userId
      /// @return List<Inbox> messageFolder datamodel with values in following fields:
      /// 1. int userId,
      /// 2. int folderId,
      /// 3. List<InboxRule></MessageRule> (with value int folderId),
      ///      1. int messageFolderId,
      ///      2. int ruleUserSelection,
      ///      3. int ruleTypeUser,
      ///      4. int ruleTypeSubject,
      ///      5. String subject,
      ///      6. String[] contactList,
      ///      7. String[] groupList
      /// @throws InboxException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<Inbox> getAllInboxFolderWithRules(int userId, Session session)
      {
        #if !SILVERLIGHT
        send_getAllInboxFolderWithRules(userId, session);
        return recv_getAllInboxFolderWithRules();

        #else
        var asyncResult = Begin_getAllInboxFolderWithRules(null, null, userId, session);
        return End_getAllInboxFolderWithRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllInboxFolderWithRules(AsyncCallback callback, object state, int userId, Session session)
      #else
      public void send_getAllInboxFolderWithRules(int userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllInboxFolderWithRules", TMessageType.Call, seqid_));
        getAllInboxFolderWithRules_args args = new getAllInboxFolderWithRules_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Inbox> recv_getAllInboxFolderWithRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllInboxFolderWithRules_result result = new getAllInboxFolderWithRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllInboxFolderWithRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_muteInbox(AsyncCallback callback, object state, int userId, string folderId, int muteValue, Session session)
      {
        return send_muteInbox(callback, state, userId, folderId, muteValue, session);
      }

      public DbStatus End_muteInbox(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_muteInbox();
      }

      #endif

      public DbStatus muteInbox(int userId, string folderId, int muteValue, Session session)
      {
        #if !SILVERLIGHT
        send_muteInbox(userId, folderId, muteValue, session);
        return recv_muteInbox();

        #else
        var asyncResult = Begin_muteInbox(null, null, userId, folderId, muteValue, session);
        return End_muteInbox(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_muteInbox(AsyncCallback callback, object state, int userId, string folderId, int muteValue, Session session)
      #else
      public void send_muteInbox(int userId, string folderId, int muteValue, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("muteInbox", TMessageType.Call, seqid_));
        muteInbox_args args = new muteInbox_args();
        args.UserId = userId;
        args.FolderId = folderId;
        args.MuteValue = muteValue;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_muteInbox()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        muteInbox_result result = new muteInbox_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "muteInbox failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_moveToInbox(AsyncCallback callback, object state, string fromFolder, string toFolder, List<string> insatnceList, Session session)
      {
        return send_moveToInbox(callback, state, fromFolder, toFolder, insatnceList, session);
      }

      public List<string> End_moveToInbox(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_moveToInbox();
      }

      #endif

      public List<string> moveToInbox(string fromFolder, string toFolder, List<string> insatnceList, Session session)
      {
        #if !SILVERLIGHT
        send_moveToInbox(fromFolder, toFolder, insatnceList, session);
        return recv_moveToInbox();

        #else
        var asyncResult = Begin_moveToInbox(null, null, fromFolder, toFolder, insatnceList, session);
        return End_moveToInbox(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_moveToInbox(AsyncCallback callback, object state, string fromFolder, string toFolder, List<string> insatnceList, Session session)
      #else
      public void send_moveToInbox(string fromFolder, string toFolder, List<string> insatnceList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("moveToInbox", TMessageType.Call, seqid_));
        moveToInbox_args args = new moveToInbox_args();
        args.FromFolder = fromFolder;
        args.ToFolder = toFolder;
        args.InsatnceList = insatnceList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_moveToInbox()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        moveToInbox_result result = new moveToInbox_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "moveToInbox failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["listInboxFolders"] = listInboxFolders_Process;
        processMap_["createInboxWithRules"] = createInboxWithRules_Process;
        processMap_["updateInboxFolderName"] = updateInboxFolderName_Process;
        processMap_["deleteInboxFolder"] = deleteInboxFolder_Process;
        processMap_["getInboxFolderWithRules"] = getInboxFolderWithRules_Process;
        processMap_["getAllInboxFolderWithRules"] = getAllInboxFolderWithRules_Process;
        processMap_["muteInbox"] = muteInbox_Process;
        processMap_["moveToInbox"] = moveToInbox_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void listInboxFolders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listInboxFolders_args args = new listInboxFolders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listInboxFolders_result result = new listInboxFolders_result();
        try {
          result.Success = iface_.listInboxFolders(args.UserId, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("listInboxFolders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createInboxWithRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createInboxWithRules_args args = new createInboxWithRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createInboxWithRules_result result = new createInboxWithRules_result();
        try {
          result.Success = iface_.createInboxWithRules(args.Inbox, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("createInboxWithRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateInboxFolderName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateInboxFolderName_args args = new updateInboxFolderName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateInboxFolderName_result result = new updateInboxFolderName_result();
        try {
          result.Success = iface_.updateInboxFolderName(args.Inbox, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updateInboxFolderName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteInboxFolder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteInboxFolder_args args = new deleteInboxFolder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteInboxFolder_result result = new deleteInboxFolder_result();
        try {
          result.Success = iface_.deleteInboxFolder(args.FolderId, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("deleteInboxFolder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getInboxFolderWithRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInboxFolderWithRules_args args = new getInboxFolderWithRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInboxFolderWithRules_result result = new getInboxFolderWithRules_result();
        try {
          result.Success = iface_.getInboxFolderWithRules(args.UserId, args.FolderId, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getInboxFolderWithRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllInboxFolderWithRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllInboxFolderWithRules_args args = new getAllInboxFolderWithRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllInboxFolderWithRules_result result = new getAllInboxFolderWithRules_result();
        try {
          result.Success = iface_.getAllInboxFolderWithRules(args.UserId, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getAllInboxFolderWithRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void muteInbox_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        muteInbox_args args = new muteInbox_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        muteInbox_result result = new muteInbox_result();
        try {
          result.Success = iface_.muteInbox(args.UserId, args.FolderId, args.MuteValue, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("muteInbox", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void moveToInbox_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        moveToInbox_args args = new moveToInbox_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        moveToInbox_result result = new moveToInbox_result();
        try {
          result.Success = iface_.moveToInbox(args.FromFolder, args.ToFolder, args.InsatnceList, args.Session);
        } catch (InboxException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("moveToInbox", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listInboxFolders_args : TBase
    {
      private int _userId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public listInboxFolders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listInboxFolders_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("listInboxFolders_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listInboxFolders_result : TBase
    {
      private List<Inbox> _success;
      private InboxException _ex;
      private SessionException _se;

      public List<Inbox> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public listInboxFolders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Inbox>();
                  TList _list268 = iprot.ReadListBegin();
                  for( int _i269 = 0; _i269 < _list268.Count; ++_i269)
                  {
                    Inbox _elem270;
                    _elem270 = new Inbox();
                    _elem270.Read(iprot);
                    Success.Add(_elem270);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listInboxFolders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Inbox _iter271 in Success)
              {
                _iter271.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("listInboxFolders_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInboxWithRules_args : TBase
    {
      private Inbox _inbox;
      private Session _session;

      public Inbox Inbox
      {
        get
        {
          return _inbox;
        }
        set
        {
          __isset.inbox = true;
          this._inbox = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool inbox;
        public bool session;
      }

      public createInboxWithRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Inbox = new Inbox();
                Inbox.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createInboxWithRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Inbox != null && __isset.inbox) {
          field.Name = "inbox";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Inbox.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInboxWithRules_args(");
        bool __first = true;
        if (Inbox != null && __isset.inbox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Inbox: ");
          __sb.Append(Inbox== null ? "<null>" : Inbox.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createInboxWithRules_result : TBase
    {
      private Inbox _success;
      private InboxException _ex;
      private SessionException _se;

      public Inbox Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public createInboxWithRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Inbox();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createInboxWithRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createInboxWithRules_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateInboxFolderName_args : TBase
    {
      private Inbox _inbox;
      private Session _session;

      public Inbox Inbox
      {
        get
        {
          return _inbox;
        }
        set
        {
          __isset.inbox = true;
          this._inbox = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool inbox;
        public bool session;
      }

      public updateInboxFolderName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Inbox = new Inbox();
                Inbox.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateInboxFolderName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Inbox != null && __isset.inbox) {
          field.Name = "inbox";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Inbox.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateInboxFolderName_args(");
        bool __first = true;
        if (Inbox != null && __isset.inbox) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Inbox: ");
          __sb.Append(Inbox== null ? "<null>" : Inbox.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateInboxFolderName_result : TBase
    {
      private DbStatus _success;
      private InboxException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public updateInboxFolderName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateInboxFolderName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateInboxFolderName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteInboxFolder_args : TBase
    {
      private string _folderId;
      private Session _session;

      public string FolderId
      {
        get
        {
          return _folderId;
        }
        set
        {
          __isset.folderId = true;
          this._folderId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool folderId;
        public bool session;
      }

      public deleteInboxFolder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FolderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteInboxFolder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FolderId != null && __isset.folderId) {
          field.Name = "folderId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FolderId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteInboxFolder_args(");
        bool __first = true;
        if (FolderId != null && __isset.folderId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FolderId: ");
          __sb.Append(FolderId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteInboxFolder_result : TBase
    {
      private DbStatus _success;
      private InboxException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public deleteInboxFolder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteInboxFolder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteInboxFolder_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInboxFolderWithRules_args : TBase
    {
      private int _userId;
      private int _folderId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public int FolderId
      {
        get
        {
          return _folderId;
        }
        set
        {
          __isset.folderId = true;
          this._folderId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool folderId;
        public bool session;
      }

      public getInboxFolderWithRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                FolderId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInboxFolderWithRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.folderId) {
          field.Name = "folderId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FolderId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInboxFolderWithRules_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.folderId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FolderId: ");
          __sb.Append(FolderId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInboxFolderWithRules_result : TBase
    {
      private Inbox _success;
      private InboxException _ex;
      private SessionException _se;

      public Inbox Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getInboxFolderWithRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Inbox();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInboxFolderWithRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInboxFolderWithRules_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllInboxFolderWithRules_args : TBase
    {
      private int _userId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getAllInboxFolderWithRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllInboxFolderWithRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllInboxFolderWithRules_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllInboxFolderWithRules_result : TBase
    {
      private List<Inbox> _success;
      private InboxException _ex;
      private SessionException _se;

      public List<Inbox> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getAllInboxFolderWithRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Inbox>();
                  TList _list272 = iprot.ReadListBegin();
                  for( int _i273 = 0; _i273 < _list272.Count; ++_i273)
                  {
                    Inbox _elem274;
                    _elem274 = new Inbox();
                    _elem274.Read(iprot);
                    Success.Add(_elem274);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllInboxFolderWithRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Inbox _iter275 in Success)
              {
                _iter275.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllInboxFolderWithRules_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class muteInbox_args : TBase
    {
      private int _userId;
      private string _folderId;
      private int _muteValue;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string FolderId
      {
        get
        {
          return _folderId;
        }
        set
        {
          __isset.folderId = true;
          this._folderId = value;
        }
      }

      public int MuteValue
      {
        get
        {
          return _muteValue;
        }
        set
        {
          __isset.muteValue = true;
          this._muteValue = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool folderId;
        public bool muteValue;
        public bool session;
      }

      public muteInbox_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FolderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MuteValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("muteInbox_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (FolderId != null && __isset.folderId) {
          field.Name = "folderId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FolderId);
          oprot.WriteFieldEnd();
        }
        if (__isset.muteValue) {
          field.Name = "muteValue";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MuteValue);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("muteInbox_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (FolderId != null && __isset.folderId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FolderId: ");
          __sb.Append(FolderId);
        }
        if (__isset.muteValue) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MuteValue: ");
          __sb.Append(MuteValue);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class muteInbox_result : TBase
    {
      private DbStatus _success;
      private InboxException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public muteInbox_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("muteInbox_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("muteInbox_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveToInbox_args : TBase
    {
      private string _fromFolder;
      private string _toFolder;
      private List<string> _insatnceList;
      private Session _session;

      public string FromFolder
      {
        get
        {
          return _fromFolder;
        }
        set
        {
          __isset.fromFolder = true;
          this._fromFolder = value;
        }
      }

      public string ToFolder
      {
        get
        {
          return _toFolder;
        }
        set
        {
          __isset.toFolder = true;
          this._toFolder = value;
        }
      }

      public List<string> InsatnceList
      {
        get
        {
          return _insatnceList;
        }
        set
        {
          __isset.insatnceList = true;
          this._insatnceList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fromFolder;
        public bool toFolder;
        public bool insatnceList;
        public bool session;
      }

      public moveToInbox_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FromFolder = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ToFolder = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  InsatnceList = new List<string>();
                  TList _list276 = iprot.ReadListBegin();
                  for( int _i277 = 0; _i277 < _list276.Count; ++_i277)
                  {
                    string _elem278;
                    _elem278 = iprot.ReadString();
                    InsatnceList.Add(_elem278);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveToInbox_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FromFolder != null && __isset.fromFolder) {
          field.Name = "fromFolder";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FromFolder);
          oprot.WriteFieldEnd();
        }
        if (ToFolder != null && __isset.toFolder) {
          field.Name = "toFolder";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ToFolder);
          oprot.WriteFieldEnd();
        }
        if (InsatnceList != null && __isset.insatnceList) {
          field.Name = "insatnceList";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, InsatnceList.Count));
            foreach (string _iter279 in InsatnceList)
            {
              oprot.WriteString(_iter279);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("moveToInbox_args(");
        bool __first = true;
        if (FromFolder != null && __isset.fromFolder) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FromFolder: ");
          __sb.Append(FromFolder);
        }
        if (ToFolder != null && __isset.toFolder) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToFolder: ");
          __sb.Append(ToFolder);
        }
        if (InsatnceList != null && __isset.insatnceList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InsatnceList: ");
          __sb.Append(InsatnceList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveToInbox_result : TBase
    {
      private List<string> _success;
      private InboxException _ex;
      private SessionException _se;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InboxException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public moveToInbox_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list280 = iprot.ReadListBegin();
                  for( int _i281 = 0; _i281 < _list280.Count; ++_i281)
                  {
                    string _elem282;
                    _elem282 = iprot.ReadString();
                    Success.Add(_elem282);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new InboxException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveToInbox_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter283 in Success)
              {
                oprot.WriteString(_iter283);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("moveToInbox_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
