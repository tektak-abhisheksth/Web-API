/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class UserService {
    /// <summary>
    /// * @author Dipak Malla
    /// *         UserService Class
    /// *         All user related service are located over here
    ///    Date: 7/24/14
    /// </summary>
    public interface Iface {
      /// <summary>
      /// Method for authentication i.e
      /// takes userName and password and checks for authentication
      /// @param User userObj
      /// @return User
      /// @throws UserException
      /// </summary>
      /// <param name="user"></param>
      User Auth(User user);
      #if SILVERLIGHT
      IAsyncResult Begin_Auth(AsyncCallback callback, object state, User user);
      User End_Auth(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// calls stored procedure "PROC_USERLOGIN_CREATEPERSON"
      /// method for inserting user information into multiple table during registration
      /// @param User userObj
      /// Country country
      /// UserInfoPerson userInfoPerson
      /// @return User
      /// @throws UserException
      /// </summary>
      /// <param name="user"></param>
      User RegisterUser(User user);
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterUser(AsyncCallback callback, object state, User user);
      User End_RegisterUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// calls stored procedure "PROC_USERLOGIN_CREATECOMPANY"
      /// method for inserting user information into multiple table during registration
      /// @param User userObj
      /// Country country
      /// UserInfoCompany userInfoCompany
      /// @return User
      /// @throws UserException
      /// </summary>
      /// <param name="user"></param>
      User RegisterBusinessUser(User user);
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterBusinessUser(AsyncCallback callback, object state, User user);
      User End_RegisterBusinessUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// @param User user
      ///    Takes User object as parameter. Note that session object of User instance should be filled.
      ///    Session object must contain field like user id, token and device id. Auto Reply can be set true if session
      ///    should be removed from persistance.
      /// @return Boolean
      ///         Takes User object and returns true if session was killed or false
      ///         This method is used to kill the session
      /// @throws UserException (See Error Code list for details)
      /// </summary>
      /// <param name="user"></param>
      bool Kill(User user);
      #if SILVERLIGHT
      IAsyncResult Begin_Kill(AsyncCallback callback, object state, User user);
      bool End_Kill(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// @param int userId, int friendId, int categoryId, Boolean accepted, Session session
      /// @return Friend
      ///         This method is used to respond to the friend request.
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="categoryId"></param>
      /// <param name="accepted"></param>
      /// <param name="session"></param>
      /// <param name="friendUsername"></param>
      Friend FriendResponse(string userId, string friendId, int categoryId, bool accepted, Session session, string friendUsername);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendResponse(AsyncCallback callback, object state, string userId, string friendId, int categoryId, bool accepted, Session session, string friendUsername);
      Friend End_FriendResponse(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// @param int userId, int friendId, int categoryId,  Session session
      /// @return Friend
      ///         This method is used to send friend request
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="categoryId"></param>
      /// <param name="session"></param>
      /// <param name="friendUsername"></param>
      DbStatus FriendRequest(string userId, string friendId, int categoryId, Session session, string friendUsername);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendRequest(AsyncCallback callback, object state, string userId, string friendId, int categoryId, Session session, string friendUsername);
      DbStatus End_FriendRequest(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// @param int userId, int friendId,  Session session
      ///         This method is used to do unfriend
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="session"></param>
      /// <param name="friendUsername"></param>
      Friend UnFriend(string userId, string friendId, Session session, string friendUsername);
      #if SILVERLIGHT
      IAsyncResult Begin_UnFriend(AsyncCallback callback, object state, string userId, string friendId, Session session, string friendUsername);
      Friend End_UnFriend(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Calls storedProcedure 'SP_MUTUAL_FRIENDS' and gets the list of
      /// mutual friends with descriptions( userId, firstName, lastName, picture, userTypeId)
      /// 
      /// @param int UserID
      /// @param int FriendID
      /// @param int pageIndex
      /// @param int pageSize
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      List<Friend> mutualFriends(int userId, int friendId, short pageIndex, short pageSize, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_mutualFriends(AsyncCallback callback, object state, int userId, int friendId, short pageIndex, short pageSize, Session session);
      List<Friend> End_mutualFriends(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Calls storedProcedure 'SP_MUTUAL_FRIENDS' and gets the list of
      /// mutual friends in a group with  descriptions( userId, firstName, lastName, picture, userTypeId)
      /// 
      /// @param int UserID
      /// @param int GroupID
      /// @param int pageIndex
      /// @param int pageSize
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      List<Friend> mutualFriendsInGroup(int userId, int groupId, short pageIndex, short pageSize, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_mutualFriendsInGroup(AsyncCallback callback, object state, int userId, int groupId, short pageIndex, short pageSize, Session session);
      List<Friend> End_mutualFriendsInGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Calls SQL function FNGETFRIENDSHIPSTATUS and returns the
      /// friendship status(notFriend(0), requestReceived(1), requestSent(2), friends(3)) between two users
      /// 
      /// @param int userId
      /// @param int friendId
      /// @return int
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="session"></param>
      int getFriendShipStatus(int userId, int friendId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getFriendShipStatus(AsyncCallback callback, object state, int userId, int friendId, Session session);
      int End_getFriendShipStatus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of friends with descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow) of given userId
      /// 
      /// @param int userId
      /// @param int pageIndex (start of pagination eg 1 returns rows from 11, 2 returns rows from 21 )
      /// @param int pageSize (size of rows to get)
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      List<Friend> getFriendList(int userId, short pageIndex, short pageSize, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session);
      List<Friend> End_getFriendList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of pending Request friends with descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow) of given userId
      /// 
      /// @param int userId
      /// @param int pageIndex (start of pagination eg 1 returns rows from 11, 2 returns rows from 21 )
      /// @param int pageSize (size of rows to get)
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      List<Friend> getPendingFriendList(int userId, short pageIndex, short pageSize, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getPendingFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session);
      List<Friend> End_getPendingFriendList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of Friends to whom user had sent the request but not approved
      /// provides all the descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow)
      /// 
      /// @param int userId
      /// @param int pageIndex
      /// @param int pageSize
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      List<Friend> getRequestToFriendList(int userId, short pageIndex, short pageSize, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getRequestToFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session);
      List<Friend> End_getRequestToFriendList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// This method creates a category with given name and description
      /// and optionally inserts any list of friends (if passed) in the
      /// new category
      /// 
      /// @param UserCategory UserID, Name, Description
      /// @param Friend       IDs seperated by ','
      /// @return (1) UserCategoryTypeID if success (2) -1 if failure
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      UserCategory createNewCategory(UserCategory userCategory, string friendIDs, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_createNewCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session);
      UserCategory End_createNewCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Removes the list of friends passed for the provided category
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @param Friend       IDs seperated by ','
      /// @return (1) UserCategoryTypeID if success (2) -1 if failure
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      DbStatus removeFromCategory(UserCategory userCategory, string friendIDs, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_removeFromCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session);
      DbStatus End_removeFromCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Flushes all existing friends from provided category and
      /// adds only those provided in the list of friends
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @param Friend       IDs seperated by ','
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      DbStatus updateListInCategory(UserCategory userCategory, string friendIDs, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updateListInCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session);
      DbStatus End_updateListInCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts the provided list of friends in the provided category without
      /// affecting existing friends in the category
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @param Friend       IDs seperated by ','
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      DbStatus insertInCategory(UserCategory userCategory, string friendIDs, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_insertInCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session);
      DbStatus End_insertInCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Deletes the provided category and removes all friends inside it
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="session"></param>
      DbStatus deleteCategory(UserCategory userCategory, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteCategory(AsyncCallback callback, object state, UserCategory userCategory, Session session);
      DbStatus End_deleteCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Delete multiple categories at a time
      /// also deletes the members in each category
      /// @param int userId
      /// @param list<int> categoryIds
      /// @param Session sessionObj
      /// @return int
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="session"></param>
      DbStatus deleteMultipleCategories(int userId, List<int> categoryIds, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteMultipleCategories(AsyncCallback callback, object state, int userId, List<int> categoryIds, Session session);
      DbStatus End_deleteMultipleCategories(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates existing category's meta data only (Name, Description, etc.)
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID, Name , Description
      /// @param Friend       IDs seperated by ','
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="session"></param>
      DbStatus editCategoryMeta(UserCategory userCategory, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_editCategoryMeta(AsyncCallback callback, object state, UserCategory userCategory, Session session);
      DbStatus End_editCategoryMeta(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the lists of categories for given user along with descriptions
      /// 
      /// @param int userId
      /// @return UserCategory (categoryId, name , description, isSystemDefault, contactCount)
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<UserCategory> categoryList(int userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_categoryList(AsyncCallback callback, object state, int userId, Session session);
      List<UserCategory> End_categoryList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of friends that has been accepted by both
      /// @param int userId
      /// @param String deviceId
      /// @param Session sessionObj
      /// @return list<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="deviceId"></param>
      /// <param name="cTag"></param>
      /// <param name="session"></param>
      FriendList getFriendsListForMobile(int userId, string deviceId, string cTag, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getFriendsListForMobile(AsyncCallback callback, object state, int userId, string deviceId, string cTag, Session session);
      FriendList End_getFriendsListForMobile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of pending Request friends that has not been accepted by self
      /// With descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow)
      /// @param int userId
      /// @param String deviceId
      /// @param Session sessionObj
      /// @return list<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="deviceId"></param>
      /// <param name="session"></param>
      List<Friend> getPendingFriendsForMobile(int userId, string deviceId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getPendingFriendsForMobile(AsyncCallback callback, object state, int userId, string deviceId, Session session);
      List<Friend> End_getPendingFriendsForMobile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of Friends to whom user had sent the request but has not been approved yet.
      /// With descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow)
      /// @param int userId
      /// @param String deviceId
      /// @param Session sessionObj
      /// @return list<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="deviceId"></param>
      /// <param name="session"></param>
      List<Friend> getRequestedToFriendsForMobile(int userId, string deviceId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getRequestedToFriendsForMobile(AsyncCallback callback, object state, int userId, string deviceId, Session session);
      List<Friend> End_getRequestedToFriendsForMobile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// * This method provides user with profile information of the requested target user with description.
      /// * @param int userId Id of logged in user
      /// * @param int targetId Id of target user
      /// * @param Session sessionObj
      /// * @return Friend
      /// * @throws UserException (See Error Code list for details)
      /// * @throws SessionException (See Error Code list for details)
      ///    * 1. firstName in UserInfoPerson<br>
      ///    * 2. LastName in UserInfoPerson<br>
      ///    * 3. picture in UserInfo<br>
      ///    * 4. email in UserLogin<br>
      ///    * 5. primaryContactNumber in UserLogin<br>
      ///    * 6. availableStatus in UserLogin<br>
      ///    * 7. friendShipStatus in Friend<br>
      ///    * 8. userTypeId in UserInfo<br>
      ///    * 9. title in  UserInfoPerson<br>
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="targetId"></param>
      /// <param name="username"></param>
      /// <param name="session"></param>
      Friend getProfile(int userId, int targetId, string username, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getProfile(AsyncCallback callback, object state, int userId, int targetId, string username, Session session);
      Friend End_getProfile(IAsyncResult asyncResult);
      #endif
      DbStatus updatePassword(string oldPassword, string newPassword, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updatePassword(AsyncCallback callback, object state, string oldPassword, string newPassword, Session session);
      DbStatus End_updatePassword(IAsyncResult asyncResult);
      #endif
      UserMobileContacts contactSync(UserMobileContacts userMobileContacts, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_contactSync(AsyncCallback callback, object state, UserMobileContacts userMobileContacts, Session session);
      UserMobileContacts End_contactSync(IAsyncResult asyncResult);
      #endif
      NotificationMobList getAllNotifications(NotificationMob notificationMob, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getAllNotifications(AsyncCallback callback, object state, NotificationMob notificationMob, Session session);
      NotificationMobList End_getAllNotifications(IAsyncResult asyncResult);
      #endif
      BasicSearchList basicSearch(BasicSearch basicSearch, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_basicSearch(AsyncCallback callback, object state, BasicSearch basicSearch, Session session);
      BasicSearchList End_basicSearch(IAsyncResult asyncResult);
      #endif
      User getUserLoginInfo(string userNameEmail);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserLoginInfo(AsyncCallback callback, object state, string userNameEmail);
      User End_getUserLoginInfo(IAsyncResult asyncResult);
      #endif
      User getUserLoginInfoWithSession(string userNameEmail, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserLoginInfoWithSession(AsyncCallback callback, object state, string userNameEmail, Session session);
      User End_getUserLoginInfoWithSession(IAsyncResult asyncResult);
      #endif
      User getMyProfile(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_getMyProfile(AsyncCallback callback, object state, string username);
      User End_getMyProfile(IAsyncResult asyncResult);
      #endif
      bool saveUserProfilePic(string username, string fileId);
      #if SILVERLIGHT
      IAsyncResult Begin_saveUserProfilePic(AsyncCallback callback, object state, string username, string fileId);
      bool End_saveUserProfilePic(IAsyncResult asyncResult);
      #endif
      User verifyUser(string usernameEmail);
      #if SILVERLIGHT
      IAsyncResult Begin_verifyUser(AsyncCallback callback, object state, string usernameEmail);
      User End_verifyUser(IAsyncResult asyncResult);
      #endif
      string forgotPasswordCode(User user);
      #if SILVERLIGHT
      IAsyncResult Begin_forgotPasswordCode(AsyncCallback callback, object state, User user);
      string End_forgotPasswordCode(IAsyncResult asyncResult);
      #endif
      DbStatus resetPassword(string code, string password);
      #if SILVERLIGHT
      IAsyncResult Begin_resetPassword(AsyncCallback callback, object state, string code, string password);
      DbStatus End_resetPassword(IAsyncResult asyncResult);
      #endif
      List<UserContactDetails> getUserContactDetails(int userId, string targetUserNameId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserContactDetails(AsyncCallback callback, object state, int userId, string targetUserNameId, Session session);
      List<UserContactDetails> End_getUserContactDetails(IAsyncResult asyncResult);
      #endif
      DbStatus setBasicContactPersion(UserInfoPerson userinfo, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_setBasicContactPersion(AsyncCallback callback, object state, UserInfoPerson userinfo, Session session);
      DbStatus End_setBasicContactPersion(IAsyncResult asyncResult);
      #endif
      DbStatus setBusinessBaiscDetail(BusinessBasicDetails details, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_setBusinessBaiscDetail(AsyncCallback callback, object state, BusinessBasicDetails details, Session session);
      DbStatus End_setBusinessBaiscDetail(IAsyncResult asyncResult);
      #endif
      DbStatus setCompanyReview(CompanyReview review, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_setCompanyReview(AsyncCallback callback, object state, CompanyReview review, Session session);
      DbStatus End_setCompanyReview(IAsyncResult asyncResult);
      #endif
      DbStatus setEmployeWorkSchedule(EmployeeWorkSchedule schedule, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_setEmployeWorkSchedule(AsyncCallback callback, object state, EmployeeWorkSchedule schedule, Session session);
      DbStatus End_setEmployeWorkSchedule(IAsyncResult asyncResult);
      #endif
      DepartmentResponse upsertDepartment(Department department, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertDepartment(AsyncCallback callback, object state, Department department, Session session);
      DepartmentResponse End_upsertDepartment(IAsyncResult asyncResult);
      #endif
      DbStatus upsertDepartmentEmployees(DepartmentEmployees departmentEmployees, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertDepartmentEmployees(AsyncCallback callback, object state, DepartmentEmployees departmentEmployees, Session session);
      DbStatus End_upsertDepartmentEmployees(IAsyncResult asyncResult);
      #endif
      UserContactDetailsResponse upsertContacts(UserContactDetails userContactDetails, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertContacts(AsyncCallback callback, object state, UserContactDetails userContactDetails, Session session);
      UserContactDetailsResponse End_upsertContacts(IAsyncResult asyncResult);
      #endif
      SuggestContactResponse upsertSuggestContacts(int targetId, UserContactDetails userContactDetails, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertSuggestContacts(AsyncCallback callback, object state, int targetId, UserContactDetails userContactDetails, Session session);
      SuggestContactResponse End_upsertSuggestContacts(IAsyncResult asyncResult);
      #endif
      List<CompanyEmployeeInfo> viewCompanyEmployee(string user, string searchTerm, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_viewCompanyEmployee(AsyncCallback callback, object state, string user, string searchTerm, Session session);
      List<CompanyEmployeeInfo> End_viewCompanyEmployee(IAsyncResult asyncResult);
      #endif
      List<ContactSuggestions> getContactSuggestions(Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getContactSuggestions(AsyncCallback callback, object state, Session session);
      List<ContactSuggestions> End_getContactSuggestions(IAsyncResult asyncResult);
      #endif
      DbStatus respondContactSuggestion(long contactCustomId, short mode, Session sesion);
      #if SILVERLIGHT
      IAsyncResult Begin_respondContactSuggestion(AsyncCallback callback, object state, long contactCustomId, short mode, Session sesion);
      DbStatus End_respondContactSuggestion(IAsyncResult asyncResult);
      #endif
      NotificationMobList getNotificationRequestCount(string nRTypeIds, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getNotificationRequestCount(AsyncCallback callback, object state, string nRTypeIds, Session session);
      NotificationMobList End_getNotificationRequestCount(IAsyncResult asyncResult);
      #endif
      Employment upsertEmployeementHistory(Employment employement, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertEmployeementHistory(AsyncCallback callback, object state, Employment employement, Session session);
      Employment End_upsertEmployeementHistory(IAsyncResult asyncResult);
      #endif
      UserInfo getUserInfo(string userNameId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserInfo(AsyncCallback callback, object state, string userNameId, Session session);
      UserInfo End_getUserInfo(IAsyncResult asyncResult);
      #endif
      List<UserInfo> getUsersInfo(string users, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUsersInfo(AsyncCallback callback, object state, string users, Session session);
      List<UserInfo> End_getUsersInfo(IAsyncResult asyncResult);
      #endif
      List<CompanyTreeResponse> getCompanyTree(CompanyTree companyTree, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompanyTree(AsyncCallback callback, object state, CompanyTree companyTree, Session session);
      List<CompanyTreeResponse> End_getCompanyTree(IAsyncResult asyncResult);
      #endif
      List<Language> getUserLanguages(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserLanguages(AsyncCallback callback, object state, string userId, Session session);
      List<Language> End_getUserLanguages(IAsyncResult asyncResult);
      #endif
      DbStatus upsertLanguage(string userIdOrName, string text, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertLanguage(AsyncCallback callback, object state, string userIdOrName, string text, Session session);
      DbStatus End_upsertLanguage(IAsyncResult asyncResult);
      #endif
      List<AwardAndHonor> getUserAwards(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserAwards(AsyncCallback callback, object state, string userId, Session session);
      List<AwardAndHonor> End_getUserAwards(IAsyncResult asyncResult);
      #endif
      AwardAndHonorResponse upsertAwardAndHonor(AwardAndHonor awardAndHonor, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertAwardAndHonor(AsyncCallback callback, object state, AwardAndHonor awardAndHonor, Session session);
      AwardAndHonorResponse End_upsertAwardAndHonor(IAsyncResult asyncResult);
      #endif
      List<UserAcademics> getUserAcademics(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserAcademics(AsyncCallback callback, object state, string userId, Session session);
      List<UserAcademics> End_getUserAcademics(IAsyncResult asyncResult);
      #endif
      List<CompanyEmployeeInfo> viewEmploymentHistoryPerson(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_viewEmploymentHistoryPerson(AsyncCallback callback, object state, string userId, Session session);
      List<CompanyEmployeeInfo> End_viewEmploymentHistoryPerson(IAsyncResult asyncResult);
      #endif
      List<EmployeeRatingResponse> getEmployeeRatings(EmployeeRatings employeeRatings, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getEmployeeRatings(AsyncCallback callback, object state, EmployeeRatings employeeRatings, Session session);
      List<EmployeeRatingResponse> End_getEmployeeRatings(IAsyncResult asyncResult);
      #endif
      CompanyEmployeeInfoList getEmployees(Employees employees, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getEmployees(AsyncCallback callback, object state, Employees employees, Session session);
      CompanyEmployeeInfoList End_getEmployees(IAsyncResult asyncResult);
      #endif
      CompanyReviewList getCompanyReviews(CompanyReview companyReview, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompanyReviews(AsyncCallback callback, object state, CompanyReview companyReview, Session session);
      CompanyReviewList End_getCompanyReviews(IAsyncResult asyncResult);
      #endif
      SkillResponse upsertThumbsForSkill(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertThumbsForSkill(AsyncCallback callback, object state, Skill skill, Session session);
      SkillResponse End_upsertThumbsForSkill(IAsyncResult asyncResult);
      #endif
      SkillResponse thumbsForSkillDetails(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_thumbsForSkillDetails(AsyncCallback callback, object state, Skill skill, Session session);
      SkillResponse End_thumbsForSkillDetails(IAsyncResult asyncResult);
      #endif
      DbStatus acceptSkill(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_acceptSkill(AsyncCallback callback, object state, Skill skill, Session session);
      DbStatus End_acceptSkill(IAsyncResult asyncResult);
      #endif
      DbStatus upsertSkill(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertSkill(AsyncCallback callback, object state, Skill skill, Session session);
      DbStatus End_upsertSkill(IAsyncResult asyncResult);
      #endif
      SkillResponse getSkillSummary(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getSkillSummary(AsyncCallback callback, object state, Skill skill, Session session);
      SkillResponse End_getSkillSummary(IAsyncResult asyncResult);
      #endif
      SkillResponse getUserSkills(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserSkills(AsyncCallback callback, object state, Skill skill, Session session);
      SkillResponse End_getUserSkills(IAsyncResult asyncResult);
      #endif
      DbStatus upsertEmployeeRating(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertEmployeeRating(AsyncCallback callback, object state, Skill skill, Session session);
      DbStatus End_upsertEmployeeRating(IAsyncResult asyncResult);
      #endif
      UserAcademicResponse upsertAcademic(UserAcademics userAcademic, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertAcademic(AsyncCallback callback, object state, UserAcademics userAcademic, Session session);
      UserAcademicResponse End_upsertAcademic(IAsyncResult asyncResult);
      #endif
      List<GetDataResponse> getData(GetDataParam getDataParam, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getData(AsyncCallback callback, object state, GetDataParam getDataParam, Session session);
      List<GetDataResponse> End_getData(IAsyncResult asyncResult);
      #endif
      List<Department> getCompanyDepartment(string companyId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompanyDepartment(AsyncCallback callback, object state, string companyId, Session session);
      List<Department> End_getCompanyDepartment(IAsyncResult asyncResult);
      #endif
      List<Department> getCompanyDepartmentEmployees(string user, string companyId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompanyDepartmentEmployees(AsyncCallback callback, object state, string user, string companyId, Session session);
      List<Department> End_getCompanyDepartmentEmployees(IAsyncResult asyncResult);
      #endif
      EmployeeList getResignationRequest(Employees employee, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getResignationRequest(AsyncCallback callback, object state, Employees employee, Session session);
      EmployeeList End_getResignationRequest(IAsyncResult asyncResult);
      #endif
      DbStatus suggestSkills(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_suggestSkills(AsyncCallback callback, object state, Skill skill, Session session);
      DbStatus End_suggestSkills(IAsyncResult asyncResult);
      #endif
      SkillResponse getUnApprovedSkillSuggestions(Skill skill, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUnApprovedSkillSuggestions(AsyncCallback callback, object state, Skill skill, Session session);
      SkillResponse End_getUnApprovedSkillSuggestions(IAsyncResult asyncResult);
      #endif
      List<EmployeeWorkSchedule> getEmployeeWorkSchedule(long personEmploymentId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getEmployeeWorkSchedule(AsyncCallback callback, object state, long personEmploymentId, Session session);
      List<EmployeeWorkSchedule> End_getEmployeeWorkSchedule(IAsyncResult asyncResult);
      #endif
      CompanyEmployeeInfoList upsertCompanyEmployee(CompanyEmployeeInfo companyEmpInfo, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertCompanyEmployee(AsyncCallback callback, object state, CompanyEmployeeInfo companyEmpInfo, Session session);
      CompanyEmployeeInfoList End_upsertCompanyEmployee(IAsyncResult asyncResult);
      #endif
      List<CompanyEmployeeInfo> getCompanyEmployee(int userId, string employee, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompanyEmployee(AsyncCallback callback, object state, int userId, string employee, Session session);
      List<CompanyEmployeeInfo> End_getCompanyEmployee(IAsyncResult asyncResult);
      #endif
      List<City> getCity(int cityId, string searchText, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getCity(AsyncCallback callback, object state, int cityId, string searchText, Session session);
      List<City> End_getCity(IAsyncResult asyncResult);
      #endif
      UserInfo getUserAbout(string username, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserAbout(AsyncCallback callback, object state, string username, Session session);
      UserInfo End_getUserAbout(IAsyncResult asyncResult);
      #endif
      DbStatus updateUserAbout(string userIdorName, string headline, string about, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updateUserAbout(AsyncCallback callback, object state, string userIdorName, string headline, string about, Session session);
      DbStatus End_updateUserAbout(IAsyncResult asyncResult);
      #endif
      EmploymentRequestResponse respondEmpoymentRequest(EmploymentRequest employmentRequest, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_respondEmpoymentRequest(AsyncCallback callback, object state, EmploymentRequest employmentRequest, Session session);
      EmploymentRequestResponse End_respondEmpoymentRequest(IAsyncResult asyncResult);
      #endif
      ProfileViewResponse profileViewDetail(ProfileView profileView, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_profileViewDetail(AsyncCallback callback, object state, ProfileView profileView, Session session);
      ProfileViewResponse End_profileViewDetail(IAsyncResult asyncResult);
      #endif
      ProfileViewResponse profileViewPanel(ProfileView profileView, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_profileViewPanel(AsyncCallback callback, object state, ProfileView profileView, Session session);
      ProfileViewResponse End_profileViewPanel(IAsyncResult asyncResult);
      #endif
      ProfileViewResponse profileViewSummary(ProfileView profileView, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_profileViewSummary(AsyncCallback callback, object state, ProfileView profileView, Session session);
      ProfileViewResponse End_profileViewSummary(IAsyncResult asyncResult);
      #endif
      MutualFriendResponse getMutualFriends(MutualFriend mf, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getMutualFriends(AsyncCallback callback, object state, MutualFriend mf, Session session);
      MutualFriendResponse End_getMutualFriends(IAsyncResult asyncResult);
      #endif
      UserInfo getUserAvailability(string userIdOrName, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserAvailability(AsyncCallback callback, object state, string userIdOrName, Session session);
      UserInfo End_getUserAvailability(IAsyncResult asyncResult);
      #endif
      DbStatus setStatus(Status status, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_setStatus(AsyncCallback callback, object state, Status status, Session session);
      DbStatus End_setStatus(IAsyncResult asyncResult);
      #endif
      DbStatus activateUser(string targetUser, string guid);
      #if SILVERLIGHT
      IAsyncResult Begin_activateUser(AsyncCallback callback, object state, string targetUser, string guid);
      DbStatus End_activateUser(IAsyncResult asyncResult);
      #endif
      DbStatus signalView(string viewer, string targetUser, int groupId, int viewType, int typeId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_signalView(AsyncCallback callback, object state, string viewer, string targetUser, int groupId, int viewType, int typeId, Session session);
      DbStatus End_signalView(IAsyncResult asyncResult);
      #endif
      WebOnlyFriendResponse getWebOnlyFriends(WebOnlyFriend webOnlyFriend, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getWebOnlyFriends(AsyncCallback callback, object state, WebOnlyFriend webOnlyFriend, Session session);
      WebOnlyFriendResponse End_getWebOnlyFriends(IAsyncResult asyncResult);
      #endif
      List<UserInfo> getUserFriendsInCategory(UserCategory userCatagory, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserFriendsInCategory(AsyncCallback callback, object state, UserCategory userCatagory, Session session);
      List<UserInfo> End_getUserFriendsInCategory(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// * @author Dipak Malla
    /// *         UserService Class
    /// *         All user related service are located over here
    ///    Date: 7/24/14
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Auth(AsyncCallback callback, object state, User user)
      {
        return send_Auth(callback, state, user);
      }

      public User End_Auth(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Auth();
      }

      #endif

      /// <summary>
      /// Method for authentication i.e
      /// takes userName and password and checks for authentication
      /// @param User userObj
      /// @return User
      /// @throws UserException
      /// </summary>
      /// <param name="user"></param>
      public User Auth(User user)
      {
        #if !SILVERLIGHT
        send_Auth(user);
        return recv_Auth();

        #else
        var asyncResult = Begin_Auth(null, null, user);
        return End_Auth(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Auth(AsyncCallback callback, object state, User user)
      #else
      public void send_Auth(User user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Auth", TMessageType.Call, seqid_));
        Auth_args args = new Auth_args();
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_Auth()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Auth_result result = new Auth_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Auth failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RegisterUser(AsyncCallback callback, object state, User user)
      {
        return send_RegisterUser(callback, state, user);
      }

      public User End_RegisterUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterUser();
      }

      #endif

      /// <summary>
      /// calls stored procedure "PROC_USERLOGIN_CREATEPERSON"
      /// method for inserting user information into multiple table during registration
      /// @param User userObj
      /// Country country
      /// UserInfoPerson userInfoPerson
      /// @return User
      /// @throws UserException
      /// </summary>
      /// <param name="user"></param>
      public User RegisterUser(User user)
      {
        #if !SILVERLIGHT
        send_RegisterUser(user);
        return recv_RegisterUser();

        #else
        var asyncResult = Begin_RegisterUser(null, null, user);
        return End_RegisterUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterUser(AsyncCallback callback, object state, User user)
      #else
      public void send_RegisterUser(User user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterUser", TMessageType.Call, seqid_));
        RegisterUser_args args = new RegisterUser_args();
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_RegisterUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterUser_result result = new RegisterUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RegisterBusinessUser(AsyncCallback callback, object state, User user)
      {
        return send_RegisterBusinessUser(callback, state, user);
      }

      public User End_RegisterBusinessUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterBusinessUser();
      }

      #endif

      /// <summary>
      /// calls stored procedure "PROC_USERLOGIN_CREATECOMPANY"
      /// method for inserting user information into multiple table during registration
      /// @param User userObj
      /// Country country
      /// UserInfoCompany userInfoCompany
      /// @return User
      /// @throws UserException
      /// </summary>
      /// <param name="user"></param>
      public User RegisterBusinessUser(User user)
      {
        #if !SILVERLIGHT
        send_RegisterBusinessUser(user);
        return recv_RegisterBusinessUser();

        #else
        var asyncResult = Begin_RegisterBusinessUser(null, null, user);
        return End_RegisterBusinessUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterBusinessUser(AsyncCallback callback, object state, User user)
      #else
      public void send_RegisterBusinessUser(User user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterBusinessUser", TMessageType.Call, seqid_));
        RegisterBusinessUser_args args = new RegisterBusinessUser_args();
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_RegisterBusinessUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterBusinessUser_result result = new RegisterBusinessUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterBusinessUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Kill(AsyncCallback callback, object state, User user)
      {
        return send_Kill(callback, state, user);
      }

      public bool End_Kill(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Kill();
      }

      #endif

      /// <summary>
      /// @param User user
      ///    Takes User object as parameter. Note that session object of User instance should be filled.
      ///    Session object must contain field like user id, token and device id. Auto Reply can be set true if session
      ///    should be removed from persistance.
      /// @return Boolean
      ///         Takes User object and returns true if session was killed or false
      ///         This method is used to kill the session
      /// @throws UserException (See Error Code list for details)
      /// </summary>
      /// <param name="user"></param>
      public bool Kill(User user)
      {
        #if !SILVERLIGHT
        send_Kill(user);
        return recv_Kill();

        #else
        var asyncResult = Begin_Kill(null, null, user);
        return End_Kill(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Kill(AsyncCallback callback, object state, User user)
      #else
      public void send_Kill(User user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Kill", TMessageType.Call, seqid_));
        Kill_args args = new Kill_args();
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Kill()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Kill_result result = new Kill_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Kill failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendResponse(AsyncCallback callback, object state, string userId, string friendId, int categoryId, bool accepted, Session session, string friendUsername)
      {
        return send_FriendResponse(callback, state, userId, friendId, categoryId, accepted, session, friendUsername);
      }

      public Friend End_FriendResponse(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendResponse();
      }

      #endif

      /// <summary>
      /// @param int userId, int friendId, int categoryId, Boolean accepted, Session session
      /// @return Friend
      ///         This method is used to respond to the friend request.
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="categoryId"></param>
      /// <param name="accepted"></param>
      /// <param name="session"></param>
      /// <param name="friendUsername"></param>
      public Friend FriendResponse(string userId, string friendId, int categoryId, bool accepted, Session session, string friendUsername)
      {
        #if !SILVERLIGHT
        send_FriendResponse(userId, friendId, categoryId, accepted, session, friendUsername);
        return recv_FriendResponse();

        #else
        var asyncResult = Begin_FriendResponse(null, null, userId, friendId, categoryId, accepted, session, friendUsername);
        return End_FriendResponse(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendResponse(AsyncCallback callback, object state, string userId, string friendId, int categoryId, bool accepted, Session session, string friendUsername)
      #else
      public void send_FriendResponse(string userId, string friendId, int categoryId, bool accepted, Session session, string friendUsername)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendResponse", TMessageType.Call, seqid_));
        FriendResponse_args args = new FriendResponse_args();
        args.UserId = userId;
        args.FriendId = friendId;
        args.CategoryId = categoryId;
        args.Accepted = accepted;
        args.Session = session;
        args.FriendUsername = friendUsername;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Friend recv_FriendResponse()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendResponse_result result = new FriendResponse_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendResponse failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendRequest(AsyncCallback callback, object state, string userId, string friendId, int categoryId, Session session, string friendUsername)
      {
        return send_FriendRequest(callback, state, userId, friendId, categoryId, session, friendUsername);
      }

      public DbStatus End_FriendRequest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendRequest();
      }

      #endif

      /// <summary>
      /// @param int userId, int friendId, int categoryId,  Session session
      /// @return Friend
      ///         This method is used to send friend request
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="categoryId"></param>
      /// <param name="session"></param>
      /// <param name="friendUsername"></param>
      public DbStatus FriendRequest(string userId, string friendId, int categoryId, Session session, string friendUsername)
      {
        #if !SILVERLIGHT
        send_FriendRequest(userId, friendId, categoryId, session, friendUsername);
        return recv_FriendRequest();

        #else
        var asyncResult = Begin_FriendRequest(null, null, userId, friendId, categoryId, session, friendUsername);
        return End_FriendRequest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendRequest(AsyncCallback callback, object state, string userId, string friendId, int categoryId, Session session, string friendUsername)
      #else
      public void send_FriendRequest(string userId, string friendId, int categoryId, Session session, string friendUsername)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendRequest", TMessageType.Call, seqid_));
        FriendRequest_args args = new FriendRequest_args();
        args.UserId = userId;
        args.FriendId = friendId;
        args.CategoryId = categoryId;
        args.Session = session;
        args.FriendUsername = friendUsername;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_FriendRequest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendRequest_result result = new FriendRequest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendRequest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnFriend(AsyncCallback callback, object state, string userId, string friendId, Session session, string friendUsername)
      {
        return send_UnFriend(callback, state, userId, friendId, session, friendUsername);
      }

      public Friend End_UnFriend(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnFriend();
      }

      #endif

      /// <summary>
      /// @param int userId, int friendId,  Session session
      ///         This method is used to do unfriend
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="session"></param>
      /// <param name="friendUsername"></param>
      public Friend UnFriend(string userId, string friendId, Session session, string friendUsername)
      {
        #if !SILVERLIGHT
        send_UnFriend(userId, friendId, session, friendUsername);
        return recv_UnFriend();

        #else
        var asyncResult = Begin_UnFriend(null, null, userId, friendId, session, friendUsername);
        return End_UnFriend(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnFriend(AsyncCallback callback, object state, string userId, string friendId, Session session, string friendUsername)
      #else
      public void send_UnFriend(string userId, string friendId, Session session, string friendUsername)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnFriend", TMessageType.Call, seqid_));
        UnFriend_args args = new UnFriend_args();
        args.UserId = userId;
        args.FriendId = friendId;
        args.Session = session;
        args.FriendUsername = friendUsername;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Friend recv_UnFriend()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnFriend_result result = new UnFriend_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnFriend failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutualFriends(AsyncCallback callback, object state, int userId, int friendId, short pageIndex, short pageSize, Session session)
      {
        return send_mutualFriends(callback, state, userId, friendId, pageIndex, pageSize, session);
      }

      public List<Friend> End_mutualFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_mutualFriends();
      }

      #endif

      /// <summary>
      /// Calls storedProcedure 'SP_MUTUAL_FRIENDS' and gets the list of
      /// mutual friends with descriptions( userId, firstName, lastName, picture, userTypeId)
      /// 
      /// @param int UserID
      /// @param int FriendID
      /// @param int pageIndex
      /// @param int pageSize
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      public List<Friend> mutualFriends(int userId, int friendId, short pageIndex, short pageSize, Session session)
      {
        #if !SILVERLIGHT
        send_mutualFriends(userId, friendId, pageIndex, pageSize, session);
        return recv_mutualFriends();

        #else
        var asyncResult = Begin_mutualFriends(null, null, userId, friendId, pageIndex, pageSize, session);
        return End_mutualFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutualFriends(AsyncCallback callback, object state, int userId, int friendId, short pageIndex, short pageSize, Session session)
      #else
      public void send_mutualFriends(int userId, int friendId, short pageIndex, short pageSize, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutualFriends", TMessageType.Call, seqid_));
        mutualFriends_args args = new mutualFriends_args();
        args.UserId = userId;
        args.FriendId = friendId;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Friend> recv_mutualFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutualFriends_result result = new mutualFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mutualFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutualFriendsInGroup(AsyncCallback callback, object state, int userId, int groupId, short pageIndex, short pageSize, Session session)
      {
        return send_mutualFriendsInGroup(callback, state, userId, groupId, pageIndex, pageSize, session);
      }

      public List<Friend> End_mutualFriendsInGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_mutualFriendsInGroup();
      }

      #endif

      /// <summary>
      /// Calls storedProcedure 'SP_MUTUAL_FRIENDS' and gets the list of
      /// mutual friends in a group with  descriptions( userId, firstName, lastName, picture, userTypeId)
      /// 
      /// @param int UserID
      /// @param int GroupID
      /// @param int pageIndex
      /// @param int pageSize
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      public List<Friend> mutualFriendsInGroup(int userId, int groupId, short pageIndex, short pageSize, Session session)
      {
        #if !SILVERLIGHT
        send_mutualFriendsInGroup(userId, groupId, pageIndex, pageSize, session);
        return recv_mutualFriendsInGroup();

        #else
        var asyncResult = Begin_mutualFriendsInGroup(null, null, userId, groupId, pageIndex, pageSize, session);
        return End_mutualFriendsInGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutualFriendsInGroup(AsyncCallback callback, object state, int userId, int groupId, short pageIndex, short pageSize, Session session)
      #else
      public void send_mutualFriendsInGroup(int userId, int groupId, short pageIndex, short pageSize, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutualFriendsInGroup", TMessageType.Call, seqid_));
        mutualFriendsInGroup_args args = new mutualFriendsInGroup_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Friend> recv_mutualFriendsInGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutualFriendsInGroup_result result = new mutualFriendsInGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mutualFriendsInGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFriendShipStatus(AsyncCallback callback, object state, int userId, int friendId, Session session)
      {
        return send_getFriendShipStatus(callback, state, userId, friendId, session);
      }

      public int End_getFriendShipStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFriendShipStatus();
      }

      #endif

      /// <summary>
      /// Calls SQL function FNGETFRIENDSHIPSTATUS and returns the
      /// friendship status(notFriend(0), requestReceived(1), requestSent(2), friends(3)) between two users
      /// 
      /// @param int userId
      /// @param int friendId
      /// @return int
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="friendId"></param>
      /// <param name="session"></param>
      public int getFriendShipStatus(int userId, int friendId, Session session)
      {
        #if !SILVERLIGHT
        send_getFriendShipStatus(userId, friendId, session);
        return recv_getFriendShipStatus();

        #else
        var asyncResult = Begin_getFriendShipStatus(null, null, userId, friendId, session);
        return End_getFriendShipStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFriendShipStatus(AsyncCallback callback, object state, int userId, int friendId, Session session)
      #else
      public void send_getFriendShipStatus(int userId, int friendId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFriendShipStatus", TMessageType.Call, seqid_));
        getFriendShipStatus_args args = new getFriendShipStatus_args();
        args.UserId = userId;
        args.FriendId = friendId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getFriendShipStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFriendShipStatus_result result = new getFriendShipStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendShipStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session)
      {
        return send_getFriendList(callback, state, userId, pageIndex, pageSize, session);
      }

      public List<Friend> End_getFriendList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFriendList();
      }

      #endif

      /// <summary>
      /// Gets the list of friends with descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow) of given userId
      /// 
      /// @param int userId
      /// @param int pageIndex (start of pagination eg 1 returns rows from 11, 2 returns rows from 21 )
      /// @param int pageSize (size of rows to get)
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      public List<Friend> getFriendList(int userId, short pageIndex, short pageSize, Session session)
      {
        #if !SILVERLIGHT
        send_getFriendList(userId, pageIndex, pageSize, session);
        return recv_getFriendList();

        #else
        var asyncResult = Begin_getFriendList(null, null, userId, pageIndex, pageSize, session);
        return End_getFriendList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session)
      #else
      public void send_getFriendList(int userId, short pageIndex, short pageSize, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFriendList", TMessageType.Call, seqid_));
        getFriendList_args args = new getFriendList_args();
        args.UserId = userId;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Friend> recv_getFriendList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFriendList_result result = new getFriendList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPendingFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session)
      {
        return send_getPendingFriendList(callback, state, userId, pageIndex, pageSize, session);
      }

      public List<Friend> End_getPendingFriendList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPendingFriendList();
      }

      #endif

      /// <summary>
      /// Gets the list of pending Request friends with descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow) of given userId
      /// 
      /// @param int userId
      /// @param int pageIndex (start of pagination eg 1 returns rows from 11, 2 returns rows from 21 )
      /// @param int pageSize (size of rows to get)
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      public List<Friend> getPendingFriendList(int userId, short pageIndex, short pageSize, Session session)
      {
        #if !SILVERLIGHT
        send_getPendingFriendList(userId, pageIndex, pageSize, session);
        return recv_getPendingFriendList();

        #else
        var asyncResult = Begin_getPendingFriendList(null, null, userId, pageIndex, pageSize, session);
        return End_getPendingFriendList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPendingFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session)
      #else
      public void send_getPendingFriendList(int userId, short pageIndex, short pageSize, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPendingFriendList", TMessageType.Call, seqid_));
        getPendingFriendList_args args = new getPendingFriendList_args();
        args.UserId = userId;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Friend> recv_getPendingFriendList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPendingFriendList_result result = new getPendingFriendList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPendingFriendList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRequestToFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session)
      {
        return send_getRequestToFriendList(callback, state, userId, pageIndex, pageSize, session);
      }

      public List<Friend> End_getRequestToFriendList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRequestToFriendList();
      }

      #endif

      /// <summary>
      /// Gets the list of Friends to whom user had sent the request but not approved
      /// provides all the descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow)
      /// 
      /// @param int userId
      /// @param int pageIndex
      /// @param int pageSize
      /// @return List<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      /// <param name="session"></param>
      public List<Friend> getRequestToFriendList(int userId, short pageIndex, short pageSize, Session session)
      {
        #if !SILVERLIGHT
        send_getRequestToFriendList(userId, pageIndex, pageSize, session);
        return recv_getRequestToFriendList();

        #else
        var asyncResult = Begin_getRequestToFriendList(null, null, userId, pageIndex, pageSize, session);
        return End_getRequestToFriendList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRequestToFriendList(AsyncCallback callback, object state, int userId, short pageIndex, short pageSize, Session session)
      #else
      public void send_getRequestToFriendList(int userId, short pageIndex, short pageSize, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRequestToFriendList", TMessageType.Call, seqid_));
        getRequestToFriendList_args args = new getRequestToFriendList_args();
        args.UserId = userId;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Friend> recv_getRequestToFriendList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRequestToFriendList_result result = new getRequestToFriendList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRequestToFriendList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createNewCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      {
        return send_createNewCategory(callback, state, userCategory, friendIDs, session);
      }

      public UserCategory End_createNewCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createNewCategory();
      }

      #endif

      /// <summary>
      /// This method creates a category with given name and description
      /// and optionally inserts any list of friends (if passed) in the
      /// new category
      /// 
      /// @param UserCategory UserID, Name, Description
      /// @param Friend       IDs seperated by ','
      /// @return (1) UserCategoryTypeID if success (2) -1 if failure
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      public UserCategory createNewCategory(UserCategory userCategory, string friendIDs, Session session)
      {
        #if !SILVERLIGHT
        send_createNewCategory(userCategory, friendIDs, session);
        return recv_createNewCategory();

        #else
        var asyncResult = Begin_createNewCategory(null, null, userCategory, friendIDs, session);
        return End_createNewCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createNewCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      #else
      public void send_createNewCategory(UserCategory userCategory, string friendIDs, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createNewCategory", TMessageType.Call, seqid_));
        createNewCategory_args args = new createNewCategory_args();
        args.UserCategory = userCategory;
        args.FriendIDs = friendIDs;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserCategory recv_createNewCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createNewCategory_result result = new createNewCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNewCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeFromCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      {
        return send_removeFromCategory(callback, state, userCategory, friendIDs, session);
      }

      public DbStatus End_removeFromCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_removeFromCategory();
      }

      #endif

      /// <summary>
      /// Removes the list of friends passed for the provided category
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @param Friend       IDs seperated by ','
      /// @return (1) UserCategoryTypeID if success (2) -1 if failure
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      public DbStatus removeFromCategory(UserCategory userCategory, string friendIDs, Session session)
      {
        #if !SILVERLIGHT
        send_removeFromCategory(userCategory, friendIDs, session);
        return recv_removeFromCategory();

        #else
        var asyncResult = Begin_removeFromCategory(null, null, userCategory, friendIDs, session);
        return End_removeFromCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeFromCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      #else
      public void send_removeFromCategory(UserCategory userCategory, string friendIDs, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeFromCategory", TMessageType.Call, seqid_));
        removeFromCategory_args args = new removeFromCategory_args();
        args.UserCategory = userCategory;
        args.FriendIDs = friendIDs;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_removeFromCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeFromCategory_result result = new removeFromCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeFromCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateListInCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      {
        return send_updateListInCategory(callback, state, userCategory, friendIDs, session);
      }

      public DbStatus End_updateListInCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateListInCategory();
      }

      #endif

      /// <summary>
      /// Flushes all existing friends from provided category and
      /// adds only those provided in the list of friends
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @param Friend       IDs seperated by ','
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      public DbStatus updateListInCategory(UserCategory userCategory, string friendIDs, Session session)
      {
        #if !SILVERLIGHT
        send_updateListInCategory(userCategory, friendIDs, session);
        return recv_updateListInCategory();

        #else
        var asyncResult = Begin_updateListInCategory(null, null, userCategory, friendIDs, session);
        return End_updateListInCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateListInCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      #else
      public void send_updateListInCategory(UserCategory userCategory, string friendIDs, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateListInCategory", TMessageType.Call, seqid_));
        updateListInCategory_args args = new updateListInCategory_args();
        args.UserCategory = userCategory;
        args.FriendIDs = friendIDs;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_updateListInCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateListInCategory_result result = new updateListInCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateListInCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_insertInCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      {
        return send_insertInCategory(callback, state, userCategory, friendIDs, session);
      }

      public DbStatus End_insertInCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_insertInCategory();
      }

      #endif

      /// <summary>
      /// Inserts the provided list of friends in the provided category without
      /// affecting existing friends in the category
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @param Friend       IDs seperated by ','
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="friendIDs"></param>
      /// <param name="session"></param>
      public DbStatus insertInCategory(UserCategory userCategory, string friendIDs, Session session)
      {
        #if !SILVERLIGHT
        send_insertInCategory(userCategory, friendIDs, session);
        return recv_insertInCategory();

        #else
        var asyncResult = Begin_insertInCategory(null, null, userCategory, friendIDs, session);
        return End_insertInCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_insertInCategory(AsyncCallback callback, object state, UserCategory userCategory, string friendIDs, Session session)
      #else
      public void send_insertInCategory(UserCategory userCategory, string friendIDs, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("insertInCategory", TMessageType.Call, seqid_));
        insertInCategory_args args = new insertInCategory_args();
        args.UserCategory = userCategory;
        args.FriendIDs = friendIDs;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_insertInCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        insertInCategory_result result = new insertInCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertInCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteCategory(AsyncCallback callback, object state, UserCategory userCategory, Session session)
      {
        return send_deleteCategory(callback, state, userCategory, session);
      }

      public DbStatus End_deleteCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteCategory();
      }

      #endif

      /// <summary>
      /// Deletes the provided category and removes all friends inside it
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="session"></param>
      public DbStatus deleteCategory(UserCategory userCategory, Session session)
      {
        #if !SILVERLIGHT
        send_deleteCategory(userCategory, session);
        return recv_deleteCategory();

        #else
        var asyncResult = Begin_deleteCategory(null, null, userCategory, session);
        return End_deleteCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteCategory(AsyncCallback callback, object state, UserCategory userCategory, Session session)
      #else
      public void send_deleteCategory(UserCategory userCategory, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteCategory", TMessageType.Call, seqid_));
        deleteCategory_args args = new deleteCategory_args();
        args.UserCategory = userCategory;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_deleteCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteCategory_result result = new deleteCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteMultipleCategories(AsyncCallback callback, object state, int userId, List<int> categoryIds, Session session)
      {
        return send_deleteMultipleCategories(callback, state, userId, categoryIds, session);
      }

      public DbStatus End_deleteMultipleCategories(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteMultipleCategories();
      }

      #endif

      /// <summary>
      /// Delete multiple categories at a time
      /// also deletes the members in each category
      /// @param int userId
      /// @param list<int> categoryIds
      /// @param Session sessionObj
      /// @return int
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="session"></param>
      public DbStatus deleteMultipleCategories(int userId, List<int> categoryIds, Session session)
      {
        #if !SILVERLIGHT
        send_deleteMultipleCategories(userId, categoryIds, session);
        return recv_deleteMultipleCategories();

        #else
        var asyncResult = Begin_deleteMultipleCategories(null, null, userId, categoryIds, session);
        return End_deleteMultipleCategories(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteMultipleCategories(AsyncCallback callback, object state, int userId, List<int> categoryIds, Session session)
      #else
      public void send_deleteMultipleCategories(int userId, List<int> categoryIds, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteMultipleCategories", TMessageType.Call, seqid_));
        deleteMultipleCategories_args args = new deleteMultipleCategories_args();
        args.UserId = userId;
        args.CategoryIds = categoryIds;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_deleteMultipleCategories()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteMultipleCategories_result result = new deleteMultipleCategories_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteMultipleCategories failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_editCategoryMeta(AsyncCallback callback, object state, UserCategory userCategory, Session session)
      {
        return send_editCategoryMeta(callback, state, userCategory, session);
      }

      public DbStatus End_editCategoryMeta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_editCategoryMeta();
      }

      #endif

      /// <summary>
      /// Updates existing category's meta data only (Name, Description, etc.)
      /// 
      /// @param UserCategory UserID, UserCategoryTypeID, Name , Description
      /// @param Friend       IDs seperated by ','
      /// @return UserCategoryTypeID
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userCategory"></param>
      /// <param name="session"></param>
      public DbStatus editCategoryMeta(UserCategory userCategory, Session session)
      {
        #if !SILVERLIGHT
        send_editCategoryMeta(userCategory, session);
        return recv_editCategoryMeta();

        #else
        var asyncResult = Begin_editCategoryMeta(null, null, userCategory, session);
        return End_editCategoryMeta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_editCategoryMeta(AsyncCallback callback, object state, UserCategory userCategory, Session session)
      #else
      public void send_editCategoryMeta(UserCategory userCategory, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("editCategoryMeta", TMessageType.Call, seqid_));
        editCategoryMeta_args args = new editCategoryMeta_args();
        args.UserCategory = userCategory;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_editCategoryMeta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        editCategoryMeta_result result = new editCategoryMeta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "editCategoryMeta failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_categoryList(AsyncCallback callback, object state, int userId, Session session)
      {
        return send_categoryList(callback, state, userId, session);
      }

      public List<UserCategory> End_categoryList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_categoryList();
      }

      #endif

      /// <summary>
      /// Get the lists of categories for given user along with descriptions
      /// 
      /// @param int userId
      /// @return UserCategory (categoryId, name , description, isSystemDefault, contactCount)
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<UserCategory> categoryList(int userId, Session session)
      {
        #if !SILVERLIGHT
        send_categoryList(userId, session);
        return recv_categoryList();

        #else
        var asyncResult = Begin_categoryList(null, null, userId, session);
        return End_categoryList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_categoryList(AsyncCallback callback, object state, int userId, Session session)
      #else
      public void send_categoryList(int userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("categoryList", TMessageType.Call, seqid_));
        categoryList_args args = new categoryList_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserCategory> recv_categoryList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        categoryList_result result = new categoryList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "categoryList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFriendsListForMobile(AsyncCallback callback, object state, int userId, string deviceId, string cTag, Session session)
      {
        return send_getFriendsListForMobile(callback, state, userId, deviceId, cTag, session);
      }

      public FriendList End_getFriendsListForMobile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFriendsListForMobile();
      }

      #endif

      /// <summary>
      /// Gets the list of friends that has been accepted by both
      /// @param int userId
      /// @param String deviceId
      /// @param Session sessionObj
      /// @return list<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="deviceId"></param>
      /// <param name="cTag"></param>
      /// <param name="session"></param>
      public FriendList getFriendsListForMobile(int userId, string deviceId, string cTag, Session session)
      {
        #if !SILVERLIGHT
        send_getFriendsListForMobile(userId, deviceId, cTag, session);
        return recv_getFriendsListForMobile();

        #else
        var asyncResult = Begin_getFriendsListForMobile(null, null, userId, deviceId, cTag, session);
        return End_getFriendsListForMobile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFriendsListForMobile(AsyncCallback callback, object state, int userId, string deviceId, string cTag, Session session)
      #else
      public void send_getFriendsListForMobile(int userId, string deviceId, string cTag, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFriendsListForMobile", TMessageType.Call, seqid_));
        getFriendsListForMobile_args args = new getFriendsListForMobile_args();
        args.UserId = userId;
        args.DeviceId = deviceId;
        args.CTag = cTag;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FriendList recv_getFriendsListForMobile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFriendsListForMobile_result result = new getFriendsListForMobile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendsListForMobile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPendingFriendsForMobile(AsyncCallback callback, object state, int userId, string deviceId, Session session)
      {
        return send_getPendingFriendsForMobile(callback, state, userId, deviceId, session);
      }

      public List<Friend> End_getPendingFriendsForMobile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPendingFriendsForMobile();
      }

      #endif

      /// <summary>
      /// Gets the list of pending Request friends that has not been accepted by self
      /// With descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow)
      /// @param int userId
      /// @param String deviceId
      /// @param Session sessionObj
      /// @return list<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="deviceId"></param>
      /// <param name="session"></param>
      public List<Friend> getPendingFriendsForMobile(int userId, string deviceId, Session session)
      {
        #if !SILVERLIGHT
        send_getPendingFriendsForMobile(userId, deviceId, session);
        return recv_getPendingFriendsForMobile();

        #else
        var asyncResult = Begin_getPendingFriendsForMobile(null, null, userId, deviceId, session);
        return End_getPendingFriendsForMobile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPendingFriendsForMobile(AsyncCallback callback, object state, int userId, string deviceId, Session session)
      #else
      public void send_getPendingFriendsForMobile(int userId, string deviceId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPendingFriendsForMobile", TMessageType.Call, seqid_));
        getPendingFriendsForMobile_args args = new getPendingFriendsForMobile_args();
        args.UserId = userId;
        args.DeviceId = deviceId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Friend> recv_getPendingFriendsForMobile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPendingFriendsForMobile_result result = new getPendingFriendsForMobile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPendingFriendsForMobile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRequestedToFriendsForMobile(AsyncCallback callback, object state, int userId, string deviceId, Session session)
      {
        return send_getRequestedToFriendsForMobile(callback, state, userId, deviceId, session);
      }

      public List<Friend> End_getRequestedToFriendsForMobile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRequestedToFriendsForMobile();
      }

      #endif

      /// <summary>
      /// Gets the list of Friends to whom user had sent the request but has not been approved yet.
      /// With descriptions(friendID, userTypeId, firstName, lastName,
      /// title, picture, primaryContactNumber, statusIdType, messageAllow)
      /// @param int userId
      /// @param String deviceId
      /// @param Session sessionObj
      /// @return list<Friend>
      /// @throws UserException (See Error Code list for details)
      /// @throws SessionException (See Error Code list for details)
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="deviceId"></param>
      /// <param name="session"></param>
      public List<Friend> getRequestedToFriendsForMobile(int userId, string deviceId, Session session)
      {
        #if !SILVERLIGHT
        send_getRequestedToFriendsForMobile(userId, deviceId, session);
        return recv_getRequestedToFriendsForMobile();

        #else
        var asyncResult = Begin_getRequestedToFriendsForMobile(null, null, userId, deviceId, session);
        return End_getRequestedToFriendsForMobile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRequestedToFriendsForMobile(AsyncCallback callback, object state, int userId, string deviceId, Session session)
      #else
      public void send_getRequestedToFriendsForMobile(int userId, string deviceId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRequestedToFriendsForMobile", TMessageType.Call, seqid_));
        getRequestedToFriendsForMobile_args args = new getRequestedToFriendsForMobile_args();
        args.UserId = userId;
        args.DeviceId = deviceId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Friend> recv_getRequestedToFriendsForMobile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRequestedToFriendsForMobile_result result = new getRequestedToFriendsForMobile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRequestedToFriendsForMobile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProfile(AsyncCallback callback, object state, int userId, int targetId, string username, Session session)
      {
        return send_getProfile(callback, state, userId, targetId, username, session);
      }

      public Friend End_getProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProfile();
      }

      #endif

      /// <summary>
      /// * This method provides user with profile information of the requested target user with description.
      /// * @param int userId Id of logged in user
      /// * @param int targetId Id of target user
      /// * @param Session sessionObj
      /// * @return Friend
      /// * @throws UserException (See Error Code list for details)
      /// * @throws SessionException (See Error Code list for details)
      ///    * 1. firstName in UserInfoPerson<br>
      ///    * 2. LastName in UserInfoPerson<br>
      ///    * 3. picture in UserInfo<br>
      ///    * 4. email in UserLogin<br>
      ///    * 5. primaryContactNumber in UserLogin<br>
      ///    * 6. availableStatus in UserLogin<br>
      ///    * 7. friendShipStatus in Friend<br>
      ///    * 8. userTypeId in UserInfo<br>
      ///    * 9. title in  UserInfoPerson<br>
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="targetId"></param>
      /// <param name="username"></param>
      /// <param name="session"></param>
      public Friend getProfile(int userId, int targetId, string username, Session session)
      {
        #if !SILVERLIGHT
        send_getProfile(userId, targetId, username, session);
        return recv_getProfile();

        #else
        var asyncResult = Begin_getProfile(null, null, userId, targetId, username, session);
        return End_getProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProfile(AsyncCallback callback, object state, int userId, int targetId, string username, Session session)
      #else
      public void send_getProfile(int userId, int targetId, string username, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProfile", TMessageType.Call, seqid_));
        getProfile_args args = new getProfile_args();
        args.UserId = userId;
        args.TargetId = targetId;
        args.Username = username;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Friend recv_getProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProfile_result result = new getProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updatePassword(AsyncCallback callback, object state, string oldPassword, string newPassword, Session session)
      {
        return send_updatePassword(callback, state, oldPassword, newPassword, session);
      }

      public DbStatus End_updatePassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updatePassword();
      }

      #endif

      public DbStatus updatePassword(string oldPassword, string newPassword, Session session)
      {
        #if !SILVERLIGHT
        send_updatePassword(oldPassword, newPassword, session);
        return recv_updatePassword();

        #else
        var asyncResult = Begin_updatePassword(null, null, oldPassword, newPassword, session);
        return End_updatePassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updatePassword(AsyncCallback callback, object state, string oldPassword, string newPassword, Session session)
      #else
      public void send_updatePassword(string oldPassword, string newPassword, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updatePassword", TMessageType.Call, seqid_));
        updatePassword_args args = new updatePassword_args();
        args.OldPassword = oldPassword;
        args.NewPassword = newPassword;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_updatePassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updatePassword_result result = new updatePassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updatePassword failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_contactSync(AsyncCallback callback, object state, UserMobileContacts userMobileContacts, Session session)
      {
        return send_contactSync(callback, state, userMobileContacts, session);
      }

      public UserMobileContacts End_contactSync(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_contactSync();
      }

      #endif

      public UserMobileContacts contactSync(UserMobileContacts userMobileContacts, Session session)
      {
        #if !SILVERLIGHT
        send_contactSync(userMobileContacts, session);
        return recv_contactSync();

        #else
        var asyncResult = Begin_contactSync(null, null, userMobileContacts, session);
        return End_contactSync(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_contactSync(AsyncCallback callback, object state, UserMobileContacts userMobileContacts, Session session)
      #else
      public void send_contactSync(UserMobileContacts userMobileContacts, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("contactSync", TMessageType.Call, seqid_));
        contactSync_args args = new contactSync_args();
        args.UserMobileContacts = userMobileContacts;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserMobileContacts recv_contactSync()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        contactSync_result result = new contactSync_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "contactSync failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllNotifications(AsyncCallback callback, object state, NotificationMob notificationMob, Session session)
      {
        return send_getAllNotifications(callback, state, notificationMob, session);
      }

      public NotificationMobList End_getAllNotifications(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllNotifications();
      }

      #endif

      public NotificationMobList getAllNotifications(NotificationMob notificationMob, Session session)
      {
        #if !SILVERLIGHT
        send_getAllNotifications(notificationMob, session);
        return recv_getAllNotifications();

        #else
        var asyncResult = Begin_getAllNotifications(null, null, notificationMob, session);
        return End_getAllNotifications(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllNotifications(AsyncCallback callback, object state, NotificationMob notificationMob, Session session)
      #else
      public void send_getAllNotifications(NotificationMob notificationMob, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllNotifications", TMessageType.Call, seqid_));
        getAllNotifications_args args = new getAllNotifications_args();
        args.NotificationMob = notificationMob;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NotificationMobList recv_getAllNotifications()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllNotifications_result result = new getAllNotifications_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllNotifications failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_basicSearch(AsyncCallback callback, object state, BasicSearch basicSearch, Session session)
      {
        return send_basicSearch(callback, state, basicSearch, session);
      }

      public BasicSearchList End_basicSearch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_basicSearch();
      }

      #endif

      public BasicSearchList basicSearch(BasicSearch basicSearch, Session session)
      {
        #if !SILVERLIGHT
        send_basicSearch(basicSearch, session);
        return recv_basicSearch();

        #else
        var asyncResult = Begin_basicSearch(null, null, basicSearch, session);
        return End_basicSearch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_basicSearch(AsyncCallback callback, object state, BasicSearch basicSearch, Session session)
      #else
      public void send_basicSearch(BasicSearch basicSearch, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("basicSearch", TMessageType.Call, seqid_));
        basicSearch_args args = new basicSearch_args();
        args.BasicSearch = basicSearch;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BasicSearchList recv_basicSearch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        basicSearch_result result = new basicSearch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "basicSearch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserLoginInfo(AsyncCallback callback, object state, string userNameEmail)
      {
        return send_getUserLoginInfo(callback, state, userNameEmail);
      }

      public User End_getUserLoginInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserLoginInfo();
      }

      #endif

      public User getUserLoginInfo(string userNameEmail)
      {
        #if !SILVERLIGHT
        send_getUserLoginInfo(userNameEmail);
        return recv_getUserLoginInfo();

        #else
        var asyncResult = Begin_getUserLoginInfo(null, null, userNameEmail);
        return End_getUserLoginInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserLoginInfo(AsyncCallback callback, object state, string userNameEmail)
      #else
      public void send_getUserLoginInfo(string userNameEmail)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserLoginInfo", TMessageType.Call, seqid_));
        getUserLoginInfo_args args = new getUserLoginInfo_args();
        args.UserNameEmail = userNameEmail;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_getUserLoginInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserLoginInfo_result result = new getUserLoginInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserLoginInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserLoginInfoWithSession(AsyncCallback callback, object state, string userNameEmail, Session session)
      {
        return send_getUserLoginInfoWithSession(callback, state, userNameEmail, session);
      }

      public User End_getUserLoginInfoWithSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserLoginInfoWithSession();
      }

      #endif

      public User getUserLoginInfoWithSession(string userNameEmail, Session session)
      {
        #if !SILVERLIGHT
        send_getUserLoginInfoWithSession(userNameEmail, session);
        return recv_getUserLoginInfoWithSession();

        #else
        var asyncResult = Begin_getUserLoginInfoWithSession(null, null, userNameEmail, session);
        return End_getUserLoginInfoWithSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserLoginInfoWithSession(AsyncCallback callback, object state, string userNameEmail, Session session)
      #else
      public void send_getUserLoginInfoWithSession(string userNameEmail, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserLoginInfoWithSession", TMessageType.Call, seqid_));
        getUserLoginInfoWithSession_args args = new getUserLoginInfoWithSession_args();
        args.UserNameEmail = userNameEmail;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_getUserLoginInfoWithSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserLoginInfoWithSession_result result = new getUserLoginInfoWithSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserLoginInfoWithSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMyProfile(AsyncCallback callback, object state, string username)
      {
        return send_getMyProfile(callback, state, username);
      }

      public User End_getMyProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMyProfile();
      }

      #endif

      public User getMyProfile(string username)
      {
        #if !SILVERLIGHT
        send_getMyProfile(username);
        return recv_getMyProfile();

        #else
        var asyncResult = Begin_getMyProfile(null, null, username);
        return End_getMyProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMyProfile(AsyncCallback callback, object state, string username)
      #else
      public void send_getMyProfile(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMyProfile", TMessageType.Call, seqid_));
        getMyProfile_args args = new getMyProfile_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_getMyProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMyProfile_result result = new getMyProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMyProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveUserProfilePic(AsyncCallback callback, object state, string username, string fileId)
      {
        return send_saveUserProfilePic(callback, state, username, fileId);
      }

      public bool End_saveUserProfilePic(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_saveUserProfilePic();
      }

      #endif

      public bool saveUserProfilePic(string username, string fileId)
      {
        #if !SILVERLIGHT
        send_saveUserProfilePic(username, fileId);
        return recv_saveUserProfilePic();

        #else
        var asyncResult = Begin_saveUserProfilePic(null, null, username, fileId);
        return End_saveUserProfilePic(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveUserProfilePic(AsyncCallback callback, object state, string username, string fileId)
      #else
      public void send_saveUserProfilePic(string username, string fileId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveUserProfilePic", TMessageType.Call, seqid_));
        saveUserProfilePic_args args = new saveUserProfilePic_args();
        args.Username = username;
        args.FileId = fileId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_saveUserProfilePic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveUserProfilePic_result result = new saveUserProfilePic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saveUserProfilePic failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_verifyUser(AsyncCallback callback, object state, string usernameEmail)
      {
        return send_verifyUser(callback, state, usernameEmail);
      }

      public User End_verifyUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_verifyUser();
      }

      #endif

      public User verifyUser(string usernameEmail)
      {
        #if !SILVERLIGHT
        send_verifyUser(usernameEmail);
        return recv_verifyUser();

        #else
        var asyncResult = Begin_verifyUser(null, null, usernameEmail);
        return End_verifyUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_verifyUser(AsyncCallback callback, object state, string usernameEmail)
      #else
      public void send_verifyUser(string usernameEmail)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("verifyUser", TMessageType.Call, seqid_));
        verifyUser_args args = new verifyUser_args();
        args.UsernameEmail = usernameEmail;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_verifyUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        verifyUser_result result = new verifyUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_forgotPasswordCode(AsyncCallback callback, object state, User user)
      {
        return send_forgotPasswordCode(callback, state, user);
      }

      public string End_forgotPasswordCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_forgotPasswordCode();
      }

      #endif

      public string forgotPasswordCode(User user)
      {
        #if !SILVERLIGHT
        send_forgotPasswordCode(user);
        return recv_forgotPasswordCode();

        #else
        var asyncResult = Begin_forgotPasswordCode(null, null, user);
        return End_forgotPasswordCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_forgotPasswordCode(AsyncCallback callback, object state, User user)
      #else
      public void send_forgotPasswordCode(User user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("forgotPasswordCode", TMessageType.Call, seqid_));
        forgotPasswordCode_args args = new forgotPasswordCode_args();
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_forgotPasswordCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        forgotPasswordCode_result result = new forgotPasswordCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forgotPasswordCode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_resetPassword(AsyncCallback callback, object state, string code, string password)
      {
        return send_resetPassword(callback, state, code, password);
      }

      public DbStatus End_resetPassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_resetPassword();
      }

      #endif

      public DbStatus resetPassword(string code, string password)
      {
        #if !SILVERLIGHT
        send_resetPassword(code, password);
        return recv_resetPassword();

        #else
        var asyncResult = Begin_resetPassword(null, null, code, password);
        return End_resetPassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_resetPassword(AsyncCallback callback, object state, string code, string password)
      #else
      public void send_resetPassword(string code, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("resetPassword", TMessageType.Call, seqid_));
        resetPassword_args args = new resetPassword_args();
        args.Code = code;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_resetPassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resetPassword_result result = new resetPassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resetPassword failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserContactDetails(AsyncCallback callback, object state, int userId, string targetUserNameId, Session session)
      {
        return send_getUserContactDetails(callback, state, userId, targetUserNameId, session);
      }

      public List<UserContactDetails> End_getUserContactDetails(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserContactDetails();
      }

      #endif

      public List<UserContactDetails> getUserContactDetails(int userId, string targetUserNameId, Session session)
      {
        #if !SILVERLIGHT
        send_getUserContactDetails(userId, targetUserNameId, session);
        return recv_getUserContactDetails();

        #else
        var asyncResult = Begin_getUserContactDetails(null, null, userId, targetUserNameId, session);
        return End_getUserContactDetails(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserContactDetails(AsyncCallback callback, object state, int userId, string targetUserNameId, Session session)
      #else
      public void send_getUserContactDetails(int userId, string targetUserNameId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserContactDetails", TMessageType.Call, seqid_));
        getUserContactDetails_args args = new getUserContactDetails_args();
        args.UserId = userId;
        args.TargetUserNameId = targetUserNameId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserContactDetails> recv_getUserContactDetails()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserContactDetails_result result = new getUserContactDetails_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserContactDetails failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setBasicContactPersion(AsyncCallback callback, object state, UserInfoPerson userinfo, Session session)
      {
        return send_setBasicContactPersion(callback, state, userinfo, session);
      }

      public DbStatus End_setBasicContactPersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setBasicContactPersion();
      }

      #endif

      public DbStatus setBasicContactPersion(UserInfoPerson userinfo, Session session)
      {
        #if !SILVERLIGHT
        send_setBasicContactPersion(userinfo, session);
        return recv_setBasicContactPersion();

        #else
        var asyncResult = Begin_setBasicContactPersion(null, null, userinfo, session);
        return End_setBasicContactPersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setBasicContactPersion(AsyncCallback callback, object state, UserInfoPerson userinfo, Session session)
      #else
      public void send_setBasicContactPersion(UserInfoPerson userinfo, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setBasicContactPersion", TMessageType.Call, seqid_));
        setBasicContactPersion_args args = new setBasicContactPersion_args();
        args.Userinfo = userinfo;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_setBasicContactPersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setBasicContactPersion_result result = new setBasicContactPersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setBasicContactPersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setBusinessBaiscDetail(AsyncCallback callback, object state, BusinessBasicDetails details, Session session)
      {
        return send_setBusinessBaiscDetail(callback, state, details, session);
      }

      public DbStatus End_setBusinessBaiscDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setBusinessBaiscDetail();
      }

      #endif

      public DbStatus setBusinessBaiscDetail(BusinessBasicDetails details, Session session)
      {
        #if !SILVERLIGHT
        send_setBusinessBaiscDetail(details, session);
        return recv_setBusinessBaiscDetail();

        #else
        var asyncResult = Begin_setBusinessBaiscDetail(null, null, details, session);
        return End_setBusinessBaiscDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setBusinessBaiscDetail(AsyncCallback callback, object state, BusinessBasicDetails details, Session session)
      #else
      public void send_setBusinessBaiscDetail(BusinessBasicDetails details, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setBusinessBaiscDetail", TMessageType.Call, seqid_));
        setBusinessBaiscDetail_args args = new setBusinessBaiscDetail_args();
        args.Details = details;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_setBusinessBaiscDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setBusinessBaiscDetail_result result = new setBusinessBaiscDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setBusinessBaiscDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setCompanyReview(AsyncCallback callback, object state, CompanyReview review, Session session)
      {
        return send_setCompanyReview(callback, state, review, session);
      }

      public DbStatus End_setCompanyReview(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setCompanyReview();
      }

      #endif

      public DbStatus setCompanyReview(CompanyReview review, Session session)
      {
        #if !SILVERLIGHT
        send_setCompanyReview(review, session);
        return recv_setCompanyReview();

        #else
        var asyncResult = Begin_setCompanyReview(null, null, review, session);
        return End_setCompanyReview(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setCompanyReview(AsyncCallback callback, object state, CompanyReview review, Session session)
      #else
      public void send_setCompanyReview(CompanyReview review, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setCompanyReview", TMessageType.Call, seqid_));
        setCompanyReview_args args = new setCompanyReview_args();
        args.Review = review;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_setCompanyReview()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setCompanyReview_result result = new setCompanyReview_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setCompanyReview failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setEmployeWorkSchedule(AsyncCallback callback, object state, EmployeeWorkSchedule schedule, Session session)
      {
        return send_setEmployeWorkSchedule(callback, state, schedule, session);
      }

      public DbStatus End_setEmployeWorkSchedule(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setEmployeWorkSchedule();
      }

      #endif

      public DbStatus setEmployeWorkSchedule(EmployeeWorkSchedule schedule, Session session)
      {
        #if !SILVERLIGHT
        send_setEmployeWorkSchedule(schedule, session);
        return recv_setEmployeWorkSchedule();

        #else
        var asyncResult = Begin_setEmployeWorkSchedule(null, null, schedule, session);
        return End_setEmployeWorkSchedule(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setEmployeWorkSchedule(AsyncCallback callback, object state, EmployeeWorkSchedule schedule, Session session)
      #else
      public void send_setEmployeWorkSchedule(EmployeeWorkSchedule schedule, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setEmployeWorkSchedule", TMessageType.Call, seqid_));
        setEmployeWorkSchedule_args args = new setEmployeWorkSchedule_args();
        args.Schedule = schedule;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_setEmployeWorkSchedule()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setEmployeWorkSchedule_result result = new setEmployeWorkSchedule_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setEmployeWorkSchedule failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertDepartment(AsyncCallback callback, object state, Department department, Session session)
      {
        return send_upsertDepartment(callback, state, department, session);
      }

      public DepartmentResponse End_upsertDepartment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertDepartment();
      }

      #endif

      public DepartmentResponse upsertDepartment(Department department, Session session)
      {
        #if !SILVERLIGHT
        send_upsertDepartment(department, session);
        return recv_upsertDepartment();

        #else
        var asyncResult = Begin_upsertDepartment(null, null, department, session);
        return End_upsertDepartment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertDepartment(AsyncCallback callback, object state, Department department, Session session)
      #else
      public void send_upsertDepartment(Department department, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertDepartment", TMessageType.Call, seqid_));
        upsertDepartment_args args = new upsertDepartment_args();
        args.Department = department;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DepartmentResponse recv_upsertDepartment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertDepartment_result result = new upsertDepartment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertDepartment failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertDepartmentEmployees(AsyncCallback callback, object state, DepartmentEmployees departmentEmployees, Session session)
      {
        return send_upsertDepartmentEmployees(callback, state, departmentEmployees, session);
      }

      public DbStatus End_upsertDepartmentEmployees(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertDepartmentEmployees();
      }

      #endif

      public DbStatus upsertDepartmentEmployees(DepartmentEmployees departmentEmployees, Session session)
      {
        #if !SILVERLIGHT
        send_upsertDepartmentEmployees(departmentEmployees, session);
        return recv_upsertDepartmentEmployees();

        #else
        var asyncResult = Begin_upsertDepartmentEmployees(null, null, departmentEmployees, session);
        return End_upsertDepartmentEmployees(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertDepartmentEmployees(AsyncCallback callback, object state, DepartmentEmployees departmentEmployees, Session session)
      #else
      public void send_upsertDepartmentEmployees(DepartmentEmployees departmentEmployees, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertDepartmentEmployees", TMessageType.Call, seqid_));
        upsertDepartmentEmployees_args args = new upsertDepartmentEmployees_args();
        args.DepartmentEmployees = departmentEmployees;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_upsertDepartmentEmployees()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertDepartmentEmployees_result result = new upsertDepartmentEmployees_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertDepartmentEmployees failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertContacts(AsyncCallback callback, object state, UserContactDetails userContactDetails, Session session)
      {
        return send_upsertContacts(callback, state, userContactDetails, session);
      }

      public UserContactDetailsResponse End_upsertContacts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertContacts();
      }

      #endif

      public UserContactDetailsResponse upsertContacts(UserContactDetails userContactDetails, Session session)
      {
        #if !SILVERLIGHT
        send_upsertContacts(userContactDetails, session);
        return recv_upsertContacts();

        #else
        var asyncResult = Begin_upsertContacts(null, null, userContactDetails, session);
        return End_upsertContacts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertContacts(AsyncCallback callback, object state, UserContactDetails userContactDetails, Session session)
      #else
      public void send_upsertContacts(UserContactDetails userContactDetails, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertContacts", TMessageType.Call, seqid_));
        upsertContacts_args args = new upsertContacts_args();
        args.UserContactDetails = userContactDetails;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserContactDetailsResponse recv_upsertContacts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertContacts_result result = new upsertContacts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertContacts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertSuggestContacts(AsyncCallback callback, object state, int targetId, UserContactDetails userContactDetails, Session session)
      {
        return send_upsertSuggestContacts(callback, state, targetId, userContactDetails, session);
      }

      public SuggestContactResponse End_upsertSuggestContacts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertSuggestContacts();
      }

      #endif

      public SuggestContactResponse upsertSuggestContacts(int targetId, UserContactDetails userContactDetails, Session session)
      {
        #if !SILVERLIGHT
        send_upsertSuggestContacts(targetId, userContactDetails, session);
        return recv_upsertSuggestContacts();

        #else
        var asyncResult = Begin_upsertSuggestContacts(null, null, targetId, userContactDetails, session);
        return End_upsertSuggestContacts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertSuggestContacts(AsyncCallback callback, object state, int targetId, UserContactDetails userContactDetails, Session session)
      #else
      public void send_upsertSuggestContacts(int targetId, UserContactDetails userContactDetails, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertSuggestContacts", TMessageType.Call, seqid_));
        upsertSuggestContacts_args args = new upsertSuggestContacts_args();
        args.TargetId = targetId;
        args.UserContactDetails = userContactDetails;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SuggestContactResponse recv_upsertSuggestContacts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertSuggestContacts_result result = new upsertSuggestContacts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertSuggestContacts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_viewCompanyEmployee(AsyncCallback callback, object state, string user, string searchTerm, Session session)
      {
        return send_viewCompanyEmployee(callback, state, user, searchTerm, session);
      }

      public List<CompanyEmployeeInfo> End_viewCompanyEmployee(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_viewCompanyEmployee();
      }

      #endif

      public List<CompanyEmployeeInfo> viewCompanyEmployee(string user, string searchTerm, Session session)
      {
        #if !SILVERLIGHT
        send_viewCompanyEmployee(user, searchTerm, session);
        return recv_viewCompanyEmployee();

        #else
        var asyncResult = Begin_viewCompanyEmployee(null, null, user, searchTerm, session);
        return End_viewCompanyEmployee(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_viewCompanyEmployee(AsyncCallback callback, object state, string user, string searchTerm, Session session)
      #else
      public void send_viewCompanyEmployee(string user, string searchTerm, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("viewCompanyEmployee", TMessageType.Call, seqid_));
        viewCompanyEmployee_args args = new viewCompanyEmployee_args();
        args.User = user;
        args.SearchTerm = searchTerm;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CompanyEmployeeInfo> recv_viewCompanyEmployee()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        viewCompanyEmployee_result result = new viewCompanyEmployee_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "viewCompanyEmployee failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getContactSuggestions(AsyncCallback callback, object state, Session session)
      {
        return send_getContactSuggestions(callback, state, session);
      }

      public List<ContactSuggestions> End_getContactSuggestions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getContactSuggestions();
      }

      #endif

      public List<ContactSuggestions> getContactSuggestions(Session session)
      {
        #if !SILVERLIGHT
        send_getContactSuggestions(session);
        return recv_getContactSuggestions();

        #else
        var asyncResult = Begin_getContactSuggestions(null, null, session);
        return End_getContactSuggestions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getContactSuggestions(AsyncCallback callback, object state, Session session)
      #else
      public void send_getContactSuggestions(Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getContactSuggestions", TMessageType.Call, seqid_));
        getContactSuggestions_args args = new getContactSuggestions_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ContactSuggestions> recv_getContactSuggestions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getContactSuggestions_result result = new getContactSuggestions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactSuggestions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_respondContactSuggestion(AsyncCallback callback, object state, long contactCustomId, short mode, Session sesion)
      {
        return send_respondContactSuggestion(callback, state, contactCustomId, mode, sesion);
      }

      public DbStatus End_respondContactSuggestion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_respondContactSuggestion();
      }

      #endif

      public DbStatus respondContactSuggestion(long contactCustomId, short mode, Session sesion)
      {
        #if !SILVERLIGHT
        send_respondContactSuggestion(contactCustomId, mode, sesion);
        return recv_respondContactSuggestion();

        #else
        var asyncResult = Begin_respondContactSuggestion(null, null, contactCustomId, mode, sesion);
        return End_respondContactSuggestion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_respondContactSuggestion(AsyncCallback callback, object state, long contactCustomId, short mode, Session sesion)
      #else
      public void send_respondContactSuggestion(long contactCustomId, short mode, Session sesion)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("respondContactSuggestion", TMessageType.Call, seqid_));
        respondContactSuggestion_args args = new respondContactSuggestion_args();
        args.ContactCustomId = contactCustomId;
        args.Mode = mode;
        args.Sesion = sesion;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_respondContactSuggestion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        respondContactSuggestion_result result = new respondContactSuggestion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "respondContactSuggestion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNotificationRequestCount(AsyncCallback callback, object state, string nRTypeIds, Session session)
      {
        return send_getNotificationRequestCount(callback, state, nRTypeIds, session);
      }

      public NotificationMobList End_getNotificationRequestCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNotificationRequestCount();
      }

      #endif

      public NotificationMobList getNotificationRequestCount(string nRTypeIds, Session session)
      {
        #if !SILVERLIGHT
        send_getNotificationRequestCount(nRTypeIds, session);
        return recv_getNotificationRequestCount();

        #else
        var asyncResult = Begin_getNotificationRequestCount(null, null, nRTypeIds, session);
        return End_getNotificationRequestCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNotificationRequestCount(AsyncCallback callback, object state, string nRTypeIds, Session session)
      #else
      public void send_getNotificationRequestCount(string nRTypeIds, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNotificationRequestCount", TMessageType.Call, seqid_));
        getNotificationRequestCount_args args = new getNotificationRequestCount_args();
        args.NRTypeIds = nRTypeIds;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NotificationMobList recv_getNotificationRequestCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNotificationRequestCount_result result = new getNotificationRequestCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotificationRequestCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertEmployeementHistory(AsyncCallback callback, object state, Employment employement, Session session)
      {
        return send_upsertEmployeementHistory(callback, state, employement, session);
      }

      public Employment End_upsertEmployeementHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertEmployeementHistory();
      }

      #endif

      public Employment upsertEmployeementHistory(Employment employement, Session session)
      {
        #if !SILVERLIGHT
        send_upsertEmployeementHistory(employement, session);
        return recv_upsertEmployeementHistory();

        #else
        var asyncResult = Begin_upsertEmployeementHistory(null, null, employement, session);
        return End_upsertEmployeementHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertEmployeementHistory(AsyncCallback callback, object state, Employment employement, Session session)
      #else
      public void send_upsertEmployeementHistory(Employment employement, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertEmployeementHistory", TMessageType.Call, seqid_));
        upsertEmployeementHistory_args args = new upsertEmployeementHistory_args();
        args.Employement = employement;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Employment recv_upsertEmployeementHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertEmployeementHistory_result result = new upsertEmployeementHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertEmployeementHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserInfo(AsyncCallback callback, object state, string userNameId, Session session)
      {
        return send_getUserInfo(callback, state, userNameId, session);
      }

      public UserInfo End_getUserInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserInfo();
      }

      #endif

      public UserInfo getUserInfo(string userNameId, Session session)
      {
        #if !SILVERLIGHT
        send_getUserInfo(userNameId, session);
        return recv_getUserInfo();

        #else
        var asyncResult = Begin_getUserInfo(null, null, userNameId, session);
        return End_getUserInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserInfo(AsyncCallback callback, object state, string userNameId, Session session)
      #else
      public void send_getUserInfo(string userNameId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserInfo", TMessageType.Call, seqid_));
        getUserInfo_args args = new getUserInfo_args();
        args.UserNameId = userNameId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserInfo recv_getUserInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserInfo_result result = new getUserInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUsersInfo(AsyncCallback callback, object state, string users, Session session)
      {
        return send_getUsersInfo(callback, state, users, session);
      }

      public List<UserInfo> End_getUsersInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUsersInfo();
      }

      #endif

      public List<UserInfo> getUsersInfo(string users, Session session)
      {
        #if !SILVERLIGHT
        send_getUsersInfo(users, session);
        return recv_getUsersInfo();

        #else
        var asyncResult = Begin_getUsersInfo(null, null, users, session);
        return End_getUsersInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUsersInfo(AsyncCallback callback, object state, string users, Session session)
      #else
      public void send_getUsersInfo(string users, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUsersInfo", TMessageType.Call, seqid_));
        getUsersInfo_args args = new getUsersInfo_args();
        args.Users = users;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserInfo> recv_getUsersInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUsersInfo_result result = new getUsersInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUsersInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompanyTree(AsyncCallback callback, object state, CompanyTree companyTree, Session session)
      {
        return send_getCompanyTree(callback, state, companyTree, session);
      }

      public List<CompanyTreeResponse> End_getCompanyTree(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompanyTree();
      }

      #endif

      public List<CompanyTreeResponse> getCompanyTree(CompanyTree companyTree, Session session)
      {
        #if !SILVERLIGHT
        send_getCompanyTree(companyTree, session);
        return recv_getCompanyTree();

        #else
        var asyncResult = Begin_getCompanyTree(null, null, companyTree, session);
        return End_getCompanyTree(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompanyTree(AsyncCallback callback, object state, CompanyTree companyTree, Session session)
      #else
      public void send_getCompanyTree(CompanyTree companyTree, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompanyTree", TMessageType.Call, seqid_));
        getCompanyTree_args args = new getCompanyTree_args();
        args.CompanyTree = companyTree;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CompanyTreeResponse> recv_getCompanyTree()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompanyTree_result result = new getCompanyTree_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompanyTree failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserLanguages(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getUserLanguages(callback, state, userId, session);
      }

      public List<Language> End_getUserLanguages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserLanguages();
      }

      #endif

      public List<Language> getUserLanguages(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getUserLanguages(userId, session);
        return recv_getUserLanguages();

        #else
        var asyncResult = Begin_getUserLanguages(null, null, userId, session);
        return End_getUserLanguages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserLanguages(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getUserLanguages(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserLanguages", TMessageType.Call, seqid_));
        getUserLanguages_args args = new getUserLanguages_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Language> recv_getUserLanguages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserLanguages_result result = new getUserLanguages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserLanguages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertLanguage(AsyncCallback callback, object state, string userIdOrName, string text, Session session)
      {
        return send_upsertLanguage(callback, state, userIdOrName, text, session);
      }

      public DbStatus End_upsertLanguage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertLanguage();
      }

      #endif

      public DbStatus upsertLanguage(string userIdOrName, string text, Session session)
      {
        #if !SILVERLIGHT
        send_upsertLanguage(userIdOrName, text, session);
        return recv_upsertLanguage();

        #else
        var asyncResult = Begin_upsertLanguage(null, null, userIdOrName, text, session);
        return End_upsertLanguage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertLanguage(AsyncCallback callback, object state, string userIdOrName, string text, Session session)
      #else
      public void send_upsertLanguage(string userIdOrName, string text, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertLanguage", TMessageType.Call, seqid_));
        upsertLanguage_args args = new upsertLanguage_args();
        args.UserIdOrName = userIdOrName;
        args.Text = text;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_upsertLanguage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertLanguage_result result = new upsertLanguage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertLanguage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserAwards(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getUserAwards(callback, state, userId, session);
      }

      public List<AwardAndHonor> End_getUserAwards(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserAwards();
      }

      #endif

      public List<AwardAndHonor> getUserAwards(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getUserAwards(userId, session);
        return recv_getUserAwards();

        #else
        var asyncResult = Begin_getUserAwards(null, null, userId, session);
        return End_getUserAwards(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserAwards(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getUserAwards(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserAwards", TMessageType.Call, seqid_));
        getUserAwards_args args = new getUserAwards_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<AwardAndHonor> recv_getUserAwards()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserAwards_result result = new getUserAwards_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserAwards failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertAwardAndHonor(AsyncCallback callback, object state, AwardAndHonor awardAndHonor, Session session)
      {
        return send_upsertAwardAndHonor(callback, state, awardAndHonor, session);
      }

      public AwardAndHonorResponse End_upsertAwardAndHonor(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertAwardAndHonor();
      }

      #endif

      public AwardAndHonorResponse upsertAwardAndHonor(AwardAndHonor awardAndHonor, Session session)
      {
        #if !SILVERLIGHT
        send_upsertAwardAndHonor(awardAndHonor, session);
        return recv_upsertAwardAndHonor();

        #else
        var asyncResult = Begin_upsertAwardAndHonor(null, null, awardAndHonor, session);
        return End_upsertAwardAndHonor(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertAwardAndHonor(AsyncCallback callback, object state, AwardAndHonor awardAndHonor, Session session)
      #else
      public void send_upsertAwardAndHonor(AwardAndHonor awardAndHonor, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertAwardAndHonor", TMessageType.Call, seqid_));
        upsertAwardAndHonor_args args = new upsertAwardAndHonor_args();
        args.AwardAndHonor = awardAndHonor;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AwardAndHonorResponse recv_upsertAwardAndHonor()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertAwardAndHonor_result result = new upsertAwardAndHonor_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertAwardAndHonor failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserAcademics(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getUserAcademics(callback, state, userId, session);
      }

      public List<UserAcademics> End_getUserAcademics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserAcademics();
      }

      #endif

      public List<UserAcademics> getUserAcademics(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getUserAcademics(userId, session);
        return recv_getUserAcademics();

        #else
        var asyncResult = Begin_getUserAcademics(null, null, userId, session);
        return End_getUserAcademics(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserAcademics(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getUserAcademics(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserAcademics", TMessageType.Call, seqid_));
        getUserAcademics_args args = new getUserAcademics_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserAcademics> recv_getUserAcademics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserAcademics_result result = new getUserAcademics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserAcademics failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_viewEmploymentHistoryPerson(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_viewEmploymentHistoryPerson(callback, state, userId, session);
      }

      public List<CompanyEmployeeInfo> End_viewEmploymentHistoryPerson(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_viewEmploymentHistoryPerson();
      }

      #endif

      public List<CompanyEmployeeInfo> viewEmploymentHistoryPerson(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_viewEmploymentHistoryPerson(userId, session);
        return recv_viewEmploymentHistoryPerson();

        #else
        var asyncResult = Begin_viewEmploymentHistoryPerson(null, null, userId, session);
        return End_viewEmploymentHistoryPerson(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_viewEmploymentHistoryPerson(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_viewEmploymentHistoryPerson(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("viewEmploymentHistoryPerson", TMessageType.Call, seqid_));
        viewEmploymentHistoryPerson_args args = new viewEmploymentHistoryPerson_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CompanyEmployeeInfo> recv_viewEmploymentHistoryPerson()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        viewEmploymentHistoryPerson_result result = new viewEmploymentHistoryPerson_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "viewEmploymentHistoryPerson failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getEmployeeRatings(AsyncCallback callback, object state, EmployeeRatings employeeRatings, Session session)
      {
        return send_getEmployeeRatings(callback, state, employeeRatings, session);
      }

      public List<EmployeeRatingResponse> End_getEmployeeRatings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getEmployeeRatings();
      }

      #endif

      public List<EmployeeRatingResponse> getEmployeeRatings(EmployeeRatings employeeRatings, Session session)
      {
        #if !SILVERLIGHT
        send_getEmployeeRatings(employeeRatings, session);
        return recv_getEmployeeRatings();

        #else
        var asyncResult = Begin_getEmployeeRatings(null, null, employeeRatings, session);
        return End_getEmployeeRatings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getEmployeeRatings(AsyncCallback callback, object state, EmployeeRatings employeeRatings, Session session)
      #else
      public void send_getEmployeeRatings(EmployeeRatings employeeRatings, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getEmployeeRatings", TMessageType.Call, seqid_));
        getEmployeeRatings_args args = new getEmployeeRatings_args();
        args.EmployeeRatings = employeeRatings;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<EmployeeRatingResponse> recv_getEmployeeRatings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEmployeeRatings_result result = new getEmployeeRatings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEmployeeRatings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getEmployees(AsyncCallback callback, object state, Employees employees, Session session)
      {
        return send_getEmployees(callback, state, employees, session);
      }

      public CompanyEmployeeInfoList End_getEmployees(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getEmployees();
      }

      #endif

      public CompanyEmployeeInfoList getEmployees(Employees employees, Session session)
      {
        #if !SILVERLIGHT
        send_getEmployees(employees, session);
        return recv_getEmployees();

        #else
        var asyncResult = Begin_getEmployees(null, null, employees, session);
        return End_getEmployees(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getEmployees(AsyncCallback callback, object state, Employees employees, Session session)
      #else
      public void send_getEmployees(Employees employees, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getEmployees", TMessageType.Call, seqid_));
        getEmployees_args args = new getEmployees_args();
        args.Employees = employees;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CompanyEmployeeInfoList recv_getEmployees()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEmployees_result result = new getEmployees_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEmployees failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompanyReviews(AsyncCallback callback, object state, CompanyReview companyReview, Session session)
      {
        return send_getCompanyReviews(callback, state, companyReview, session);
      }

      public CompanyReviewList End_getCompanyReviews(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompanyReviews();
      }

      #endif

      public CompanyReviewList getCompanyReviews(CompanyReview companyReview, Session session)
      {
        #if !SILVERLIGHT
        send_getCompanyReviews(companyReview, session);
        return recv_getCompanyReviews();

        #else
        var asyncResult = Begin_getCompanyReviews(null, null, companyReview, session);
        return End_getCompanyReviews(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompanyReviews(AsyncCallback callback, object state, CompanyReview companyReview, Session session)
      #else
      public void send_getCompanyReviews(CompanyReview companyReview, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompanyReviews", TMessageType.Call, seqid_));
        getCompanyReviews_args args = new getCompanyReviews_args();
        args.CompanyReview = companyReview;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CompanyReviewList recv_getCompanyReviews()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompanyReviews_result result = new getCompanyReviews_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompanyReviews failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertThumbsForSkill(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_upsertThumbsForSkill(callback, state, skill, session);
      }

      public SkillResponse End_upsertThumbsForSkill(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertThumbsForSkill();
      }

      #endif

      public SkillResponse upsertThumbsForSkill(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_upsertThumbsForSkill(skill, session);
        return recv_upsertThumbsForSkill();

        #else
        var asyncResult = Begin_upsertThumbsForSkill(null, null, skill, session);
        return End_upsertThumbsForSkill(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertThumbsForSkill(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_upsertThumbsForSkill(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertThumbsForSkill", TMessageType.Call, seqid_));
        upsertThumbsForSkill_args args = new upsertThumbsForSkill_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkillResponse recv_upsertThumbsForSkill()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertThumbsForSkill_result result = new upsertThumbsForSkill_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertThumbsForSkill failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_thumbsForSkillDetails(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_thumbsForSkillDetails(callback, state, skill, session);
      }

      public SkillResponse End_thumbsForSkillDetails(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_thumbsForSkillDetails();
      }

      #endif

      public SkillResponse thumbsForSkillDetails(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_thumbsForSkillDetails(skill, session);
        return recv_thumbsForSkillDetails();

        #else
        var asyncResult = Begin_thumbsForSkillDetails(null, null, skill, session);
        return End_thumbsForSkillDetails(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_thumbsForSkillDetails(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_thumbsForSkillDetails(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("thumbsForSkillDetails", TMessageType.Call, seqid_));
        thumbsForSkillDetails_args args = new thumbsForSkillDetails_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkillResponse recv_thumbsForSkillDetails()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        thumbsForSkillDetails_result result = new thumbsForSkillDetails_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "thumbsForSkillDetails failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_acceptSkill(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_acceptSkill(callback, state, skill, session);
      }

      public DbStatus End_acceptSkill(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_acceptSkill();
      }

      #endif

      public DbStatus acceptSkill(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_acceptSkill(skill, session);
        return recv_acceptSkill();

        #else
        var asyncResult = Begin_acceptSkill(null, null, skill, session);
        return End_acceptSkill(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acceptSkill(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_acceptSkill(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acceptSkill", TMessageType.Call, seqid_));
        acceptSkill_args args = new acceptSkill_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_acceptSkill()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acceptSkill_result result = new acceptSkill_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acceptSkill failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertSkill(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_upsertSkill(callback, state, skill, session);
      }

      public DbStatus End_upsertSkill(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertSkill();
      }

      #endif

      public DbStatus upsertSkill(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_upsertSkill(skill, session);
        return recv_upsertSkill();

        #else
        var asyncResult = Begin_upsertSkill(null, null, skill, session);
        return End_upsertSkill(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertSkill(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_upsertSkill(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertSkill", TMessageType.Call, seqid_));
        upsertSkill_args args = new upsertSkill_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_upsertSkill()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertSkill_result result = new upsertSkill_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertSkill failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSkillSummary(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_getSkillSummary(callback, state, skill, session);
      }

      public SkillResponse End_getSkillSummary(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSkillSummary();
      }

      #endif

      public SkillResponse getSkillSummary(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_getSkillSummary(skill, session);
        return recv_getSkillSummary();

        #else
        var asyncResult = Begin_getSkillSummary(null, null, skill, session);
        return End_getSkillSummary(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSkillSummary(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_getSkillSummary(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSkillSummary", TMessageType.Call, seqid_));
        getSkillSummary_args args = new getSkillSummary_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkillResponse recv_getSkillSummary()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSkillSummary_result result = new getSkillSummary_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSkillSummary failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserSkills(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_getUserSkills(callback, state, skill, session);
      }

      public SkillResponse End_getUserSkills(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserSkills();
      }

      #endif

      public SkillResponse getUserSkills(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_getUserSkills(skill, session);
        return recv_getUserSkills();

        #else
        var asyncResult = Begin_getUserSkills(null, null, skill, session);
        return End_getUserSkills(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserSkills(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_getUserSkills(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserSkills", TMessageType.Call, seqid_));
        getUserSkills_args args = new getUserSkills_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkillResponse recv_getUserSkills()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserSkills_result result = new getUserSkills_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserSkills failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertEmployeeRating(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_upsertEmployeeRating(callback, state, skill, session);
      }

      public DbStatus End_upsertEmployeeRating(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertEmployeeRating();
      }

      #endif

      public DbStatus upsertEmployeeRating(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_upsertEmployeeRating(skill, session);
        return recv_upsertEmployeeRating();

        #else
        var asyncResult = Begin_upsertEmployeeRating(null, null, skill, session);
        return End_upsertEmployeeRating(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertEmployeeRating(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_upsertEmployeeRating(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertEmployeeRating", TMessageType.Call, seqid_));
        upsertEmployeeRating_args args = new upsertEmployeeRating_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_upsertEmployeeRating()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertEmployeeRating_result result = new upsertEmployeeRating_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertEmployeeRating failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertAcademic(AsyncCallback callback, object state, UserAcademics userAcademic, Session session)
      {
        return send_upsertAcademic(callback, state, userAcademic, session);
      }

      public UserAcademicResponse End_upsertAcademic(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertAcademic();
      }

      #endif

      public UserAcademicResponse upsertAcademic(UserAcademics userAcademic, Session session)
      {
        #if !SILVERLIGHT
        send_upsertAcademic(userAcademic, session);
        return recv_upsertAcademic();

        #else
        var asyncResult = Begin_upsertAcademic(null, null, userAcademic, session);
        return End_upsertAcademic(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertAcademic(AsyncCallback callback, object state, UserAcademics userAcademic, Session session)
      #else
      public void send_upsertAcademic(UserAcademics userAcademic, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertAcademic", TMessageType.Call, seqid_));
        upsertAcademic_args args = new upsertAcademic_args();
        args.UserAcademic = userAcademic;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserAcademicResponse recv_upsertAcademic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertAcademic_result result = new upsertAcademic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertAcademic failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getData(AsyncCallback callback, object state, GetDataParam getDataParam, Session session)
      {
        return send_getData(callback, state, getDataParam, session);
      }

      public List<GetDataResponse> End_getData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getData();
      }

      #endif

      public List<GetDataResponse> getData(GetDataParam getDataParam, Session session)
      {
        #if !SILVERLIGHT
        send_getData(getDataParam, session);
        return recv_getData();

        #else
        var asyncResult = Begin_getData(null, null, getDataParam, session);
        return End_getData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getData(AsyncCallback callback, object state, GetDataParam getDataParam, Session session)
      #else
      public void send_getData(GetDataParam getDataParam, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getData", TMessageType.Call, seqid_));
        getData_args args = new getData_args();
        args.GetDataParam = getDataParam;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<GetDataResponse> recv_getData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getData_result result = new getData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompanyDepartment(AsyncCallback callback, object state, string companyId, Session session)
      {
        return send_getCompanyDepartment(callback, state, companyId, session);
      }

      public List<Department> End_getCompanyDepartment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompanyDepartment();
      }

      #endif

      public List<Department> getCompanyDepartment(string companyId, Session session)
      {
        #if !SILVERLIGHT
        send_getCompanyDepartment(companyId, session);
        return recv_getCompanyDepartment();

        #else
        var asyncResult = Begin_getCompanyDepartment(null, null, companyId, session);
        return End_getCompanyDepartment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompanyDepartment(AsyncCallback callback, object state, string companyId, Session session)
      #else
      public void send_getCompanyDepartment(string companyId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompanyDepartment", TMessageType.Call, seqid_));
        getCompanyDepartment_args args = new getCompanyDepartment_args();
        args.CompanyId = companyId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Department> recv_getCompanyDepartment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompanyDepartment_result result = new getCompanyDepartment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompanyDepartment failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompanyDepartmentEmployees(AsyncCallback callback, object state, string user, string companyId, Session session)
      {
        return send_getCompanyDepartmentEmployees(callback, state, user, companyId, session);
      }

      public List<Department> End_getCompanyDepartmentEmployees(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompanyDepartmentEmployees();
      }

      #endif

      public List<Department> getCompanyDepartmentEmployees(string user, string companyId, Session session)
      {
        #if !SILVERLIGHT
        send_getCompanyDepartmentEmployees(user, companyId, session);
        return recv_getCompanyDepartmentEmployees();

        #else
        var asyncResult = Begin_getCompanyDepartmentEmployees(null, null, user, companyId, session);
        return End_getCompanyDepartmentEmployees(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompanyDepartmentEmployees(AsyncCallback callback, object state, string user, string companyId, Session session)
      #else
      public void send_getCompanyDepartmentEmployees(string user, string companyId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompanyDepartmentEmployees", TMessageType.Call, seqid_));
        getCompanyDepartmentEmployees_args args = new getCompanyDepartmentEmployees_args();
        args.User = user;
        args.CompanyId = companyId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Department> recv_getCompanyDepartmentEmployees()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompanyDepartmentEmployees_result result = new getCompanyDepartmentEmployees_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompanyDepartmentEmployees failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getResignationRequest(AsyncCallback callback, object state, Employees employee, Session session)
      {
        return send_getResignationRequest(callback, state, employee, session);
      }

      public EmployeeList End_getResignationRequest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getResignationRequest();
      }

      #endif

      public EmployeeList getResignationRequest(Employees employee, Session session)
      {
        #if !SILVERLIGHT
        send_getResignationRequest(employee, session);
        return recv_getResignationRequest();

        #else
        var asyncResult = Begin_getResignationRequest(null, null, employee, session);
        return End_getResignationRequest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getResignationRequest(AsyncCallback callback, object state, Employees employee, Session session)
      #else
      public void send_getResignationRequest(Employees employee, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getResignationRequest", TMessageType.Call, seqid_));
        getResignationRequest_args args = new getResignationRequest_args();
        args.Employee = employee;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public EmployeeList recv_getResignationRequest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getResignationRequest_result result = new getResignationRequest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResignationRequest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_suggestSkills(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_suggestSkills(callback, state, skill, session);
      }

      public DbStatus End_suggestSkills(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_suggestSkills();
      }

      #endif

      public DbStatus suggestSkills(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_suggestSkills(skill, session);
        return recv_suggestSkills();

        #else
        var asyncResult = Begin_suggestSkills(null, null, skill, session);
        return End_suggestSkills(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_suggestSkills(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_suggestSkills(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("suggestSkills", TMessageType.Call, seqid_));
        suggestSkills_args args = new suggestSkills_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_suggestSkills()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        suggestSkills_result result = new suggestSkills_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "suggestSkills failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUnApprovedSkillSuggestions(AsyncCallback callback, object state, Skill skill, Session session)
      {
        return send_getUnApprovedSkillSuggestions(callback, state, skill, session);
      }

      public SkillResponse End_getUnApprovedSkillSuggestions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUnApprovedSkillSuggestions();
      }

      #endif

      public SkillResponse getUnApprovedSkillSuggestions(Skill skill, Session session)
      {
        #if !SILVERLIGHT
        send_getUnApprovedSkillSuggestions(skill, session);
        return recv_getUnApprovedSkillSuggestions();

        #else
        var asyncResult = Begin_getUnApprovedSkillSuggestions(null, null, skill, session);
        return End_getUnApprovedSkillSuggestions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUnApprovedSkillSuggestions(AsyncCallback callback, object state, Skill skill, Session session)
      #else
      public void send_getUnApprovedSkillSuggestions(Skill skill, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUnApprovedSkillSuggestions", TMessageType.Call, seqid_));
        getUnApprovedSkillSuggestions_args args = new getUnApprovedSkillSuggestions_args();
        args.Skill = skill;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkillResponse recv_getUnApprovedSkillSuggestions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUnApprovedSkillSuggestions_result result = new getUnApprovedSkillSuggestions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUnApprovedSkillSuggestions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getEmployeeWorkSchedule(AsyncCallback callback, object state, long personEmploymentId, Session session)
      {
        return send_getEmployeeWorkSchedule(callback, state, personEmploymentId, session);
      }

      public List<EmployeeWorkSchedule> End_getEmployeeWorkSchedule(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getEmployeeWorkSchedule();
      }

      #endif

      public List<EmployeeWorkSchedule> getEmployeeWorkSchedule(long personEmploymentId, Session session)
      {
        #if !SILVERLIGHT
        send_getEmployeeWorkSchedule(personEmploymentId, session);
        return recv_getEmployeeWorkSchedule();

        #else
        var asyncResult = Begin_getEmployeeWorkSchedule(null, null, personEmploymentId, session);
        return End_getEmployeeWorkSchedule(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getEmployeeWorkSchedule(AsyncCallback callback, object state, long personEmploymentId, Session session)
      #else
      public void send_getEmployeeWorkSchedule(long personEmploymentId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getEmployeeWorkSchedule", TMessageType.Call, seqid_));
        getEmployeeWorkSchedule_args args = new getEmployeeWorkSchedule_args();
        args.PersonEmploymentId = personEmploymentId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<EmployeeWorkSchedule> recv_getEmployeeWorkSchedule()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEmployeeWorkSchedule_result result = new getEmployeeWorkSchedule_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEmployeeWorkSchedule failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertCompanyEmployee(AsyncCallback callback, object state, CompanyEmployeeInfo companyEmpInfo, Session session)
      {
        return send_upsertCompanyEmployee(callback, state, companyEmpInfo, session);
      }

      public CompanyEmployeeInfoList End_upsertCompanyEmployee(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertCompanyEmployee();
      }

      #endif

      public CompanyEmployeeInfoList upsertCompanyEmployee(CompanyEmployeeInfo companyEmpInfo, Session session)
      {
        #if !SILVERLIGHT
        send_upsertCompanyEmployee(companyEmpInfo, session);
        return recv_upsertCompanyEmployee();

        #else
        var asyncResult = Begin_upsertCompanyEmployee(null, null, companyEmpInfo, session);
        return End_upsertCompanyEmployee(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertCompanyEmployee(AsyncCallback callback, object state, CompanyEmployeeInfo companyEmpInfo, Session session)
      #else
      public void send_upsertCompanyEmployee(CompanyEmployeeInfo companyEmpInfo, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertCompanyEmployee", TMessageType.Call, seqid_));
        upsertCompanyEmployee_args args = new upsertCompanyEmployee_args();
        args.CompanyEmpInfo = companyEmpInfo;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CompanyEmployeeInfoList recv_upsertCompanyEmployee()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertCompanyEmployee_result result = new upsertCompanyEmployee_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertCompanyEmployee failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompanyEmployee(AsyncCallback callback, object state, int userId, string employee, Session session)
      {
        return send_getCompanyEmployee(callback, state, userId, employee, session);
      }

      public List<CompanyEmployeeInfo> End_getCompanyEmployee(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompanyEmployee();
      }

      #endif

      public List<CompanyEmployeeInfo> getCompanyEmployee(int userId, string employee, Session session)
      {
        #if !SILVERLIGHT
        send_getCompanyEmployee(userId, employee, session);
        return recv_getCompanyEmployee();

        #else
        var asyncResult = Begin_getCompanyEmployee(null, null, userId, employee, session);
        return End_getCompanyEmployee(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompanyEmployee(AsyncCallback callback, object state, int userId, string employee, Session session)
      #else
      public void send_getCompanyEmployee(int userId, string employee, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompanyEmployee", TMessageType.Call, seqid_));
        getCompanyEmployee_args args = new getCompanyEmployee_args();
        args.UserId = userId;
        args.Employee = employee;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CompanyEmployeeInfo> recv_getCompanyEmployee()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompanyEmployee_result result = new getCompanyEmployee_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompanyEmployee failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCity(AsyncCallback callback, object state, int cityId, string searchText, Session session)
      {
        return send_getCity(callback, state, cityId, searchText, session);
      }

      public List<City> End_getCity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCity();
      }

      #endif

      public List<City> getCity(int cityId, string searchText, Session session)
      {
        #if !SILVERLIGHT
        send_getCity(cityId, searchText, session);
        return recv_getCity();

        #else
        var asyncResult = Begin_getCity(null, null, cityId, searchText, session);
        return End_getCity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCity(AsyncCallback callback, object state, int cityId, string searchText, Session session)
      #else
      public void send_getCity(int cityId, string searchText, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCity", TMessageType.Call, seqid_));
        getCity_args args = new getCity_args();
        args.CityId = cityId;
        args.SearchText = searchText;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<City> recv_getCity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCity_result result = new getCity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserAbout(AsyncCallback callback, object state, string username, Session session)
      {
        return send_getUserAbout(callback, state, username, session);
      }

      public UserInfo End_getUserAbout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserAbout();
      }

      #endif

      public UserInfo getUserAbout(string username, Session session)
      {
        #if !SILVERLIGHT
        send_getUserAbout(username, session);
        return recv_getUserAbout();

        #else
        var asyncResult = Begin_getUserAbout(null, null, username, session);
        return End_getUserAbout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserAbout(AsyncCallback callback, object state, string username, Session session)
      #else
      public void send_getUserAbout(string username, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserAbout", TMessageType.Call, seqid_));
        getUserAbout_args args = new getUserAbout_args();
        args.Username = username;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserInfo recv_getUserAbout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserAbout_result result = new getUserAbout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserAbout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateUserAbout(AsyncCallback callback, object state, string userIdorName, string headline, string about, Session session)
      {
        return send_updateUserAbout(callback, state, userIdorName, headline, about, session);
      }

      public DbStatus End_updateUserAbout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateUserAbout();
      }

      #endif

      public DbStatus updateUserAbout(string userIdorName, string headline, string about, Session session)
      {
        #if !SILVERLIGHT
        send_updateUserAbout(userIdorName, headline, about, session);
        return recv_updateUserAbout();

        #else
        var asyncResult = Begin_updateUserAbout(null, null, userIdorName, headline, about, session);
        return End_updateUserAbout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateUserAbout(AsyncCallback callback, object state, string userIdorName, string headline, string about, Session session)
      #else
      public void send_updateUserAbout(string userIdorName, string headline, string about, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateUserAbout", TMessageType.Call, seqid_));
        updateUserAbout_args args = new updateUserAbout_args();
        args.UserIdorName = userIdorName;
        args.Headline = headline;
        args.About = about;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_updateUserAbout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateUserAbout_result result = new updateUserAbout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateUserAbout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_respondEmpoymentRequest(AsyncCallback callback, object state, EmploymentRequest employmentRequest, Session session)
      {
        return send_respondEmpoymentRequest(callback, state, employmentRequest, session);
      }

      public EmploymentRequestResponse End_respondEmpoymentRequest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_respondEmpoymentRequest();
      }

      #endif

      public EmploymentRequestResponse respondEmpoymentRequest(EmploymentRequest employmentRequest, Session session)
      {
        #if !SILVERLIGHT
        send_respondEmpoymentRequest(employmentRequest, session);
        return recv_respondEmpoymentRequest();

        #else
        var asyncResult = Begin_respondEmpoymentRequest(null, null, employmentRequest, session);
        return End_respondEmpoymentRequest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_respondEmpoymentRequest(AsyncCallback callback, object state, EmploymentRequest employmentRequest, Session session)
      #else
      public void send_respondEmpoymentRequest(EmploymentRequest employmentRequest, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("respondEmpoymentRequest", TMessageType.Call, seqid_));
        respondEmpoymentRequest_args args = new respondEmpoymentRequest_args();
        args.EmploymentRequest = employmentRequest;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public EmploymentRequestResponse recv_respondEmpoymentRequest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        respondEmpoymentRequest_result result = new respondEmpoymentRequest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "respondEmpoymentRequest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_profileViewDetail(AsyncCallback callback, object state, ProfileView profileView, Session session)
      {
        return send_profileViewDetail(callback, state, profileView, session);
      }

      public ProfileViewResponse End_profileViewDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_profileViewDetail();
      }

      #endif

      public ProfileViewResponse profileViewDetail(ProfileView profileView, Session session)
      {
        #if !SILVERLIGHT
        send_profileViewDetail(profileView, session);
        return recv_profileViewDetail();

        #else
        var asyncResult = Begin_profileViewDetail(null, null, profileView, session);
        return End_profileViewDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_profileViewDetail(AsyncCallback callback, object state, ProfileView profileView, Session session)
      #else
      public void send_profileViewDetail(ProfileView profileView, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("profileViewDetail", TMessageType.Call, seqid_));
        profileViewDetail_args args = new profileViewDetail_args();
        args.ProfileView = profileView;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProfileViewResponse recv_profileViewDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        profileViewDetail_result result = new profileViewDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "profileViewDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_profileViewPanel(AsyncCallback callback, object state, ProfileView profileView, Session session)
      {
        return send_profileViewPanel(callback, state, profileView, session);
      }

      public ProfileViewResponse End_profileViewPanel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_profileViewPanel();
      }

      #endif

      public ProfileViewResponse profileViewPanel(ProfileView profileView, Session session)
      {
        #if !SILVERLIGHT
        send_profileViewPanel(profileView, session);
        return recv_profileViewPanel();

        #else
        var asyncResult = Begin_profileViewPanel(null, null, profileView, session);
        return End_profileViewPanel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_profileViewPanel(AsyncCallback callback, object state, ProfileView profileView, Session session)
      #else
      public void send_profileViewPanel(ProfileView profileView, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("profileViewPanel", TMessageType.Call, seqid_));
        profileViewPanel_args args = new profileViewPanel_args();
        args.ProfileView = profileView;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProfileViewResponse recv_profileViewPanel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        profileViewPanel_result result = new profileViewPanel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "profileViewPanel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_profileViewSummary(AsyncCallback callback, object state, ProfileView profileView, Session session)
      {
        return send_profileViewSummary(callback, state, profileView, session);
      }

      public ProfileViewResponse End_profileViewSummary(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_profileViewSummary();
      }

      #endif

      public ProfileViewResponse profileViewSummary(ProfileView profileView, Session session)
      {
        #if !SILVERLIGHT
        send_profileViewSummary(profileView, session);
        return recv_profileViewSummary();

        #else
        var asyncResult = Begin_profileViewSummary(null, null, profileView, session);
        return End_profileViewSummary(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_profileViewSummary(AsyncCallback callback, object state, ProfileView profileView, Session session)
      #else
      public void send_profileViewSummary(ProfileView profileView, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("profileViewSummary", TMessageType.Call, seqid_));
        profileViewSummary_args args = new profileViewSummary_args();
        args.ProfileView = profileView;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProfileViewResponse recv_profileViewSummary()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        profileViewSummary_result result = new profileViewSummary_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "profileViewSummary failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMutualFriends(AsyncCallback callback, object state, MutualFriend mf, Session session)
      {
        return send_getMutualFriends(callback, state, mf, session);
      }

      public MutualFriendResponse End_getMutualFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMutualFriends();
      }

      #endif

      public MutualFriendResponse getMutualFriends(MutualFriend mf, Session session)
      {
        #if !SILVERLIGHT
        send_getMutualFriends(mf, session);
        return recv_getMutualFriends();

        #else
        var asyncResult = Begin_getMutualFriends(null, null, mf, session);
        return End_getMutualFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMutualFriends(AsyncCallback callback, object state, MutualFriend mf, Session session)
      #else
      public void send_getMutualFriends(MutualFriend mf, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMutualFriends", TMessageType.Call, seqid_));
        getMutualFriends_args args = new getMutualFriends_args();
        args.Mf = mf;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MutualFriendResponse recv_getMutualFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMutualFriends_result result = new getMutualFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMutualFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserAvailability(AsyncCallback callback, object state, string userIdOrName, Session session)
      {
        return send_getUserAvailability(callback, state, userIdOrName, session);
      }

      public UserInfo End_getUserAvailability(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserAvailability();
      }

      #endif

      public UserInfo getUserAvailability(string userIdOrName, Session session)
      {
        #if !SILVERLIGHT
        send_getUserAvailability(userIdOrName, session);
        return recv_getUserAvailability();

        #else
        var asyncResult = Begin_getUserAvailability(null, null, userIdOrName, session);
        return End_getUserAvailability(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserAvailability(AsyncCallback callback, object state, string userIdOrName, Session session)
      #else
      public void send_getUserAvailability(string userIdOrName, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserAvailability", TMessageType.Call, seqid_));
        getUserAvailability_args args = new getUserAvailability_args();
        args.UserIdOrName = userIdOrName;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserInfo recv_getUserAvailability()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserAvailability_result result = new getUserAvailability_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserAvailability failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setStatus(AsyncCallback callback, object state, Status status, Session session)
      {
        return send_setStatus(callback, state, status, session);
      }

      public DbStatus End_setStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setStatus();
      }

      #endif

      public DbStatus setStatus(Status status, Session session)
      {
        #if !SILVERLIGHT
        send_setStatus(status, session);
        return recv_setStatus();

        #else
        var asyncResult = Begin_setStatus(null, null, status, session);
        return End_setStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setStatus(AsyncCallback callback, object state, Status status, Session session)
      #else
      public void send_setStatus(Status status, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setStatus", TMessageType.Call, seqid_));
        setStatus_args args = new setStatus_args();
        args.Status = status;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_setStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setStatus_result result = new setStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_activateUser(AsyncCallback callback, object state, string targetUser, string guid)
      {
        return send_activateUser(callback, state, targetUser, guid);
      }

      public DbStatus End_activateUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_activateUser();
      }

      #endif

      public DbStatus activateUser(string targetUser, string guid)
      {
        #if !SILVERLIGHT
        send_activateUser(targetUser, guid);
        return recv_activateUser();

        #else
        var asyncResult = Begin_activateUser(null, null, targetUser, guid);
        return End_activateUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_activateUser(AsyncCallback callback, object state, string targetUser, string guid)
      #else
      public void send_activateUser(string targetUser, string guid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("activateUser", TMessageType.Call, seqid_));
        activateUser_args args = new activateUser_args();
        args.TargetUser = targetUser;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_activateUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        activateUser_result result = new activateUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activateUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_signalView(AsyncCallback callback, object state, string viewer, string targetUser, int groupId, int viewType, int typeId, Session session)
      {
        return send_signalView(callback, state, viewer, targetUser, groupId, viewType, typeId, session);
      }

      public DbStatus End_signalView(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_signalView();
      }

      #endif

      public DbStatus signalView(string viewer, string targetUser, int groupId, int viewType, int typeId, Session session)
      {
        #if !SILVERLIGHT
        send_signalView(viewer, targetUser, groupId, viewType, typeId, session);
        return recv_signalView();

        #else
        var asyncResult = Begin_signalView(null, null, viewer, targetUser, groupId, viewType, typeId, session);
        return End_signalView(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_signalView(AsyncCallback callback, object state, string viewer, string targetUser, int groupId, int viewType, int typeId, Session session)
      #else
      public void send_signalView(string viewer, string targetUser, int groupId, int viewType, int typeId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("signalView", TMessageType.Call, seqid_));
        signalView_args args = new signalView_args();
        args.Viewer = viewer;
        args.TargetUser = targetUser;
        args.GroupId = groupId;
        args.ViewType = viewType;
        args.TypeId = typeId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_signalView()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        signalView_result result = new signalView_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "signalView failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getWebOnlyFriends(AsyncCallback callback, object state, WebOnlyFriend webOnlyFriend, Session session)
      {
        return send_getWebOnlyFriends(callback, state, webOnlyFriend, session);
      }

      public WebOnlyFriendResponse End_getWebOnlyFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getWebOnlyFriends();
      }

      #endif

      public WebOnlyFriendResponse getWebOnlyFriends(WebOnlyFriend webOnlyFriend, Session session)
      {
        #if !SILVERLIGHT
        send_getWebOnlyFriends(webOnlyFriend, session);
        return recv_getWebOnlyFriends();

        #else
        var asyncResult = Begin_getWebOnlyFriends(null, null, webOnlyFriend, session);
        return End_getWebOnlyFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getWebOnlyFriends(AsyncCallback callback, object state, WebOnlyFriend webOnlyFriend, Session session)
      #else
      public void send_getWebOnlyFriends(WebOnlyFriend webOnlyFriend, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getWebOnlyFriends", TMessageType.Call, seqid_));
        getWebOnlyFriends_args args = new getWebOnlyFriends_args();
        args.WebOnlyFriend = webOnlyFriend;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public WebOnlyFriendResponse recv_getWebOnlyFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getWebOnlyFriends_result result = new getWebOnlyFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getWebOnlyFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserFriendsInCategory(AsyncCallback callback, object state, UserCategory userCatagory, Session session)
      {
        return send_getUserFriendsInCategory(callback, state, userCatagory, session);
      }

      public List<UserInfo> End_getUserFriendsInCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserFriendsInCategory();
      }

      #endif

      public List<UserInfo> getUserFriendsInCategory(UserCategory userCatagory, Session session)
      {
        #if !SILVERLIGHT
        send_getUserFriendsInCategory(userCatagory, session);
        return recv_getUserFriendsInCategory();

        #else
        var asyncResult = Begin_getUserFriendsInCategory(null, null, userCatagory, session);
        return End_getUserFriendsInCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserFriendsInCategory(AsyncCallback callback, object state, UserCategory userCatagory, Session session)
      #else
      public void send_getUserFriendsInCategory(UserCategory userCatagory, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserFriendsInCategory", TMessageType.Call, seqid_));
        getUserFriendsInCategory_args args = new getUserFriendsInCategory_args();
        args.UserCatagory = userCatagory;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserInfo> recv_getUserFriendsInCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserFriendsInCategory_result result = new getUserFriendsInCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserFriendsInCategory failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Auth"] = Auth_Process;
        processMap_["RegisterUser"] = RegisterUser_Process;
        processMap_["RegisterBusinessUser"] = RegisterBusinessUser_Process;
        processMap_["Kill"] = Kill_Process;
        processMap_["FriendResponse"] = FriendResponse_Process;
        processMap_["FriendRequest"] = FriendRequest_Process;
        processMap_["UnFriend"] = UnFriend_Process;
        processMap_["mutualFriends"] = mutualFriends_Process;
        processMap_["mutualFriendsInGroup"] = mutualFriendsInGroup_Process;
        processMap_["getFriendShipStatus"] = getFriendShipStatus_Process;
        processMap_["getFriendList"] = getFriendList_Process;
        processMap_["getPendingFriendList"] = getPendingFriendList_Process;
        processMap_["getRequestToFriendList"] = getRequestToFriendList_Process;
        processMap_["createNewCategory"] = createNewCategory_Process;
        processMap_["removeFromCategory"] = removeFromCategory_Process;
        processMap_["updateListInCategory"] = updateListInCategory_Process;
        processMap_["insertInCategory"] = insertInCategory_Process;
        processMap_["deleteCategory"] = deleteCategory_Process;
        processMap_["deleteMultipleCategories"] = deleteMultipleCategories_Process;
        processMap_["editCategoryMeta"] = editCategoryMeta_Process;
        processMap_["categoryList"] = categoryList_Process;
        processMap_["getFriendsListForMobile"] = getFriendsListForMobile_Process;
        processMap_["getPendingFriendsForMobile"] = getPendingFriendsForMobile_Process;
        processMap_["getRequestedToFriendsForMobile"] = getRequestedToFriendsForMobile_Process;
        processMap_["getProfile"] = getProfile_Process;
        processMap_["updatePassword"] = updatePassword_Process;
        processMap_["contactSync"] = contactSync_Process;
        processMap_["getAllNotifications"] = getAllNotifications_Process;
        processMap_["basicSearch"] = basicSearch_Process;
        processMap_["getUserLoginInfo"] = getUserLoginInfo_Process;
        processMap_["getUserLoginInfoWithSession"] = getUserLoginInfoWithSession_Process;
        processMap_["getMyProfile"] = getMyProfile_Process;
        processMap_["saveUserProfilePic"] = saveUserProfilePic_Process;
        processMap_["verifyUser"] = verifyUser_Process;
        processMap_["forgotPasswordCode"] = forgotPasswordCode_Process;
        processMap_["resetPassword"] = resetPassword_Process;
        processMap_["getUserContactDetails"] = getUserContactDetails_Process;
        processMap_["setBasicContactPersion"] = setBasicContactPersion_Process;
        processMap_["setBusinessBaiscDetail"] = setBusinessBaiscDetail_Process;
        processMap_["setCompanyReview"] = setCompanyReview_Process;
        processMap_["setEmployeWorkSchedule"] = setEmployeWorkSchedule_Process;
        processMap_["upsertDepartment"] = upsertDepartment_Process;
        processMap_["upsertDepartmentEmployees"] = upsertDepartmentEmployees_Process;
        processMap_["upsertContacts"] = upsertContacts_Process;
        processMap_["upsertSuggestContacts"] = upsertSuggestContacts_Process;
        processMap_["viewCompanyEmployee"] = viewCompanyEmployee_Process;
        processMap_["getContactSuggestions"] = getContactSuggestions_Process;
        processMap_["respondContactSuggestion"] = respondContactSuggestion_Process;
        processMap_["getNotificationRequestCount"] = getNotificationRequestCount_Process;
        processMap_["upsertEmployeementHistory"] = upsertEmployeementHistory_Process;
        processMap_["getUserInfo"] = getUserInfo_Process;
        processMap_["getUsersInfo"] = getUsersInfo_Process;
        processMap_["getCompanyTree"] = getCompanyTree_Process;
        processMap_["getUserLanguages"] = getUserLanguages_Process;
        processMap_["upsertLanguage"] = upsertLanguage_Process;
        processMap_["getUserAwards"] = getUserAwards_Process;
        processMap_["upsertAwardAndHonor"] = upsertAwardAndHonor_Process;
        processMap_["getUserAcademics"] = getUserAcademics_Process;
        processMap_["viewEmploymentHistoryPerson"] = viewEmploymentHistoryPerson_Process;
        processMap_["getEmployeeRatings"] = getEmployeeRatings_Process;
        processMap_["getEmployees"] = getEmployees_Process;
        processMap_["getCompanyReviews"] = getCompanyReviews_Process;
        processMap_["upsertThumbsForSkill"] = upsertThumbsForSkill_Process;
        processMap_["thumbsForSkillDetails"] = thumbsForSkillDetails_Process;
        processMap_["acceptSkill"] = acceptSkill_Process;
        processMap_["upsertSkill"] = upsertSkill_Process;
        processMap_["getSkillSummary"] = getSkillSummary_Process;
        processMap_["getUserSkills"] = getUserSkills_Process;
        processMap_["upsertEmployeeRating"] = upsertEmployeeRating_Process;
        processMap_["upsertAcademic"] = upsertAcademic_Process;
        processMap_["getData"] = getData_Process;
        processMap_["getCompanyDepartment"] = getCompanyDepartment_Process;
        processMap_["getCompanyDepartmentEmployees"] = getCompanyDepartmentEmployees_Process;
        processMap_["getResignationRequest"] = getResignationRequest_Process;
        processMap_["suggestSkills"] = suggestSkills_Process;
        processMap_["getUnApprovedSkillSuggestions"] = getUnApprovedSkillSuggestions_Process;
        processMap_["getEmployeeWorkSchedule"] = getEmployeeWorkSchedule_Process;
        processMap_["upsertCompanyEmployee"] = upsertCompanyEmployee_Process;
        processMap_["getCompanyEmployee"] = getCompanyEmployee_Process;
        processMap_["getCity"] = getCity_Process;
        processMap_["getUserAbout"] = getUserAbout_Process;
        processMap_["updateUserAbout"] = updateUserAbout_Process;
        processMap_["respondEmpoymentRequest"] = respondEmpoymentRequest_Process;
        processMap_["profileViewDetail"] = profileViewDetail_Process;
        processMap_["profileViewPanel"] = profileViewPanel_Process;
        processMap_["profileViewSummary"] = profileViewSummary_Process;
        processMap_["getMutualFriends"] = getMutualFriends_Process;
        processMap_["getUserAvailability"] = getUserAvailability_Process;
        processMap_["setStatus"] = setStatus_Process;
        processMap_["activateUser"] = activateUser_Process;
        processMap_["signalView"] = signalView_Process;
        processMap_["getWebOnlyFriends"] = getWebOnlyFriends_Process;
        processMap_["getUserFriendsInCategory"] = getUserFriendsInCategory_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Auth_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Auth_args args = new Auth_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Auth_result result = new Auth_result();
        try {
          result.Success = iface_.Auth(args.User);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Auth", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RegisterUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterUser_args args = new RegisterUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterUser_result result = new RegisterUser_result();
        try {
          result.Success = iface_.RegisterUser(args.User);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("RegisterUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RegisterBusinessUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterBusinessUser_args args = new RegisterBusinessUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterBusinessUser_result result = new RegisterBusinessUser_result();
        try {
          result.Success = iface_.RegisterBusinessUser(args.User);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("RegisterBusinessUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Kill_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Kill_args args = new Kill_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Kill_result result = new Kill_result();
        try {
          result.Success = iface_.Kill(args.User);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Kill", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendResponse_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendResponse_args args = new FriendResponse_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendResponse_result result = new FriendResponse_result();
        try {
          result.Success = iface_.FriendResponse(args.UserId, args.FriendId, args.CategoryId, args.Accepted, args.Session, args.FriendUsername);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("FriendResponse", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendRequest_args args = new FriendRequest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendRequest_result result = new FriendRequest_result();
        try {
          result.Success = iface_.FriendRequest(args.UserId, args.FriendId, args.CategoryId, args.Session, args.FriendUsername);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("FriendRequest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnFriend_args args = new UnFriend_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnFriend_result result = new UnFriend_result();
        try {
          result.Success = iface_.UnFriend(args.UserId, args.FriendId, args.Session, args.FriendUsername);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("UnFriend", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutualFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutualFriends_args args = new mutualFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutualFriends_result result = new mutualFriends_result();
        try {
          result.Success = iface_.mutualFriends(args.UserId, args.FriendId, args.PageIndex, args.PageSize, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("mutualFriends", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutualFriendsInGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutualFriendsInGroup_args args = new mutualFriendsInGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutualFriendsInGroup_result result = new mutualFriendsInGroup_result();
        try {
          result.Success = iface_.mutualFriendsInGroup(args.UserId, args.GroupId, args.PageIndex, args.PageSize, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("mutualFriendsInGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFriendShipStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFriendShipStatus_args args = new getFriendShipStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFriendShipStatus_result result = new getFriendShipStatus_result();
        try {
          result.Success = iface_.getFriendShipStatus(args.UserId, args.FriendId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getFriendShipStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFriendList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFriendList_args args = new getFriendList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFriendList_result result = new getFriendList_result();
        try {
          result.Success = iface_.getFriendList(args.UserId, args.PageIndex, args.PageSize, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getFriendList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPendingFriendList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPendingFriendList_args args = new getPendingFriendList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPendingFriendList_result result = new getPendingFriendList_result();
        try {
          result.Success = iface_.getPendingFriendList(args.UserId, args.PageIndex, args.PageSize, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getPendingFriendList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRequestToFriendList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRequestToFriendList_args args = new getRequestToFriendList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRequestToFriendList_result result = new getRequestToFriendList_result();
        try {
          result.Success = iface_.getRequestToFriendList(args.UserId, args.PageIndex, args.PageSize, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getRequestToFriendList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createNewCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createNewCategory_args args = new createNewCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createNewCategory_result result = new createNewCategory_result();
        try {
          result.Success = iface_.createNewCategory(args.UserCategory, args.FriendIDs, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("createNewCategory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeFromCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeFromCategory_args args = new removeFromCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeFromCategory_result result = new removeFromCategory_result();
        try {
          result.Success = iface_.removeFromCategory(args.UserCategory, args.FriendIDs, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("removeFromCategory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateListInCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateListInCategory_args args = new updateListInCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateListInCategory_result result = new updateListInCategory_result();
        try {
          result.Success = iface_.updateListInCategory(args.UserCategory, args.FriendIDs, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updateListInCategory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void insertInCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        insertInCategory_args args = new insertInCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        insertInCategory_result result = new insertInCategory_result();
        try {
          result.Success = iface_.insertInCategory(args.UserCategory, args.FriendIDs, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("insertInCategory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteCategory_args args = new deleteCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteCategory_result result = new deleteCategory_result();
        try {
          result.Success = iface_.deleteCategory(args.UserCategory, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("deleteCategory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteMultipleCategories_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteMultipleCategories_args args = new deleteMultipleCategories_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteMultipleCategories_result result = new deleteMultipleCategories_result();
        try {
          result.Success = iface_.deleteMultipleCategories(args.UserId, args.CategoryIds, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("deleteMultipleCategories", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void editCategoryMeta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        editCategoryMeta_args args = new editCategoryMeta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        editCategoryMeta_result result = new editCategoryMeta_result();
        try {
          result.Success = iface_.editCategoryMeta(args.UserCategory, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("editCategoryMeta", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void categoryList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        categoryList_args args = new categoryList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        categoryList_result result = new categoryList_result();
        try {
          result.Success = iface_.categoryList(args.UserId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("categoryList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFriendsListForMobile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFriendsListForMobile_args args = new getFriendsListForMobile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFriendsListForMobile_result result = new getFriendsListForMobile_result();
        try {
          result.Success = iface_.getFriendsListForMobile(args.UserId, args.DeviceId, args.CTag, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getFriendsListForMobile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPendingFriendsForMobile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPendingFriendsForMobile_args args = new getPendingFriendsForMobile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPendingFriendsForMobile_result result = new getPendingFriendsForMobile_result();
        try {
          result.Success = iface_.getPendingFriendsForMobile(args.UserId, args.DeviceId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getPendingFriendsForMobile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRequestedToFriendsForMobile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRequestedToFriendsForMobile_args args = new getRequestedToFriendsForMobile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRequestedToFriendsForMobile_result result = new getRequestedToFriendsForMobile_result();
        try {
          result.Success = iface_.getRequestedToFriendsForMobile(args.UserId, args.DeviceId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getRequestedToFriendsForMobile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProfile_args args = new getProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProfile_result result = new getProfile_result();
        try {
          result.Success = iface_.getProfile(args.UserId, args.TargetId, args.Username, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updatePassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updatePassword_args args = new updatePassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updatePassword_result result = new updatePassword_result();
        try {
          result.Success = iface_.updatePassword(args.OldPassword, args.NewPassword, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updatePassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void contactSync_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        contactSync_args args = new contactSync_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        contactSync_result result = new contactSync_result();
        try {
          result.Success = iface_.contactSync(args.UserMobileContacts, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("contactSync", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllNotifications_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllNotifications_args args = new getAllNotifications_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllNotifications_result result = new getAllNotifications_result();
        try {
          result.Success = iface_.getAllNotifications(args.NotificationMob, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getAllNotifications", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void basicSearch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        basicSearch_args args = new basicSearch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        basicSearch_result result = new basicSearch_result();
        try {
          result.Success = iface_.basicSearch(args.BasicSearch, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("basicSearch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserLoginInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserLoginInfo_args args = new getUserLoginInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserLoginInfo_result result = new getUserLoginInfo_result();
        try {
          result.Success = iface_.getUserLoginInfo(args.UserNameEmail);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserLoginInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserLoginInfoWithSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserLoginInfoWithSession_args args = new getUserLoginInfoWithSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserLoginInfoWithSession_result result = new getUserLoginInfoWithSession_result();
        try {
          result.Success = iface_.getUserLoginInfoWithSession(args.UserNameEmail, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserLoginInfoWithSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMyProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMyProfile_args args = new getMyProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMyProfile_result result = new getMyProfile_result();
        try {
          result.Success = iface_.getMyProfile(args.Username);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getMyProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveUserProfilePic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveUserProfilePic_args args = new saveUserProfilePic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveUserProfilePic_result result = new saveUserProfilePic_result();
        try {
          result.Success = iface_.saveUserProfilePic(args.Username, args.FileId);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("saveUserProfilePic", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void verifyUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        verifyUser_args args = new verifyUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        verifyUser_result result = new verifyUser_result();
        try {
          result.Success = iface_.verifyUser(args.UsernameEmail);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("verifyUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void forgotPasswordCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        forgotPasswordCode_args args = new forgotPasswordCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        forgotPasswordCode_result result = new forgotPasswordCode_result();
        try {
          result.Success = iface_.forgotPasswordCode(args.User);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("forgotPasswordCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resetPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resetPassword_args args = new resetPassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resetPassword_result result = new resetPassword_result();
        try {
          result.Success = iface_.resetPassword(args.Code, args.Password);
        } catch (UserException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("resetPassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserContactDetails_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserContactDetails_args args = new getUserContactDetails_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserContactDetails_result result = new getUserContactDetails_result();
        try {
          result.Success = iface_.getUserContactDetails(args.UserId, args.TargetUserNameId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserContactDetails", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setBasicContactPersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setBasicContactPersion_args args = new setBasicContactPersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setBasicContactPersion_result result = new setBasicContactPersion_result();
        try {
          result.Success = iface_.setBasicContactPersion(args.Userinfo, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("setBasicContactPersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setBusinessBaiscDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setBusinessBaiscDetail_args args = new setBusinessBaiscDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setBusinessBaiscDetail_result result = new setBusinessBaiscDetail_result();
        try {
          result.Success = iface_.setBusinessBaiscDetail(args.Details, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("setBusinessBaiscDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setCompanyReview_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setCompanyReview_args args = new setCompanyReview_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setCompanyReview_result result = new setCompanyReview_result();
        try {
          result.Success = iface_.setCompanyReview(args.Review, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("setCompanyReview", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setEmployeWorkSchedule_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setEmployeWorkSchedule_args args = new setEmployeWorkSchedule_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setEmployeWorkSchedule_result result = new setEmployeWorkSchedule_result();
        try {
          result.Success = iface_.setEmployeWorkSchedule(args.Schedule, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("setEmployeWorkSchedule", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertDepartment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertDepartment_args args = new upsertDepartment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertDepartment_result result = new upsertDepartment_result();
        try {
          result.Success = iface_.upsertDepartment(args.Department, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertDepartment", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertDepartmentEmployees_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertDepartmentEmployees_args args = new upsertDepartmentEmployees_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertDepartmentEmployees_result result = new upsertDepartmentEmployees_result();
        try {
          result.Success = iface_.upsertDepartmentEmployees(args.DepartmentEmployees, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertDepartmentEmployees", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertContacts_args args = new upsertContacts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertContacts_result result = new upsertContacts_result();
        try {
          result.Success = iface_.upsertContacts(args.UserContactDetails, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertSuggestContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertSuggestContacts_args args = new upsertSuggestContacts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertSuggestContacts_result result = new upsertSuggestContacts_result();
        try {
          result.Success = iface_.upsertSuggestContacts(args.TargetId, args.UserContactDetails, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertSuggestContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void viewCompanyEmployee_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        viewCompanyEmployee_args args = new viewCompanyEmployee_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        viewCompanyEmployee_result result = new viewCompanyEmployee_result();
        try {
          result.Success = iface_.viewCompanyEmployee(args.User, args.SearchTerm, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("viewCompanyEmployee", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getContactSuggestions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getContactSuggestions_args args = new getContactSuggestions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getContactSuggestions_result result = new getContactSuggestions_result();
        try {
          result.Success = iface_.getContactSuggestions(args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getContactSuggestions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void respondContactSuggestion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        respondContactSuggestion_args args = new respondContactSuggestion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        respondContactSuggestion_result result = new respondContactSuggestion_result();
        try {
          result.Success = iface_.respondContactSuggestion(args.ContactCustomId, args.Mode, args.Sesion);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("respondContactSuggestion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNotificationRequestCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNotificationRequestCount_args args = new getNotificationRequestCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNotificationRequestCount_result result = new getNotificationRequestCount_result();
        try {
          result.Success = iface_.getNotificationRequestCount(args.NRTypeIds, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getNotificationRequestCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertEmployeementHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertEmployeementHistory_args args = new upsertEmployeementHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertEmployeementHistory_result result = new upsertEmployeementHistory_result();
        try {
          result.Success = iface_.upsertEmployeementHistory(args.Employement, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertEmployeementHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserInfo_args args = new getUserInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserInfo_result result = new getUserInfo_result();
        try {
          result.Success = iface_.getUserInfo(args.UserNameId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUsersInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUsersInfo_args args = new getUsersInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUsersInfo_result result = new getUsersInfo_result();
        try {
          result.Success = iface_.getUsersInfo(args.Users, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUsersInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompanyTree_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompanyTree_args args = new getCompanyTree_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompanyTree_result result = new getCompanyTree_result();
        try {
          result.Success = iface_.getCompanyTree(args.CompanyTree, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getCompanyTree", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserLanguages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserLanguages_args args = new getUserLanguages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserLanguages_result result = new getUserLanguages_result();
        try {
          result.Success = iface_.getUserLanguages(args.UserId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserLanguages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertLanguage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertLanguage_args args = new upsertLanguage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertLanguage_result result = new upsertLanguage_result();
        try {
          result.Success = iface_.upsertLanguage(args.UserIdOrName, args.Text, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertLanguage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserAwards_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserAwards_args args = new getUserAwards_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserAwards_result result = new getUserAwards_result();
        try {
          result.Success = iface_.getUserAwards(args.UserId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserAwards", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertAwardAndHonor_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertAwardAndHonor_args args = new upsertAwardAndHonor_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertAwardAndHonor_result result = new upsertAwardAndHonor_result();
        try {
          result.Success = iface_.upsertAwardAndHonor(args.AwardAndHonor, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertAwardAndHonor", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserAcademics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserAcademics_args args = new getUserAcademics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserAcademics_result result = new getUserAcademics_result();
        try {
          result.Success = iface_.getUserAcademics(args.UserId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserAcademics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void viewEmploymentHistoryPerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        viewEmploymentHistoryPerson_args args = new viewEmploymentHistoryPerson_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        viewEmploymentHistoryPerson_result result = new viewEmploymentHistoryPerson_result();
        try {
          result.Success = iface_.viewEmploymentHistoryPerson(args.UserId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("viewEmploymentHistoryPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEmployeeRatings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEmployeeRatings_args args = new getEmployeeRatings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEmployeeRatings_result result = new getEmployeeRatings_result();
        try {
          result.Success = iface_.getEmployeeRatings(args.EmployeeRatings, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getEmployeeRatings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEmployees_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEmployees_args args = new getEmployees_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEmployees_result result = new getEmployees_result();
        try {
          result.Success = iface_.getEmployees(args.Employees, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getEmployees", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompanyReviews_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompanyReviews_args args = new getCompanyReviews_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompanyReviews_result result = new getCompanyReviews_result();
        try {
          result.Success = iface_.getCompanyReviews(args.CompanyReview, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getCompanyReviews", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertThumbsForSkill_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertThumbsForSkill_args args = new upsertThumbsForSkill_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertThumbsForSkill_result result = new upsertThumbsForSkill_result();
        try {
          result.Success = iface_.upsertThumbsForSkill(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertThumbsForSkill", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void thumbsForSkillDetails_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        thumbsForSkillDetails_args args = new thumbsForSkillDetails_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        thumbsForSkillDetails_result result = new thumbsForSkillDetails_result();
        try {
          result.Success = iface_.thumbsForSkillDetails(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("thumbsForSkillDetails", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void acceptSkill_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acceptSkill_args args = new acceptSkill_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acceptSkill_result result = new acceptSkill_result();
        try {
          result.Success = iface_.acceptSkill(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("acceptSkill", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertSkill_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertSkill_args args = new upsertSkill_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertSkill_result result = new upsertSkill_result();
        try {
          result.Success = iface_.upsertSkill(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertSkill", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSkillSummary_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSkillSummary_args args = new getSkillSummary_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSkillSummary_result result = new getSkillSummary_result();
        try {
          result.Success = iface_.getSkillSummary(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getSkillSummary", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserSkills_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserSkills_args args = new getUserSkills_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserSkills_result result = new getUserSkills_result();
        try {
          result.Success = iface_.getUserSkills(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserSkills", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertEmployeeRating_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertEmployeeRating_args args = new upsertEmployeeRating_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertEmployeeRating_result result = new upsertEmployeeRating_result();
        try {
          result.Success = iface_.upsertEmployeeRating(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertEmployeeRating", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertAcademic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertAcademic_args args = new upsertAcademic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertAcademic_result result = new upsertAcademic_result();
        try {
          result.Success = iface_.upsertAcademic(args.UserAcademic, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertAcademic", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getData_args args = new getData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getData_result result = new getData_result();
        try {
          result.Success = iface_.getData(args.GetDataParam, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompanyDepartment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompanyDepartment_args args = new getCompanyDepartment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompanyDepartment_result result = new getCompanyDepartment_result();
        try {
          result.Success = iface_.getCompanyDepartment(args.CompanyId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getCompanyDepartment", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompanyDepartmentEmployees_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompanyDepartmentEmployees_args args = new getCompanyDepartmentEmployees_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompanyDepartmentEmployees_result result = new getCompanyDepartmentEmployees_result();
        try {
          result.Success = iface_.getCompanyDepartmentEmployees(args.User, args.CompanyId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getCompanyDepartmentEmployees", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getResignationRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getResignationRequest_args args = new getResignationRequest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getResignationRequest_result result = new getResignationRequest_result();
        try {
          result.Success = iface_.getResignationRequest(args.Employee, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getResignationRequest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void suggestSkills_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        suggestSkills_args args = new suggestSkills_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        suggestSkills_result result = new suggestSkills_result();
        try {
          result.Success = iface_.suggestSkills(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("suggestSkills", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUnApprovedSkillSuggestions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUnApprovedSkillSuggestions_args args = new getUnApprovedSkillSuggestions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUnApprovedSkillSuggestions_result result = new getUnApprovedSkillSuggestions_result();
        try {
          result.Success = iface_.getUnApprovedSkillSuggestions(args.Skill, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUnApprovedSkillSuggestions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEmployeeWorkSchedule_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEmployeeWorkSchedule_args args = new getEmployeeWorkSchedule_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEmployeeWorkSchedule_result result = new getEmployeeWorkSchedule_result();
        try {
          result.Success = iface_.getEmployeeWorkSchedule(args.PersonEmploymentId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getEmployeeWorkSchedule", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertCompanyEmployee_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertCompanyEmployee_args args = new upsertCompanyEmployee_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertCompanyEmployee_result result = new upsertCompanyEmployee_result();
        try {
          result.Success = iface_.upsertCompanyEmployee(args.CompanyEmpInfo, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertCompanyEmployee", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompanyEmployee_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompanyEmployee_args args = new getCompanyEmployee_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompanyEmployee_result result = new getCompanyEmployee_result();
        try {
          result.Success = iface_.getCompanyEmployee(args.UserId, args.Employee, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getCompanyEmployee", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCity_args args = new getCity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCity_result result = new getCity_result();
        try {
          result.Success = iface_.getCity(args.CityId, args.SearchText, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getCity", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserAbout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserAbout_args args = new getUserAbout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserAbout_result result = new getUserAbout_result();
        try {
          result.Success = iface_.getUserAbout(args.Username, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserAbout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateUserAbout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateUserAbout_args args = new updateUserAbout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateUserAbout_result result = new updateUserAbout_result();
        try {
          result.Success = iface_.updateUserAbout(args.UserIdorName, args.Headline, args.About, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updateUserAbout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void respondEmpoymentRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        respondEmpoymentRequest_args args = new respondEmpoymentRequest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        respondEmpoymentRequest_result result = new respondEmpoymentRequest_result();
        try {
          result.Success = iface_.respondEmpoymentRequest(args.EmploymentRequest, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("respondEmpoymentRequest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void profileViewDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        profileViewDetail_args args = new profileViewDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        profileViewDetail_result result = new profileViewDetail_result();
        try {
          result.Success = iface_.profileViewDetail(args.ProfileView, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("profileViewDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void profileViewPanel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        profileViewPanel_args args = new profileViewPanel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        profileViewPanel_result result = new profileViewPanel_result();
        try {
          result.Success = iface_.profileViewPanel(args.ProfileView, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("profileViewPanel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void profileViewSummary_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        profileViewSummary_args args = new profileViewSummary_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        profileViewSummary_result result = new profileViewSummary_result();
        try {
          result.Success = iface_.profileViewSummary(args.ProfileView, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("profileViewSummary", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMutualFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMutualFriends_args args = new getMutualFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMutualFriends_result result = new getMutualFriends_result();
        try {
          result.Success = iface_.getMutualFriends(args.Mf, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getMutualFriends", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserAvailability_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserAvailability_args args = new getUserAvailability_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserAvailability_result result = new getUserAvailability_result();
        try {
          result.Success = iface_.getUserAvailability(args.UserIdOrName, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserAvailability", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setStatus_args args = new setStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setStatus_result result = new setStatus_result();
        try {
          result.Success = iface_.setStatus(args.Status, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("setStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void activateUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        activateUser_args args = new activateUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        activateUser_result result = new activateUser_result();
        try {
          result.Success = iface_.activateUser(args.TargetUser, args.Guid);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("activateUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void signalView_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        signalView_args args = new signalView_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        signalView_result result = new signalView_result();
        try {
          result.Success = iface_.signalView(args.Viewer, args.TargetUser, args.GroupId, args.ViewType, args.TypeId, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("signalView", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getWebOnlyFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getWebOnlyFriends_args args = new getWebOnlyFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getWebOnlyFriends_result result = new getWebOnlyFriends_result();
        try {
          result.Success = iface_.getWebOnlyFriends(args.WebOnlyFriend, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getWebOnlyFriends", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserFriendsInCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserFriendsInCategory_args args = new getUserFriendsInCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserFriendsInCategory_result result = new getUserFriendsInCategory_result();
        try {
          result.Success = iface_.getUserFriendsInCategory(args.UserCatagory, args.Session);
        } catch (UserException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserFriendsInCategory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Auth_args : TBase
    {
      private User _user;

      public User User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
      }

      public Auth_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                User = new User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Auth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Auth_args(");
        bool __first = true;
        if (User != null && __isset.user) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("User: ");
          __sb.Append(User== null ? "<null>" : User.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Auth_result : TBase
    {
      private User _success;
      private UserException _ex;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public Auth_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Auth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Auth_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterUser_args : TBase
    {
      private User _user;

      public User User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
      }

      public RegisterUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                User = new User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterUser_args(");
        bool __first = true;
        if (User != null && __isset.user) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("User: ");
          __sb.Append(User== null ? "<null>" : User.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterUser_result : TBase
    {
      private User _success;
      private UserException _ex;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public RegisterUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterBusinessUser_args : TBase
    {
      private User _user;

      public User User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
      }

      public RegisterBusinessUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                User = new User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterBusinessUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterBusinessUser_args(");
        bool __first = true;
        if (User != null && __isset.user) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("User: ");
          __sb.Append(User== null ? "<null>" : User.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterBusinessUser_result : TBase
    {
      private User _success;
      private UserException _ex;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public RegisterBusinessUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterBusinessUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterBusinessUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Kill_args : TBase
    {
      private User _user;

      public User User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
      }

      public Kill_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                User = new User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Kill_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Kill_args(");
        bool __first = true;
        if (User != null && __isset.user) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("User: ");
          __sb.Append(User== null ? "<null>" : User.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Kill_result : TBase
    {
      private bool _success;
      private UserException _ex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public Kill_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Kill_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Kill_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendResponse_args : TBase
    {
      private string _userId;
      private string _friendId;
      private int _categoryId;
      private bool _accepted;
      private Session _session;
      private string _friendUsername;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public int CategoryId
      {
        get
        {
          return _categoryId;
        }
        set
        {
          __isset.categoryId = true;
          this._categoryId = value;
        }
      }

      public bool Accepted
      {
        get
        {
          return _accepted;
        }
        set
        {
          __isset.accepted = true;
          this._accepted = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public string FriendUsername
      {
        get
        {
          return _friendUsername;
        }
        set
        {
          __isset.friendUsername = true;
          this._friendUsername = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool friendId;
        public bool categoryId;
        public bool accepted;
        public bool session;
        public bool friendUsername;
      }

      public FriendResponse_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FriendId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                CategoryId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Accepted = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                FriendUsername = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FriendResponse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (FriendId != null && __isset.friendId) {
          field.Name = "friendId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendId);
          oprot.WriteFieldEnd();
        }
        if (__isset.categoryId) {
          field.Name = "categoryId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CategoryId);
          oprot.WriteFieldEnd();
        }
        if (__isset.accepted) {
          field.Name = "accepted";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Accepted);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FriendUsername != null && __isset.friendUsername) {
          field.Name = "friendUsername";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendUsername);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendResponse_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (FriendId != null && __isset.friendId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendId: ");
          __sb.Append(FriendId);
        }
        if (__isset.categoryId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CategoryId: ");
          __sb.Append(CategoryId);
        }
        if (__isset.accepted) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Accepted: ");
          __sb.Append(Accepted);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        if (FriendUsername != null && __isset.friendUsername) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendUsername: ");
          __sb.Append(FriendUsername);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendResponse_result : TBase
    {
      private Friend _success;
      private UserException _ex;
      private SessionException _se;

      public Friend Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public FriendResponse_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Friend();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FriendResponse_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendResponse_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRequest_args : TBase
    {
      private string _userId;
      private string _friendId;
      private int _categoryId;
      private Session _session;
      private string _friendUsername;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public int CategoryId
      {
        get
        {
          return _categoryId;
        }
        set
        {
          __isset.categoryId = true;
          this._categoryId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public string FriendUsername
      {
        get
        {
          return _friendUsername;
        }
        set
        {
          __isset.friendUsername = true;
          this._friendUsername = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool friendId;
        public bool categoryId;
        public bool session;
        public bool friendUsername;
      }

      public FriendRequest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FriendId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                CategoryId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                FriendUsername = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FriendRequest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (FriendId != null && __isset.friendId) {
          field.Name = "friendId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendId);
          oprot.WriteFieldEnd();
        }
        if (__isset.categoryId) {
          field.Name = "categoryId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CategoryId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FriendUsername != null && __isset.friendUsername) {
          field.Name = "friendUsername";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendUsername);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRequest_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (FriendId != null && __isset.friendId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendId: ");
          __sb.Append(FriendId);
        }
        if (__isset.categoryId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CategoryId: ");
          __sb.Append(CategoryId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        if (FriendUsername != null && __isset.friendUsername) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendUsername: ");
          __sb.Append(FriendUsername);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRequest_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public FriendRequest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FriendRequest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRequest_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnFriend_args : TBase
    {
      private string _userId;
      private string _friendId;
      private Session _session;
      private string _friendUsername;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public string FriendUsername
      {
        get
        {
          return _friendUsername;
        }
        set
        {
          __isset.friendUsername = true;
          this._friendUsername = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool friendId;
        public bool session;
        public bool friendUsername;
      }

      public UnFriend_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FriendId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                FriendUsername = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnFriend_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (FriendId != null && __isset.friendId) {
          field.Name = "friendId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FriendUsername != null && __isset.friendUsername) {
          field.Name = "friendUsername";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendUsername);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnFriend_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (FriendId != null && __isset.friendId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendId: ");
          __sb.Append(FriendId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        if (FriendUsername != null && __isset.friendUsername) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendUsername: ");
          __sb.Append(FriendUsername);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnFriend_result : TBase
    {
      private Friend _success;
      private UserException _ex;
      private SessionException _se;

      public Friend Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public UnFriend_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Friend();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnFriend_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnFriend_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutualFriends_args : TBase
    {
      private int _userId;
      private int _friendId;
      private short _pageIndex;
      private short _pageSize;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public int FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public short PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          this._pageIndex = value;
        }
      }

      public short PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool friendId;
        public bool pageIndex;
        public bool pageSize;
        public bool session;
      }

      public mutualFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                FriendId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                PageIndex = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I16) {
                PageSize = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutualFriends_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.friendId) {
          field.Name = "friendId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FriendId);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I16;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageSize);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutualFriends_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.friendId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendId: ");
          __sb.Append(FriendId);
        }
        if (__isset.pageIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageIndex: ");
          __sb.Append(PageIndex);
        }
        if (__isset.pageSize) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageSize: ");
          __sb.Append(PageSize);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutualFriends_result : TBase
    {
      private List<Friend> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Friend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public mutualFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Friend>();
                  TList _list144 = iprot.ReadListBegin();
                  for( int _i145 = 0; _i145 < _list144.Count; ++_i145)
                  {
                    Friend _elem146;
                    _elem146 = new Friend();
                    _elem146.Read(iprot);
                    Success.Add(_elem146);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutualFriends_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Friend _iter147 in Success)
              {
                _iter147.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutualFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutualFriendsInGroup_args : TBase
    {
      private int _userId;
      private int _groupId;
      private short _pageIndex;
      private short _pageSize;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public int GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public short PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          this._pageIndex = value;
        }
      }

      public short PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool pageIndex;
        public bool pageSize;
        public bool session;
      }

      public mutualFriendsInGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                GroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                PageIndex = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I16) {
                PageSize = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutualFriendsInGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GroupId);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I16;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageSize);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutualFriendsInGroup_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.pageIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageIndex: ");
          __sb.Append(PageIndex);
        }
        if (__isset.pageSize) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageSize: ");
          __sb.Append(PageSize);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutualFriendsInGroup_result : TBase
    {
      private List<Friend> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Friend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public mutualFriendsInGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Friend>();
                  TList _list148 = iprot.ReadListBegin();
                  for( int _i149 = 0; _i149 < _list148.Count; ++_i149)
                  {
                    Friend _elem150;
                    _elem150 = new Friend();
                    _elem150.Read(iprot);
                    Success.Add(_elem150);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutualFriendsInGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Friend _iter151 in Success)
              {
                _iter151.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutualFriendsInGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendShipStatus_args : TBase
    {
      private int _userId;
      private int _friendId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public int FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool friendId;
        public bool session;
      }

      public getFriendShipStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                FriendId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFriendShipStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.friendId) {
          field.Name = "friendId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FriendId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendShipStatus_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.friendId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendId: ");
          __sb.Append(FriendId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendShipStatus_result : TBase
    {
      private int _success;
      private UserException _ex;
      private SessionException _se;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getFriendShipStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFriendShipStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendShipStatus_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendList_args : TBase
    {
      private int _userId;
      private short _pageIndex;
      private short _pageSize;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public short PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          this._pageIndex = value;
        }
      }

      public short PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool pageIndex;
        public bool pageSize;
        public bool session;
      }

      public getFriendList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                PageIndex = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                PageSize = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFriendList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I16;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageSize);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendList_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.pageIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageIndex: ");
          __sb.Append(PageIndex);
        }
        if (__isset.pageSize) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageSize: ");
          __sb.Append(PageSize);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendList_result : TBase
    {
      private List<Friend> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Friend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getFriendList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Friend>();
                  TList _list152 = iprot.ReadListBegin();
                  for( int _i153 = 0; _i153 < _list152.Count; ++_i153)
                  {
                    Friend _elem154;
                    _elem154 = new Friend();
                    _elem154.Read(iprot);
                    Success.Add(_elem154);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFriendList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Friend _iter155 in Success)
              {
                _iter155.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPendingFriendList_args : TBase
    {
      private int _userId;
      private short _pageIndex;
      private short _pageSize;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public short PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          this._pageIndex = value;
        }
      }

      public short PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool pageIndex;
        public bool pageSize;
        public bool session;
      }

      public getPendingFriendList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                PageIndex = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                PageSize = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPendingFriendList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I16;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageSize);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPendingFriendList_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.pageIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageIndex: ");
          __sb.Append(PageIndex);
        }
        if (__isset.pageSize) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageSize: ");
          __sb.Append(PageSize);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPendingFriendList_result : TBase
    {
      private List<Friend> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Friend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getPendingFriendList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Friend>();
                  TList _list156 = iprot.ReadListBegin();
                  for( int _i157 = 0; _i157 < _list156.Count; ++_i157)
                  {
                    Friend _elem158;
                    _elem158 = new Friend();
                    _elem158.Read(iprot);
                    Success.Add(_elem158);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPendingFriendList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Friend _iter159 in Success)
              {
                _iter159.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPendingFriendList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRequestToFriendList_args : TBase
    {
      private int _userId;
      private short _pageIndex;
      private short _pageSize;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public short PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          this._pageIndex = value;
        }
      }

      public short PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool pageIndex;
        public bool pageSize;
        public bool session;
      }

      public getRequestToFriendList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                PageIndex = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                PageSize = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRequestToFriendList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I16;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PageSize);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRequestToFriendList_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.pageIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageIndex: ");
          __sb.Append(PageIndex);
        }
        if (__isset.pageSize) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageSize: ");
          __sb.Append(PageSize);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRequestToFriendList_result : TBase
    {
      private List<Friend> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Friend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getRequestToFriendList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Friend>();
                  TList _list160 = iprot.ReadListBegin();
                  for( int _i161 = 0; _i161 < _list160.Count; ++_i161)
                  {
                    Friend _elem162;
                    _elem162 = new Friend();
                    _elem162.Read(iprot);
                    Success.Add(_elem162);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRequestToFriendList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Friend _iter163 in Success)
              {
                _iter163.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRequestToFriendList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewCategory_args : TBase
    {
      private UserCategory _userCategory;
      private string _friendIDs;
      private Session _session;

      public UserCategory UserCategory
      {
        get
        {
          return _userCategory;
        }
        set
        {
          __isset.userCategory = true;
          this._userCategory = value;
        }
      }

      public string FriendIDs
      {
        get
        {
          return _friendIDs;
        }
        set
        {
          __isset.friendIDs = true;
          this._friendIDs = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCategory;
        public bool friendIDs;
        public bool session;
      }

      public createNewCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserCategory = new UserCategory();
                UserCategory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FriendIDs = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewCategory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserCategory != null && __isset.userCategory) {
          field.Name = "userCategory";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserCategory.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FriendIDs != null && __isset.friendIDs) {
          field.Name = "friendIDs";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendIDs);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewCategory_args(");
        bool __first = true;
        if (UserCategory != null && __isset.userCategory) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCategory: ");
          __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
        }
        if (FriendIDs != null && __isset.friendIDs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendIDs: ");
          __sb.Append(FriendIDs);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewCategory_result : TBase
    {
      private UserCategory _success;
      private UserException _ex;
      private SessionException _se;

      public UserCategory Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public createNewCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserCategory();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewCategory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFromCategory_args : TBase
    {
      private UserCategory _userCategory;
      private string _friendIDs;
      private Session _session;

      public UserCategory UserCategory
      {
        get
        {
          return _userCategory;
        }
        set
        {
          __isset.userCategory = true;
          this._userCategory = value;
        }
      }

      public string FriendIDs
      {
        get
        {
          return _friendIDs;
        }
        set
        {
          __isset.friendIDs = true;
          this._friendIDs = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCategory;
        public bool friendIDs;
        public bool session;
      }

      public removeFromCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserCategory = new UserCategory();
                UserCategory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FriendIDs = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeFromCategory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserCategory != null && __isset.userCategory) {
          field.Name = "userCategory";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserCategory.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FriendIDs != null && __isset.friendIDs) {
          field.Name = "friendIDs";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendIDs);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFromCategory_args(");
        bool __first = true;
        if (UserCategory != null && __isset.userCategory) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCategory: ");
          __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
        }
        if (FriendIDs != null && __isset.friendIDs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendIDs: ");
          __sb.Append(FriendIDs);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFromCategory_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public removeFromCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeFromCategory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeFromCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateListInCategory_args : TBase
    {
      private UserCategory _userCategory;
      private string _friendIDs;
      private Session _session;

      public UserCategory UserCategory
      {
        get
        {
          return _userCategory;
        }
        set
        {
          __isset.userCategory = true;
          this._userCategory = value;
        }
      }

      public string FriendIDs
      {
        get
        {
          return _friendIDs;
        }
        set
        {
          __isset.friendIDs = true;
          this._friendIDs = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCategory;
        public bool friendIDs;
        public bool session;
      }

      public updateListInCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserCategory = new UserCategory();
                UserCategory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FriendIDs = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateListInCategory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserCategory != null && __isset.userCategory) {
          field.Name = "userCategory";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserCategory.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FriendIDs != null && __isset.friendIDs) {
          field.Name = "friendIDs";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendIDs);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateListInCategory_args(");
        bool __first = true;
        if (UserCategory != null && __isset.userCategory) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCategory: ");
          __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
        }
        if (FriendIDs != null && __isset.friendIDs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendIDs: ");
          __sb.Append(FriendIDs);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateListInCategory_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public updateListInCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateListInCategory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateListInCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class insertInCategory_args : TBase
    {
      private UserCategory _userCategory;
      private string _friendIDs;
      private Session _session;

      public UserCategory UserCategory
      {
        get
        {
          return _userCategory;
        }
        set
        {
          __isset.userCategory = true;
          this._userCategory = value;
        }
      }

      public string FriendIDs
      {
        get
        {
          return _friendIDs;
        }
        set
        {
          __isset.friendIDs = true;
          this._friendIDs = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCategory;
        public bool friendIDs;
        public bool session;
      }

      public insertInCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserCategory = new UserCategory();
                UserCategory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FriendIDs = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("insertInCategory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserCategory != null && __isset.userCategory) {
          field.Name = "userCategory";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserCategory.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FriendIDs != null && __isset.friendIDs) {
          field.Name = "friendIDs";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendIDs);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("insertInCategory_args(");
        bool __first = true;
        if (UserCategory != null && __isset.userCategory) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCategory: ");
          __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
        }
        if (FriendIDs != null && __isset.friendIDs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendIDs: ");
          __sb.Append(FriendIDs);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class insertInCategory_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public insertInCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("insertInCategory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("insertInCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteCategory_args : TBase
    {
      private UserCategory _userCategory;
      private Session _session;

      public UserCategory UserCategory
      {
        get
        {
          return _userCategory;
        }
        set
        {
          __isset.userCategory = true;
          this._userCategory = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCategory;
        public bool session;
      }

      public deleteCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserCategory = new UserCategory();
                UserCategory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteCategory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserCategory != null && __isset.userCategory) {
          field.Name = "userCategory";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserCategory.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteCategory_args(");
        bool __first = true;
        if (UserCategory != null && __isset.userCategory) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCategory: ");
          __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteCategory_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public deleteCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteCategory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteMultipleCategories_args : TBase
    {
      private int _userId;
      private List<int> _categoryIds;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public List<int> CategoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool categoryIds;
        public bool session;
      }

      public deleteMultipleCategories_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  CategoryIds = new List<int>();
                  TList _list164 = iprot.ReadListBegin();
                  for( int _i165 = 0; _i165 < _list164.Count; ++_i165)
                  {
                    int _elem166;
                    _elem166 = iprot.ReadI32();
                    CategoryIds.Add(_elem166);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteMultipleCategories_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (CategoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, CategoryIds.Count));
            foreach (int _iter167 in CategoryIds)
            {
              oprot.WriteI32(_iter167);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteMultipleCategories_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (CategoryIds != null && __isset.categoryIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CategoryIds: ");
          __sb.Append(CategoryIds);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteMultipleCategories_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public deleteMultipleCategories_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteMultipleCategories_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteMultipleCategories_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class editCategoryMeta_args : TBase
    {
      private UserCategory _userCategory;
      private Session _session;

      public UserCategory UserCategory
      {
        get
        {
          return _userCategory;
        }
        set
        {
          __isset.userCategory = true;
          this._userCategory = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCategory;
        public bool session;
      }

      public editCategoryMeta_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserCategory = new UserCategory();
                UserCategory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("editCategoryMeta_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserCategory != null && __isset.userCategory) {
          field.Name = "userCategory";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserCategory.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("editCategoryMeta_args(");
        bool __first = true;
        if (UserCategory != null && __isset.userCategory) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCategory: ");
          __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class editCategoryMeta_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public editCategoryMeta_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("editCategoryMeta_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("editCategoryMeta_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class categoryList_args : TBase
    {
      private int _userId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public categoryList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("categoryList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("categoryList_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class categoryList_result : TBase
    {
      private List<UserCategory> _success;
      private UserException _ex;
      private SessionException _se;

      public List<UserCategory> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public categoryList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserCategory>();
                  TList _list168 = iprot.ReadListBegin();
                  for( int _i169 = 0; _i169 < _list168.Count; ++_i169)
                  {
                    UserCategory _elem170;
                    _elem170 = new UserCategory();
                    _elem170.Read(iprot);
                    Success.Add(_elem170);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("categoryList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserCategory _iter171 in Success)
              {
                _iter171.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("categoryList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendsListForMobile_args : TBase
    {
      private int _userId;
      private string _deviceId;
      private string _cTag;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string DeviceId
      {
        get
        {
          return _deviceId;
        }
        set
        {
          __isset.deviceId = true;
          this._deviceId = value;
        }
      }

      public string CTag
      {
        get
        {
          return _cTag;
        }
        set
        {
          __isset.cTag = true;
          this._cTag = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool deviceId;
        public bool cTag;
        public bool session;
      }

      public getFriendsListForMobile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CTag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFriendsListForMobile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null && __isset.deviceId) {
          field.Name = "deviceId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceId);
          oprot.WriteFieldEnd();
        }
        if (CTag != null && __isset.cTag) {
          field.Name = "cTag";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CTag);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendsListForMobile_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (DeviceId != null && __isset.deviceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceId: ");
          __sb.Append(DeviceId);
        }
        if (CTag != null && __isset.cTag) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CTag: ");
          __sb.Append(CTag);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFriendsListForMobile_result : TBase
    {
      private FriendList _success;
      private UserException _ex;
      private SessionException _se;

      public FriendList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getFriendsListForMobile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FriendList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFriendsListForMobile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFriendsListForMobile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPendingFriendsForMobile_args : TBase
    {
      private int _userId;
      private string _deviceId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string DeviceId
      {
        get
        {
          return _deviceId;
        }
        set
        {
          __isset.deviceId = true;
          this._deviceId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool deviceId;
        public bool session;
      }

      public getPendingFriendsForMobile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPendingFriendsForMobile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null && __isset.deviceId) {
          field.Name = "deviceId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPendingFriendsForMobile_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (DeviceId != null && __isset.deviceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceId: ");
          __sb.Append(DeviceId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPendingFriendsForMobile_result : TBase
    {
      private List<Friend> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Friend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getPendingFriendsForMobile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Friend>();
                  TList _list172 = iprot.ReadListBegin();
                  for( int _i173 = 0; _i173 < _list172.Count; ++_i173)
                  {
                    Friend _elem174;
                    _elem174 = new Friend();
                    _elem174.Read(iprot);
                    Success.Add(_elem174);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPendingFriendsForMobile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Friend _iter175 in Success)
              {
                _iter175.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPendingFriendsForMobile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRequestedToFriendsForMobile_args : TBase
    {
      private int _userId;
      private string _deviceId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string DeviceId
      {
        get
        {
          return _deviceId;
        }
        set
        {
          __isset.deviceId = true;
          this._deviceId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool deviceId;
        public bool session;
      }

      public getRequestedToFriendsForMobile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRequestedToFriendsForMobile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null && __isset.deviceId) {
          field.Name = "deviceId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRequestedToFriendsForMobile_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (DeviceId != null && __isset.deviceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceId: ");
          __sb.Append(DeviceId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRequestedToFriendsForMobile_result : TBase
    {
      private List<Friend> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Friend> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getRequestedToFriendsForMobile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Friend>();
                  TList _list176 = iprot.ReadListBegin();
                  for( int _i177 = 0; _i177 < _list176.Count; ++_i177)
                  {
                    Friend _elem178;
                    _elem178 = new Friend();
                    _elem178.Read(iprot);
                    Success.Add(_elem178);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRequestedToFriendsForMobile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Friend _iter179 in Success)
              {
                _iter179.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRequestedToFriendsForMobile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProfile_args : TBase
    {
      private int _userId;
      private int _targetId;
      private string _username;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public int TargetId
      {
        get
        {
          return _targetId;
        }
        set
        {
          __isset.targetId = true;
          this._targetId = value;
        }
      }

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool targetId;
        public bool username;
        public bool session;
      }

      public getProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                TargetId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.targetId) {
          field.Name = "targetId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TargetId);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getProfile_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.targetId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetId: ");
          __sb.Append(TargetId);
        }
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProfile_result : TBase
    {
      private Friend _success;
      private UserException _ex;
      private SessionException _se;

      public Friend Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Friend();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updatePassword_args : TBase
    {
      private string _oldPassword;
      private string _newPassword;
      private Session _session;

      public string OldPassword
      {
        get
        {
          return _oldPassword;
        }
        set
        {
          __isset.oldPassword = true;
          this._oldPassword = value;
        }
      }

      public string NewPassword
      {
        get
        {
          return _newPassword;
        }
        set
        {
          __isset.newPassword = true;
          this._newPassword = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool oldPassword;
        public bool newPassword;
        public bool session;
      }

      public updatePassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OldPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NewPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updatePassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (OldPassword != null && __isset.oldPassword) {
          field.Name = "oldPassword";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OldPassword);
          oprot.WriteFieldEnd();
        }
        if (NewPassword != null && __isset.newPassword) {
          field.Name = "newPassword";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewPassword);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updatePassword_args(");
        bool __first = true;
        if (OldPassword != null && __isset.oldPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OldPassword: ");
          __sb.Append(OldPassword);
        }
        if (NewPassword != null && __isset.newPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NewPassword: ");
          __sb.Append(NewPassword);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updatePassword_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public updatePassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updatePassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updatePassword_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class contactSync_args : TBase
    {
      private UserMobileContacts _userMobileContacts;
      private Session _session;

      public UserMobileContacts UserMobileContacts
      {
        get
        {
          return _userMobileContacts;
        }
        set
        {
          __isset.userMobileContacts = true;
          this._userMobileContacts = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userMobileContacts;
        public bool session;
      }

      public contactSync_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserMobileContacts = new UserMobileContacts();
                UserMobileContacts.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("contactSync_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserMobileContacts != null && __isset.userMobileContacts) {
          field.Name = "userMobileContacts";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserMobileContacts.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("contactSync_args(");
        bool __first = true;
        if (UserMobileContacts != null && __isset.userMobileContacts) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserMobileContacts: ");
          __sb.Append(UserMobileContacts== null ? "<null>" : UserMobileContacts.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class contactSync_result : TBase
    {
      private UserMobileContacts _success;
      private UserException _ex;
      private SessionException _se;

      public UserMobileContacts Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public contactSync_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserMobileContacts();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("contactSync_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("contactSync_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllNotifications_args : TBase
    {
      private NotificationMob _notificationMob;
      private Session _session;

      public NotificationMob NotificationMob
      {
        get
        {
          return _notificationMob;
        }
        set
        {
          __isset.notificationMob = true;
          this._notificationMob = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool notificationMob;
        public bool session;
      }

      public getAllNotifications_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                NotificationMob = new NotificationMob();
                NotificationMob.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllNotifications_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NotificationMob != null && __isset.notificationMob) {
          field.Name = "notificationMob";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          NotificationMob.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllNotifications_args(");
        bool __first = true;
        if (NotificationMob != null && __isset.notificationMob) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotificationMob: ");
          __sb.Append(NotificationMob== null ? "<null>" : NotificationMob.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllNotifications_result : TBase
    {
      private NotificationMobList _success;
      private UserException _ex;
      private SessionException _se;

      public NotificationMobList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getAllNotifications_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NotificationMobList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllNotifications_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllNotifications_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class basicSearch_args : TBase
    {
      private BasicSearch _basicSearch;
      private Session _session;

      public BasicSearch BasicSearch
      {
        get
        {
          return _basicSearch;
        }
        set
        {
          __isset.basicSearch = true;
          this._basicSearch = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool basicSearch;
        public bool session;
      }

      public basicSearch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                BasicSearch = new BasicSearch();
                BasicSearch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("basicSearch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BasicSearch != null && __isset.basicSearch) {
          field.Name = "basicSearch";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          BasicSearch.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("basicSearch_args(");
        bool __first = true;
        if (BasicSearch != null && __isset.basicSearch) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BasicSearch: ");
          __sb.Append(BasicSearch== null ? "<null>" : BasicSearch.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class basicSearch_result : TBase
    {
      private BasicSearchList _success;
      private UserException _ex;
      private SessionException _se;

      public BasicSearchList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public basicSearch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BasicSearchList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("basicSearch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("basicSearch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserLoginInfo_args : TBase
    {
      private string _userNameEmail;

      public string UserNameEmail
      {
        get
        {
          return _userNameEmail;
        }
        set
        {
          __isset.userNameEmail = true;
          this._userNameEmail = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userNameEmail;
      }

      public getUserLoginInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserNameEmail = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserLoginInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserNameEmail != null && __isset.userNameEmail) {
          field.Name = "userNameEmail";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserNameEmail);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserLoginInfo_args(");
        bool __first = true;
        if (UserNameEmail != null && __isset.userNameEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserNameEmail: ");
          __sb.Append(UserNameEmail);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserLoginInfo_result : TBase
    {
      private User _success;
      private UserException _ex;
      private SessionException _se;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserLoginInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserLoginInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserLoginInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserLoginInfoWithSession_args : TBase
    {
      private string _userNameEmail;
      private Session _session;

      public string UserNameEmail
      {
        get
        {
          return _userNameEmail;
        }
        set
        {
          __isset.userNameEmail = true;
          this._userNameEmail = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userNameEmail;
        public bool session;
      }

      public getUserLoginInfoWithSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserNameEmail = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserLoginInfoWithSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserNameEmail != null && __isset.userNameEmail) {
          field.Name = "userNameEmail";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserNameEmail);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserLoginInfoWithSession_args(");
        bool __first = true;
        if (UserNameEmail != null && __isset.userNameEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserNameEmail: ");
          __sb.Append(UserNameEmail);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserLoginInfoWithSession_result : TBase
    {
      private User _success;
      private UserException _ex;
      private SessionException _se;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserLoginInfoWithSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserLoginInfoWithSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserLoginInfoWithSession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMyProfile_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public getMyProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMyProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMyProfile_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMyProfile_result : TBase
    {
      private User _success;
      private UserException _ex;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public getMyProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMyProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMyProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveUserProfilePic_args : TBase
    {
      private string _username;
      private string _fileId;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string FileId
      {
        get
        {
          return _fileId;
        }
        set
        {
          __isset.fileId = true;
          this._fileId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool fileId;
      }

      public saveUserProfilePic_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveUserProfilePic_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (FileId != null && __isset.fileId) {
          field.Name = "fileId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FileId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveUserProfilePic_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (FileId != null && __isset.fileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FileId: ");
          __sb.Append(FileId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveUserProfilePic_result : TBase
    {
      private bool _success;
      private UserException _ex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public saveUserProfilePic_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveUserProfilePic_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveUserProfilePic_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyUser_args : TBase
    {
      private string _usernameEmail;

      public string UsernameEmail
      {
        get
        {
          return _usernameEmail;
        }
        set
        {
          __isset.usernameEmail = true;
          this._usernameEmail = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool usernameEmail;
      }

      public verifyUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UsernameEmail = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UsernameEmail != null && __isset.usernameEmail) {
          field.Name = "usernameEmail";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UsernameEmail);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("verifyUser_args(");
        bool __first = true;
        if (UsernameEmail != null && __isset.usernameEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UsernameEmail: ");
          __sb.Append(UsernameEmail);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyUser_result : TBase
    {
      private User _success;
      private UserException _ex;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public verifyUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("verifyUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class forgotPasswordCode_args : TBase
    {
      private User _user;

      public User User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
      }

      public forgotPasswordCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                User = new User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("forgotPasswordCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("forgotPasswordCode_args(");
        bool __first = true;
        if (User != null && __isset.user) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("User: ");
          __sb.Append(User== null ? "<null>" : User.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class forgotPasswordCode_result : TBase
    {
      private string _success;
      private UserException _ex;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public forgotPasswordCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("forgotPasswordCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("forgotPasswordCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resetPassword_args : TBase
    {
      private string _code;
      private string _password;

      public string Code
      {
        get
        {
          return _code;
        }
        set
        {
          __isset.code = true;
          this._code = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool code;
        public bool password;
      }

      public resetPassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Code = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resetPassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Code != null && __isset.code) {
          field.Name = "code";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Code);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("resetPassword_args(");
        bool __first = true;
        if (Code != null && __isset.code) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Code: ");
          __sb.Append(Code);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resetPassword_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public resetPassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resetPassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("resetPassword_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserContactDetails_args : TBase
    {
      private int _userId;
      private string _targetUserNameId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string TargetUserNameId
      {
        get
        {
          return _targetUserNameId;
        }
        set
        {
          __isset.targetUserNameId = true;
          this._targetUserNameId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool targetUserNameId;
        public bool session;
      }

      public getUserContactDetails_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TargetUserNameId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserContactDetails_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (TargetUserNameId != null && __isset.targetUserNameId) {
          field.Name = "targetUserNameId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TargetUserNameId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserContactDetails_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (TargetUserNameId != null && __isset.targetUserNameId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetUserNameId: ");
          __sb.Append(TargetUserNameId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserContactDetails_result : TBase
    {
      private List<UserContactDetails> _success;
      private UserException _ex;
      private SessionException _se;

      public List<UserContactDetails> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserContactDetails_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserContactDetails>();
                  TList _list180 = iprot.ReadListBegin();
                  for( int _i181 = 0; _i181 < _list180.Count; ++_i181)
                  {
                    UserContactDetails _elem182;
                    _elem182 = new UserContactDetails();
                    _elem182.Read(iprot);
                    Success.Add(_elem182);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserContactDetails_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserContactDetails _iter183 in Success)
              {
                _iter183.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserContactDetails_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBasicContactPersion_args : TBase
    {
      private UserInfoPerson _userinfo;
      private Session _session;

      public UserInfoPerson Userinfo
      {
        get
        {
          return _userinfo;
        }
        set
        {
          __isset.userinfo = true;
          this._userinfo = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userinfo;
        public bool session;
      }

      public setBasicContactPersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Userinfo = new UserInfoPerson();
                Userinfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBasicContactPersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userinfo != null && __isset.userinfo) {
          field.Name = "userinfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Userinfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setBasicContactPersion_args(");
        bool __first = true;
        if (Userinfo != null && __isset.userinfo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userinfo: ");
          __sb.Append(Userinfo== null ? "<null>" : Userinfo.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBasicContactPersion_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public setBasicContactPersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBasicContactPersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setBasicContactPersion_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBusinessBaiscDetail_args : TBase
    {
      private BusinessBasicDetails _details;
      private Session _session;

      public BusinessBasicDetails Details
      {
        get
        {
          return _details;
        }
        set
        {
          __isset.details = true;
          this._details = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool details;
        public bool session;
      }

      public setBusinessBaiscDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Details = new BusinessBasicDetails();
                Details.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBusinessBaiscDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Details != null && __isset.details) {
          field.Name = "details";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Details.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setBusinessBaiscDetail_args(");
        bool __first = true;
        if (Details != null && __isset.details) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Details: ");
          __sb.Append(Details== null ? "<null>" : Details.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBusinessBaiscDetail_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public setBusinessBaiscDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBusinessBaiscDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setBusinessBaiscDetail_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setCompanyReview_args : TBase
    {
      private CompanyReview _review;
      private Session _session;

      public CompanyReview Review
      {
        get
        {
          return _review;
        }
        set
        {
          __isset.review = true;
          this._review = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool review;
        public bool session;
      }

      public setCompanyReview_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Review = new CompanyReview();
                Review.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setCompanyReview_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Review != null && __isset.review) {
          field.Name = "review";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Review.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setCompanyReview_args(");
        bool __first = true;
        if (Review != null && __isset.review) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Review: ");
          __sb.Append(Review== null ? "<null>" : Review.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setCompanyReview_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public setCompanyReview_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setCompanyReview_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setCompanyReview_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setEmployeWorkSchedule_args : TBase
    {
      private EmployeeWorkSchedule _schedule;
      private Session _session;

      public EmployeeWorkSchedule Schedule
      {
        get
        {
          return _schedule;
        }
        set
        {
          __isset.schedule = true;
          this._schedule = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool schedule;
        public bool session;
      }

      public setEmployeWorkSchedule_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Schedule = new EmployeeWorkSchedule();
                Schedule.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setEmployeWorkSchedule_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Schedule != null && __isset.schedule) {
          field.Name = "schedule";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Schedule.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setEmployeWorkSchedule_args(");
        bool __first = true;
        if (Schedule != null && __isset.schedule) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Schedule: ");
          __sb.Append(Schedule== null ? "<null>" : Schedule.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setEmployeWorkSchedule_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public setEmployeWorkSchedule_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setEmployeWorkSchedule_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setEmployeWorkSchedule_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertDepartment_args : TBase
    {
      private Department _department;
      private Session _session;

      public Department Department
      {
        get
        {
          return _department;
        }
        set
        {
          __isset.department = true;
          this._department = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool department;
        public bool session;
      }

      public upsertDepartment_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Department = new Department();
                Department.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertDepartment_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Department != null && __isset.department) {
          field.Name = "department";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Department.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertDepartment_args(");
        bool __first = true;
        if (Department != null && __isset.department) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Department: ");
          __sb.Append(Department== null ? "<null>" : Department.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertDepartment_result : TBase
    {
      private DepartmentResponse _success;
      private UserException _ex;
      private SessionException _se;

      public DepartmentResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertDepartment_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DepartmentResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertDepartment_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertDepartment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertDepartmentEmployees_args : TBase
    {
      private DepartmentEmployees _departmentEmployees;
      private Session _session;

      public DepartmentEmployees DepartmentEmployees
      {
        get
        {
          return _departmentEmployees;
        }
        set
        {
          __isset.departmentEmployees = true;
          this._departmentEmployees = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool departmentEmployees;
        public bool session;
      }

      public upsertDepartmentEmployees_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DepartmentEmployees = new DepartmentEmployees();
                DepartmentEmployees.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertDepartmentEmployees_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DepartmentEmployees != null && __isset.departmentEmployees) {
          field.Name = "departmentEmployees";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DepartmentEmployees.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertDepartmentEmployees_args(");
        bool __first = true;
        if (DepartmentEmployees != null && __isset.departmentEmployees) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DepartmentEmployees: ");
          __sb.Append(DepartmentEmployees== null ? "<null>" : DepartmentEmployees.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertDepartmentEmployees_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertDepartmentEmployees_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertDepartmentEmployees_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertDepartmentEmployees_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertContacts_args : TBase
    {
      private UserContactDetails _userContactDetails;
      private Session _session;

      public UserContactDetails UserContactDetails
      {
        get
        {
          return _userContactDetails;
        }
        set
        {
          __isset.userContactDetails = true;
          this._userContactDetails = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userContactDetails;
        public bool session;
      }

      public upsertContacts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserContactDetails = new UserContactDetails();
                UserContactDetails.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserContactDetails != null && __isset.userContactDetails) {
          field.Name = "userContactDetails";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserContactDetails.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertContacts_args(");
        bool __first = true;
        if (UserContactDetails != null && __isset.userContactDetails) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserContactDetails: ");
          __sb.Append(UserContactDetails== null ? "<null>" : UserContactDetails.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertContacts_result : TBase
    {
      private UserContactDetailsResponse _success;
      private UserException _ex;
      private SessionException _se;

      public UserContactDetailsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertContacts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserContactDetailsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertContacts_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertSuggestContacts_args : TBase
    {
      private int _targetId;
      private UserContactDetails _userContactDetails;
      private Session _session;

      public int TargetId
      {
        get
        {
          return _targetId;
        }
        set
        {
          __isset.targetId = true;
          this._targetId = value;
        }
      }

      public UserContactDetails UserContactDetails
      {
        get
        {
          return _userContactDetails;
        }
        set
        {
          __isset.userContactDetails = true;
          this._userContactDetails = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool targetId;
        public bool userContactDetails;
        public bool session;
      }

      public upsertSuggestContacts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                TargetId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                UserContactDetails = new UserContactDetails();
                UserContactDetails.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertSuggestContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.targetId) {
          field.Name = "targetId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TargetId);
          oprot.WriteFieldEnd();
        }
        if (UserContactDetails != null && __isset.userContactDetails) {
          field.Name = "userContactDetails";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          UserContactDetails.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertSuggestContacts_args(");
        bool __first = true;
        if (__isset.targetId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetId: ");
          __sb.Append(TargetId);
        }
        if (UserContactDetails != null && __isset.userContactDetails) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserContactDetails: ");
          __sb.Append(UserContactDetails== null ? "<null>" : UserContactDetails.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertSuggestContacts_result : TBase
    {
      private SuggestContactResponse _success;
      private UserException _ex;
      private SessionException _se;

      public SuggestContactResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertSuggestContacts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SuggestContactResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertSuggestContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertSuggestContacts_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class viewCompanyEmployee_args : TBase
    {
      private string _user;
      private string _searchTerm;
      private Session _session;

      public string User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }

      public string SearchTerm
      {
        get
        {
          return _searchTerm;
        }
        set
        {
          __isset.searchTerm = true;
          this._searchTerm = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
        public bool searchTerm;
        public bool session;
      }

      public viewCompanyEmployee_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SearchTerm = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("viewCompanyEmployee_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        if (SearchTerm != null && __isset.searchTerm) {
          field.Name = "searchTerm";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SearchTerm);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("viewCompanyEmployee_args(");
        bool __first = true;
        if (User != null && __isset.user) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("User: ");
          __sb.Append(User);
        }
        if (SearchTerm != null && __isset.searchTerm) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SearchTerm: ");
          __sb.Append(SearchTerm);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class viewCompanyEmployee_result : TBase
    {
      private List<CompanyEmployeeInfo> _success;
      private UserException _ex;
      private SessionException _se;

      public List<CompanyEmployeeInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public viewCompanyEmployee_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompanyEmployeeInfo>();
                  TList _list184 = iprot.ReadListBegin();
                  for( int _i185 = 0; _i185 < _list184.Count; ++_i185)
                  {
                    CompanyEmployeeInfo _elem186;
                    _elem186 = new CompanyEmployeeInfo();
                    _elem186.Read(iprot);
                    Success.Add(_elem186);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("viewCompanyEmployee_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompanyEmployeeInfo _iter187 in Success)
              {
                _iter187.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("viewCompanyEmployee_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSuggestions_args : TBase
    {
      private Session _session;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public getContactSuggestions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSuggestions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSuggestions_args(");
        bool __first = true;
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSuggestions_result : TBase
    {
      private List<ContactSuggestions> _success;
      private UserException _ex;
      private SessionException _se;

      public List<ContactSuggestions> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getContactSuggestions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ContactSuggestions>();
                  TList _list188 = iprot.ReadListBegin();
                  for( int _i189 = 0; _i189 < _list188.Count; ++_i189)
                  {
                    ContactSuggestions _elem190;
                    _elem190 = new ContactSuggestions();
                    _elem190.Read(iprot);
                    Success.Add(_elem190);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSuggestions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ContactSuggestions _iter191 in Success)
              {
                _iter191.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSuggestions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class respondContactSuggestion_args : TBase
    {
      private long _contactCustomId;
      private short _mode;
      private Session _sesion;

      public long ContactCustomId
      {
        get
        {
          return _contactCustomId;
        }
        set
        {
          __isset.contactCustomId = true;
          this._contactCustomId = value;
        }
      }

      public short Mode
      {
        get
        {
          return _mode;
        }
        set
        {
          __isset.mode = true;
          this._mode = value;
        }
      }

      public Session Sesion
      {
        get
        {
          return _sesion;
        }
        set
        {
          __isset.sesion = true;
          this._sesion = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool contactCustomId;
        public bool mode;
        public bool sesion;
      }

      public respondContactSuggestion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                ContactCustomId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                Mode = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Sesion = new Session();
                Sesion.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("respondContactSuggestion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.contactCustomId) {
          field.Name = "contactCustomId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ContactCustomId);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I16;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Mode);
          oprot.WriteFieldEnd();
        }
        if (Sesion != null && __isset.sesion) {
          field.Name = "sesion";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Sesion.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("respondContactSuggestion_args(");
        bool __first = true;
        if (__isset.contactCustomId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ContactCustomId: ");
          __sb.Append(ContactCustomId);
        }
        if (__isset.mode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mode: ");
          __sb.Append(Mode);
        }
        if (Sesion != null && __isset.sesion) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sesion: ");
          __sb.Append(Sesion== null ? "<null>" : Sesion.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class respondContactSuggestion_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public respondContactSuggestion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("respondContactSuggestion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("respondContactSuggestion_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationRequestCount_args : TBase
    {
      private string _nRTypeIds;
      private Session _session;

      public string NRTypeIds
      {
        get
        {
          return _nRTypeIds;
        }
        set
        {
          __isset.nRTypeIds = true;
          this._nRTypeIds = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nRTypeIds;
        public bool session;
      }

      public getNotificationRequestCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NRTypeIds = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNotificationRequestCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NRTypeIds != null && __isset.nRTypeIds) {
          field.Name = "nRTypeIds";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NRTypeIds);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationRequestCount_args(");
        bool __first = true;
        if (NRTypeIds != null && __isset.nRTypeIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NRTypeIds: ");
          __sb.Append(NRTypeIds);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationRequestCount_result : TBase
    {
      private NotificationMobList _success;
      private UserException _ex;
      private SessionException _se;

      public NotificationMobList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getNotificationRequestCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NotificationMobList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNotificationRequestCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNotificationRequestCount_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertEmployeementHistory_args : TBase
    {
      private Employment _employement;
      private Session _session;

      public Employment Employement
      {
        get
        {
          return _employement;
        }
        set
        {
          __isset.employement = true;
          this._employement = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool employement;
        public bool session;
      }

      public upsertEmployeementHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Employement = new Employment();
                Employement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertEmployeementHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Employement != null && __isset.employement) {
          field.Name = "employement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Employement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertEmployeementHistory_args(");
        bool __first = true;
        if (Employement != null && __isset.employement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employement: ");
          __sb.Append(Employement== null ? "<null>" : Employement.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertEmployeementHistory_result : TBase
    {
      private Employment _success;
      private UserException _ex;
      private SessionException _se;

      public Employment Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertEmployeementHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Employment();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertEmployeementHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertEmployeementHistory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserInfo_args : TBase
    {
      private string _userNameId;
      private Session _session;

      public string UserNameId
      {
        get
        {
          return _userNameId;
        }
        set
        {
          __isset.userNameId = true;
          this._userNameId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userNameId;
        public bool session;
      }

      public getUserInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserNameId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserNameId != null && __isset.userNameId) {
          field.Name = "userNameId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserNameId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserInfo_args(");
        bool __first = true;
        if (UserNameId != null && __isset.userNameId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserNameId: ");
          __sb.Append(UserNameId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserInfo_result : TBase
    {
      private UserInfo _success;
      private UserException _ex;
      private SessionException _se;

      public UserInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUsersInfo_args : TBase
    {
      private string _users;
      private Session _session;

      public string Users
      {
        get
        {
          return _users;
        }
        set
        {
          __isset.users = true;
          this._users = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool users;
        public bool session;
      }

      public getUsersInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Users = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUsersInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Users != null && __isset.users) {
          field.Name = "users";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Users);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUsersInfo_args(");
        bool __first = true;
        if (Users != null && __isset.users) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Users: ");
          __sb.Append(Users);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUsersInfo_result : TBase
    {
      private List<UserInfo> _success;
      private UserException _ex;
      private SessionException _se;

      public List<UserInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUsersInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserInfo>();
                  TList _list192 = iprot.ReadListBegin();
                  for( int _i193 = 0; _i193 < _list192.Count; ++_i193)
                  {
                    UserInfo _elem194;
                    _elem194 = new UserInfo();
                    _elem194.Read(iprot);
                    Success.Add(_elem194);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUsersInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserInfo _iter195 in Success)
              {
                _iter195.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUsersInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyTree_args : TBase
    {
      private CompanyTree _companyTree;
      private Session _session;

      public CompanyTree CompanyTree
      {
        get
        {
          return _companyTree;
        }
        set
        {
          __isset.companyTree = true;
          this._companyTree = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool companyTree;
        public bool session;
      }

      public getCompanyTree_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CompanyTree = new CompanyTree();
                CompanyTree.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyTree_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CompanyTree != null && __isset.companyTree) {
          field.Name = "companyTree";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CompanyTree.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyTree_args(");
        bool __first = true;
        if (CompanyTree != null && __isset.companyTree) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyTree: ");
          __sb.Append(CompanyTree== null ? "<null>" : CompanyTree.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyTree_result : TBase
    {
      private List<CompanyTreeResponse> _success;
      private UserException _ex;
      private SessionException _se;

      public List<CompanyTreeResponse> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getCompanyTree_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompanyTreeResponse>();
                  TList _list196 = iprot.ReadListBegin();
                  for( int _i197 = 0; _i197 < _list196.Count; ++_i197)
                  {
                    CompanyTreeResponse _elem198;
                    _elem198 = new CompanyTreeResponse();
                    _elem198.Read(iprot);
                    Success.Add(_elem198);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyTree_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompanyTreeResponse _iter199 in Success)
              {
                _iter199.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyTree_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserLanguages_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getUserLanguages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserLanguages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserLanguages_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserLanguages_result : TBase
    {
      private List<Language> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Language> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserLanguages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Language>();
                  TList _list200 = iprot.ReadListBegin();
                  for( int _i201 = 0; _i201 < _list200.Count; ++_i201)
                  {
                    Language _elem202;
                    _elem202 = new Language();
                    _elem202.Read(iprot);
                    Success.Add(_elem202);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserLanguages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Language _iter203 in Success)
              {
                _iter203.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserLanguages_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertLanguage_args : TBase
    {
      private string _userIdOrName;
      private string _text;
      private Session _session;

      public string UserIdOrName
      {
        get
        {
          return _userIdOrName;
        }
        set
        {
          __isset.userIdOrName = true;
          this._userIdOrName = value;
        }
      }

      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userIdOrName;
        public bool text;
        public bool session;
      }

      public upsertLanguage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserIdOrName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Text = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertLanguage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserIdOrName != null && __isset.userIdOrName) {
          field.Name = "userIdOrName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserIdOrName);
          oprot.WriteFieldEnd();
        }
        if (Text != null && __isset.text) {
          field.Name = "text";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Text);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertLanguage_args(");
        bool __first = true;
        if (UserIdOrName != null && __isset.userIdOrName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIdOrName: ");
          __sb.Append(UserIdOrName);
        }
        if (Text != null && __isset.text) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Text: ");
          __sb.Append(Text);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertLanguage_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertLanguage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertLanguage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertLanguage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAwards_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getUserAwards_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAwards_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAwards_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAwards_result : TBase
    {
      private List<AwardAndHonor> _success;
      private UserException _ex;
      private SessionException _se;

      public List<AwardAndHonor> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserAwards_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<AwardAndHonor>();
                  TList _list204 = iprot.ReadListBegin();
                  for( int _i205 = 0; _i205 < _list204.Count; ++_i205)
                  {
                    AwardAndHonor _elem206;
                    _elem206 = new AwardAndHonor();
                    _elem206.Read(iprot);
                    Success.Add(_elem206);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAwards_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (AwardAndHonor _iter207 in Success)
              {
                _iter207.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAwards_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertAwardAndHonor_args : TBase
    {
      private AwardAndHonor _awardAndHonor;
      private Session _session;

      public AwardAndHonor AwardAndHonor
      {
        get
        {
          return _awardAndHonor;
        }
        set
        {
          __isset.awardAndHonor = true;
          this._awardAndHonor = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool awardAndHonor;
        public bool session;
      }

      public upsertAwardAndHonor_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AwardAndHonor = new AwardAndHonor();
                AwardAndHonor.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertAwardAndHonor_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AwardAndHonor != null && __isset.awardAndHonor) {
          field.Name = "awardAndHonor";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AwardAndHonor.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertAwardAndHonor_args(");
        bool __first = true;
        if (AwardAndHonor != null && __isset.awardAndHonor) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AwardAndHonor: ");
          __sb.Append(AwardAndHonor== null ? "<null>" : AwardAndHonor.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertAwardAndHonor_result : TBase
    {
      private AwardAndHonorResponse _success;
      private UserException _ex;
      private SessionException _se;

      public AwardAndHonorResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertAwardAndHonor_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AwardAndHonorResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertAwardAndHonor_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertAwardAndHonor_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAcademics_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getUserAcademics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAcademics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAcademics_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAcademics_result : TBase
    {
      private List<UserAcademics> _success;
      private UserException _ex;
      private SessionException _se;

      public List<UserAcademics> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserAcademics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserAcademics>();
                  TList _list208 = iprot.ReadListBegin();
                  for( int _i209 = 0; _i209 < _list208.Count; ++_i209)
                  {
                    UserAcademics _elem210;
                    _elem210 = new UserAcademics();
                    _elem210.Read(iprot);
                    Success.Add(_elem210);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAcademics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserAcademics _iter211 in Success)
              {
                _iter211.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAcademics_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class viewEmploymentHistoryPerson_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public viewEmploymentHistoryPerson_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("viewEmploymentHistoryPerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("viewEmploymentHistoryPerson_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class viewEmploymentHistoryPerson_result : TBase
    {
      private List<CompanyEmployeeInfo> _success;
      private UserException _ex;
      private SessionException _se;

      public List<CompanyEmployeeInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public viewEmploymentHistoryPerson_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompanyEmployeeInfo>();
                  TList _list212 = iprot.ReadListBegin();
                  for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                  {
                    CompanyEmployeeInfo _elem214;
                    _elem214 = new CompanyEmployeeInfo();
                    _elem214.Read(iprot);
                    Success.Add(_elem214);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("viewEmploymentHistoryPerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompanyEmployeeInfo _iter215 in Success)
              {
                _iter215.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("viewEmploymentHistoryPerson_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEmployeeRatings_args : TBase
    {
      private EmployeeRatings _employeeRatings;
      private Session _session;

      public EmployeeRatings EmployeeRatings
      {
        get
        {
          return _employeeRatings;
        }
        set
        {
          __isset.employeeRatings = true;
          this._employeeRatings = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool employeeRatings;
        public bool session;
      }

      public getEmployeeRatings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                EmployeeRatings = new EmployeeRatings();
                EmployeeRatings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEmployeeRatings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (EmployeeRatings != null && __isset.employeeRatings) {
          field.Name = "employeeRatings";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          EmployeeRatings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEmployeeRatings_args(");
        bool __first = true;
        if (EmployeeRatings != null && __isset.employeeRatings) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmployeeRatings: ");
          __sb.Append(EmployeeRatings== null ? "<null>" : EmployeeRatings.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEmployeeRatings_result : TBase
    {
      private List<EmployeeRatingResponse> _success;
      private UserException _ex;
      private SessionException _se;

      public List<EmployeeRatingResponse> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getEmployeeRatings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<EmployeeRatingResponse>();
                  TList _list216 = iprot.ReadListBegin();
                  for( int _i217 = 0; _i217 < _list216.Count; ++_i217)
                  {
                    EmployeeRatingResponse _elem218;
                    _elem218 = new EmployeeRatingResponse();
                    _elem218.Read(iprot);
                    Success.Add(_elem218);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEmployeeRatings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (EmployeeRatingResponse _iter219 in Success)
              {
                _iter219.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEmployeeRatings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEmployees_args : TBase
    {
      private Employees _employees;
      private Session _session;

      public Employees Employees
      {
        get
        {
          return _employees;
        }
        set
        {
          __isset.employees = true;
          this._employees = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool employees;
        public bool session;
      }

      public getEmployees_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Employees = new Employees();
                Employees.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEmployees_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Employees != null && __isset.employees) {
          field.Name = "employees";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Employees.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEmployees_args(");
        bool __first = true;
        if (Employees != null && __isset.employees) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employees: ");
          __sb.Append(Employees== null ? "<null>" : Employees.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEmployees_result : TBase
    {
      private CompanyEmployeeInfoList _success;
      private UserException _ex;
      private SessionException _se;

      public CompanyEmployeeInfoList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getEmployees_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CompanyEmployeeInfoList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEmployees_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEmployees_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyReviews_args : TBase
    {
      private CompanyReview _companyReview;
      private Session _session;

      public CompanyReview CompanyReview
      {
        get
        {
          return _companyReview;
        }
        set
        {
          __isset.companyReview = true;
          this._companyReview = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool companyReview;
        public bool session;
      }

      public getCompanyReviews_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CompanyReview = new CompanyReview();
                CompanyReview.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyReviews_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CompanyReview != null && __isset.companyReview) {
          field.Name = "companyReview";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CompanyReview.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyReviews_args(");
        bool __first = true;
        if (CompanyReview != null && __isset.companyReview) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyReview: ");
          __sb.Append(CompanyReview== null ? "<null>" : CompanyReview.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyReviews_result : TBase
    {
      private CompanyReviewList _success;
      private UserException _ex;
      private SessionException _se;

      public CompanyReviewList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getCompanyReviews_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CompanyReviewList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyReviews_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyReviews_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertThumbsForSkill_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public upsertThumbsForSkill_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertThumbsForSkill_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertThumbsForSkill_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertThumbsForSkill_result : TBase
    {
      private SkillResponse _success;
      private UserException _ex;
      private SessionException _se;

      public SkillResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertThumbsForSkill_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkillResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertThumbsForSkill_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertThumbsForSkill_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class thumbsForSkillDetails_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public thumbsForSkillDetails_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("thumbsForSkillDetails_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("thumbsForSkillDetails_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class thumbsForSkillDetails_result : TBase
    {
      private SkillResponse _success;
      private UserException _ex;
      private SessionException _se;

      public SkillResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public thumbsForSkillDetails_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkillResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("thumbsForSkillDetails_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("thumbsForSkillDetails_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acceptSkill_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public acceptSkill_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acceptSkill_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("acceptSkill_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acceptSkill_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public acceptSkill_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acceptSkill_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("acceptSkill_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertSkill_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public upsertSkill_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertSkill_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertSkill_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertSkill_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertSkill_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertSkill_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertSkill_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSkillSummary_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public getSkillSummary_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSkillSummary_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSkillSummary_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSkillSummary_result : TBase
    {
      private SkillResponse _success;
      private UserException _ex;
      private SessionException _se;

      public SkillResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getSkillSummary_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkillResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSkillSummary_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSkillSummary_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserSkills_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public getUserSkills_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserSkills_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserSkills_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserSkills_result : TBase
    {
      private SkillResponse _success;
      private UserException _ex;
      private SessionException _se;

      public SkillResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserSkills_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkillResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserSkills_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserSkills_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertEmployeeRating_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public upsertEmployeeRating_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertEmployeeRating_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertEmployeeRating_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertEmployeeRating_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertEmployeeRating_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertEmployeeRating_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertEmployeeRating_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertAcademic_args : TBase
    {
      private UserAcademics _userAcademic;
      private Session _session;

      public UserAcademics UserAcademic
      {
        get
        {
          return _userAcademic;
        }
        set
        {
          __isset.userAcademic = true;
          this._userAcademic = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userAcademic;
        public bool session;
      }

      public upsertAcademic_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserAcademic = new UserAcademics();
                UserAcademic.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertAcademic_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserAcademic != null && __isset.userAcademic) {
          field.Name = "userAcademic";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserAcademic.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertAcademic_args(");
        bool __first = true;
        if (UserAcademic != null && __isset.userAcademic) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserAcademic: ");
          __sb.Append(UserAcademic== null ? "<null>" : UserAcademic.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertAcademic_result : TBase
    {
      private UserAcademicResponse _success;
      private UserException _ex;
      private SessionException _se;

      public UserAcademicResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertAcademic_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserAcademicResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertAcademic_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertAcademic_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getData_args : TBase
    {
      private GetDataParam _getDataParam;
      private Session _session;

      public GetDataParam GetDataParam
      {
        get
        {
          return _getDataParam;
        }
        set
        {
          __isset.getDataParam = true;
          this._getDataParam = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool getDataParam;
        public bool session;
      }

      public getData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GetDataParam = new GetDataParam();
                GetDataParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GetDataParam != null && __isset.getDataParam) {
          field.Name = "getDataParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GetDataParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getData_args(");
        bool __first = true;
        if (GetDataParam != null && __isset.getDataParam) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GetDataParam: ");
          __sb.Append(GetDataParam== null ? "<null>" : GetDataParam.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getData_result : TBase
    {
      private List<GetDataResponse> _success;
      private UserException _ex;
      private SessionException _se;

      public List<GetDataResponse> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<GetDataResponse>();
                  TList _list220 = iprot.ReadListBegin();
                  for( int _i221 = 0; _i221 < _list220.Count; ++_i221)
                  {
                    GetDataResponse _elem222;
                    _elem222 = new GetDataResponse();
                    _elem222.Read(iprot);
                    Success.Add(_elem222);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (GetDataResponse _iter223 in Success)
              {
                _iter223.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyDepartment_args : TBase
    {
      private string _companyId;
      private Session _session;

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool companyId;
        public bool session;
      }

      public getCompanyDepartment_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CompanyId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyDepartment_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CompanyId != null && __isset.companyId) {
          field.Name = "companyId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CompanyId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyDepartment_args(");
        bool __first = true;
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyDepartment_result : TBase
    {
      private List<Department> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Department> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getCompanyDepartment_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Department>();
                  TList _list224 = iprot.ReadListBegin();
                  for( int _i225 = 0; _i225 < _list224.Count; ++_i225)
                  {
                    Department _elem226;
                    _elem226 = new Department();
                    _elem226.Read(iprot);
                    Success.Add(_elem226);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyDepartment_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Department _iter227 in Success)
              {
                _iter227.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyDepartment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyDepartmentEmployees_args : TBase
    {
      private string _user;
      private string _companyId;
      private Session _session;

      public string User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }

      public string CompanyId
      {
        get
        {
          return _companyId;
        }
        set
        {
          __isset.companyId = true;
          this._companyId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
        public bool companyId;
        public bool session;
      }

      public getCompanyDepartmentEmployees_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CompanyId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyDepartmentEmployees_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        if (CompanyId != null && __isset.companyId) {
          field.Name = "companyId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CompanyId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyDepartmentEmployees_args(");
        bool __first = true;
        if (User != null && __isset.user) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("User: ");
          __sb.Append(User);
        }
        if (CompanyId != null && __isset.companyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyId: ");
          __sb.Append(CompanyId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyDepartmentEmployees_result : TBase
    {
      private List<Department> _success;
      private UserException _ex;
      private SessionException _se;

      public List<Department> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getCompanyDepartmentEmployees_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Department>();
                  TList _list228 = iprot.ReadListBegin();
                  for( int _i229 = 0; _i229 < _list228.Count; ++_i229)
                  {
                    Department _elem230;
                    _elem230 = new Department();
                    _elem230.Read(iprot);
                    Success.Add(_elem230);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyDepartmentEmployees_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Department _iter231 in Success)
              {
                _iter231.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyDepartmentEmployees_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getResignationRequest_args : TBase
    {
      private Employees _employee;
      private Session _session;

      public Employees Employee
      {
        get
        {
          return _employee;
        }
        set
        {
          __isset.employee = true;
          this._employee = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool employee;
        public bool session;
      }

      public getResignationRequest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Employee = new Employees();
                Employee.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResignationRequest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Employee != null && __isset.employee) {
          field.Name = "employee";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Employee.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getResignationRequest_args(");
        bool __first = true;
        if (Employee != null && __isset.employee) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employee: ");
          __sb.Append(Employee== null ? "<null>" : Employee.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getResignationRequest_result : TBase
    {
      private EmployeeList _success;
      private UserException _ex;
      private SessionException _se;

      public EmployeeList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getResignationRequest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new EmployeeList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResignationRequest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getResignationRequest_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suggestSkills_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public suggestSkills_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suggestSkills_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("suggestSkills_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suggestSkills_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public suggestSkills_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suggestSkills_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("suggestSkills_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUnApprovedSkillSuggestions_args : TBase
    {
      private Skill _skill;
      private Session _session;

      public Skill Skill
      {
        get
        {
          return _skill;
        }
        set
        {
          __isset.skill = true;
          this._skill = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skill;
        public bool session;
      }

      public getUnApprovedSkillSuggestions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Skill = new Skill();
                Skill.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUnApprovedSkillSuggestions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Skill != null && __isset.skill) {
          field.Name = "skill";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Skill.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUnApprovedSkillSuggestions_args(");
        bool __first = true;
        if (Skill != null && __isset.skill) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skill: ");
          __sb.Append(Skill== null ? "<null>" : Skill.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUnApprovedSkillSuggestions_result : TBase
    {
      private SkillResponse _success;
      private UserException _ex;
      private SessionException _se;

      public SkillResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUnApprovedSkillSuggestions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkillResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUnApprovedSkillSuggestions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUnApprovedSkillSuggestions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEmployeeWorkSchedule_args : TBase
    {
      private long _personEmploymentId;
      private Session _session;

      public long PersonEmploymentId
      {
        get
        {
          return _personEmploymentId;
        }
        set
        {
          __isset.personEmploymentId = true;
          this._personEmploymentId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool personEmploymentId;
        public bool session;
      }

      public getEmployeeWorkSchedule_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                PersonEmploymentId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEmployeeWorkSchedule_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.personEmploymentId) {
          field.Name = "personEmploymentId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PersonEmploymentId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEmployeeWorkSchedule_args(");
        bool __first = true;
        if (__isset.personEmploymentId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PersonEmploymentId: ");
          __sb.Append(PersonEmploymentId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEmployeeWorkSchedule_result : TBase
    {
      private List<EmployeeWorkSchedule> _success;
      private UserException _ex;
      private SessionException _se;

      public List<EmployeeWorkSchedule> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getEmployeeWorkSchedule_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<EmployeeWorkSchedule>();
                  TList _list232 = iprot.ReadListBegin();
                  for( int _i233 = 0; _i233 < _list232.Count; ++_i233)
                  {
                    EmployeeWorkSchedule _elem234;
                    _elem234 = new EmployeeWorkSchedule();
                    _elem234.Read(iprot);
                    Success.Add(_elem234);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEmployeeWorkSchedule_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (EmployeeWorkSchedule _iter235 in Success)
              {
                _iter235.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getEmployeeWorkSchedule_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertCompanyEmployee_args : TBase
    {
      private CompanyEmployeeInfo _companyEmpInfo;
      private Session _session;

      public CompanyEmployeeInfo CompanyEmpInfo
      {
        get
        {
          return _companyEmpInfo;
        }
        set
        {
          __isset.companyEmpInfo = true;
          this._companyEmpInfo = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool companyEmpInfo;
        public bool session;
      }

      public upsertCompanyEmployee_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CompanyEmpInfo = new CompanyEmployeeInfo();
                CompanyEmpInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertCompanyEmployee_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CompanyEmpInfo != null && __isset.companyEmpInfo) {
          field.Name = "companyEmpInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CompanyEmpInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertCompanyEmployee_args(");
        bool __first = true;
        if (CompanyEmpInfo != null && __isset.companyEmpInfo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CompanyEmpInfo: ");
          __sb.Append(CompanyEmpInfo== null ? "<null>" : CompanyEmpInfo.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertCompanyEmployee_result : TBase
    {
      private CompanyEmployeeInfoList _success;
      private UserException _ex;
      private SessionException _se;

      public CompanyEmployeeInfoList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertCompanyEmployee_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CompanyEmployeeInfoList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertCompanyEmployee_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertCompanyEmployee_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyEmployee_args : TBase
    {
      private int _userId;
      private string _employee;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string Employee
      {
        get
        {
          return _employee;
        }
        set
        {
          __isset.employee = true;
          this._employee = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool employee;
        public bool session;
      }

      public getCompanyEmployee_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Employee = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyEmployee_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (Employee != null && __isset.employee) {
          field.Name = "employee";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Employee);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyEmployee_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Employee != null && __isset.employee) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employee: ");
          __sb.Append(Employee);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompanyEmployee_result : TBase
    {
      private List<CompanyEmployeeInfo> _success;
      private UserException _ex;
      private SessionException _se;

      public List<CompanyEmployeeInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getCompanyEmployee_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompanyEmployeeInfo>();
                  TList _list236 = iprot.ReadListBegin();
                  for( int _i237 = 0; _i237 < _list236.Count; ++_i237)
                  {
                    CompanyEmployeeInfo _elem238;
                    _elem238 = new CompanyEmployeeInfo();
                    _elem238.Read(iprot);
                    Success.Add(_elem238);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompanyEmployee_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompanyEmployeeInfo _iter239 in Success)
              {
                _iter239.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCompanyEmployee_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCity_args : TBase
    {
      private int _cityId;
      private string _searchText;
      private Session _session;

      public int CityId
      {
        get
        {
          return _cityId;
        }
        set
        {
          __isset.cityId = true;
          this._cityId = value;
        }
      }

      public string SearchText
      {
        get
        {
          return _searchText;
        }
        set
        {
          __isset.searchText = true;
          this._searchText = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cityId;
        public bool searchText;
        public bool session;
      }

      public getCity_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                CityId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SearchText = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCity_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.cityId) {
          field.Name = "cityId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CityId);
          oprot.WriteFieldEnd();
        }
        if (SearchText != null && __isset.searchText) {
          field.Name = "searchText";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SearchText);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCity_args(");
        bool __first = true;
        if (__isset.cityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CityId: ");
          __sb.Append(CityId);
        }
        if (SearchText != null && __isset.searchText) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SearchText: ");
          __sb.Append(SearchText);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCity_result : TBase
    {
      private List<City> _success;
      private UserException _ex;
      private SessionException _se;

      public List<City> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getCity_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<City>();
                  TList _list240 = iprot.ReadListBegin();
                  for( int _i241 = 0; _i241 < _list240.Count; ++_i241)
                  {
                    City _elem242;
                    _elem242 = new City();
                    _elem242.Read(iprot);
                    Success.Add(_elem242);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCity_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (City _iter243 in Success)
              {
                _iter243.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAbout_args : TBase
    {
      private string _username;
      private Session _session;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool session;
      }

      public getUserAbout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAbout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAbout_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAbout_result : TBase
    {
      private UserInfo _success;
      private UserException _ex;
      private SessionException _se;

      public UserInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserAbout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAbout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAbout_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateUserAbout_args : TBase
    {
      private string _userIdorName;
      private string _headline;
      private string _about;
      private Session _session;

      public string UserIdorName
      {
        get
        {
          return _userIdorName;
        }
        set
        {
          __isset.userIdorName = true;
          this._userIdorName = value;
        }
      }

      public string Headline
      {
        get
        {
          return _headline;
        }
        set
        {
          __isset.headline = true;
          this._headline = value;
        }
      }

      public string About
      {
        get
        {
          return _about;
        }
        set
        {
          __isset.about = true;
          this._about = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userIdorName;
        public bool headline;
        public bool about;
        public bool session;
      }

      public updateUserAbout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserIdorName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Headline = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                About = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateUserAbout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserIdorName != null && __isset.userIdorName) {
          field.Name = "userIdorName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserIdorName);
          oprot.WriteFieldEnd();
        }
        if (Headline != null && __isset.headline) {
          field.Name = "headline";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Headline);
          oprot.WriteFieldEnd();
        }
        if (About != null && __isset.about) {
          field.Name = "about";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(About);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateUserAbout_args(");
        bool __first = true;
        if (UserIdorName != null && __isset.userIdorName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIdorName: ");
          __sb.Append(UserIdorName);
        }
        if (Headline != null && __isset.headline) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Headline: ");
          __sb.Append(Headline);
        }
        if (About != null && __isset.about) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("About: ");
          __sb.Append(About);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateUserAbout_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public updateUserAbout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateUserAbout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateUserAbout_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class respondEmpoymentRequest_args : TBase
    {
      private EmploymentRequest _employmentRequest;
      private Session _session;

      public EmploymentRequest EmploymentRequest
      {
        get
        {
          return _employmentRequest;
        }
        set
        {
          __isset.employmentRequest = true;
          this._employmentRequest = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool employmentRequest;
        public bool session;
      }

      public respondEmpoymentRequest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                EmploymentRequest = new EmploymentRequest();
                EmploymentRequest.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("respondEmpoymentRequest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (EmploymentRequest != null && __isset.employmentRequest) {
          field.Name = "employmentRequest";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          EmploymentRequest.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("respondEmpoymentRequest_args(");
        bool __first = true;
        if (EmploymentRequest != null && __isset.employmentRequest) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmploymentRequest: ");
          __sb.Append(EmploymentRequest== null ? "<null>" : EmploymentRequest.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class respondEmpoymentRequest_result : TBase
    {
      private EmploymentRequestResponse _success;
      private UserException _ex;
      private SessionException _se;

      public EmploymentRequestResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public respondEmpoymentRequest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new EmploymentRequestResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("respondEmpoymentRequest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("respondEmpoymentRequest_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class profileViewDetail_args : TBase
    {
      private ProfileView _profileView;
      private Session _session;

      public ProfileView ProfileView
      {
        get
        {
          return _profileView;
        }
        set
        {
          __isset.profileView = true;
          this._profileView = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileView;
        public bool session;
      }

      public profileViewDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ProfileView = new ProfileView();
                ProfileView.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("profileViewDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProfileView != null && __isset.profileView) {
          field.Name = "profileView";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ProfileView.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("profileViewDetail_args(");
        bool __first = true;
        if (ProfileView != null && __isset.profileView) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileView: ");
          __sb.Append(ProfileView== null ? "<null>" : ProfileView.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class profileViewDetail_result : TBase
    {
      private ProfileViewResponse _success;
      private UserException _ex;
      private SessionException _se;

      public ProfileViewResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public profileViewDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProfileViewResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("profileViewDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("profileViewDetail_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class profileViewPanel_args : TBase
    {
      private ProfileView _profileView;
      private Session _session;

      public ProfileView ProfileView
      {
        get
        {
          return _profileView;
        }
        set
        {
          __isset.profileView = true;
          this._profileView = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileView;
        public bool session;
      }

      public profileViewPanel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ProfileView = new ProfileView();
                ProfileView.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("profileViewPanel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProfileView != null && __isset.profileView) {
          field.Name = "profileView";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ProfileView.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("profileViewPanel_args(");
        bool __first = true;
        if (ProfileView != null && __isset.profileView) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileView: ");
          __sb.Append(ProfileView== null ? "<null>" : ProfileView.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class profileViewPanel_result : TBase
    {
      private ProfileViewResponse _success;
      private UserException _ex;
      private SessionException _se;

      public ProfileViewResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public profileViewPanel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProfileViewResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("profileViewPanel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("profileViewPanel_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class profileViewSummary_args : TBase
    {
      private ProfileView _profileView;
      private Session _session;

      public ProfileView ProfileView
      {
        get
        {
          return _profileView;
        }
        set
        {
          __isset.profileView = true;
          this._profileView = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileView;
        public bool session;
      }

      public profileViewSummary_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ProfileView = new ProfileView();
                ProfileView.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("profileViewSummary_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProfileView != null && __isset.profileView) {
          field.Name = "profileView";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ProfileView.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("profileViewSummary_args(");
        bool __first = true;
        if (ProfileView != null && __isset.profileView) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileView: ");
          __sb.Append(ProfileView== null ? "<null>" : ProfileView.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class profileViewSummary_result : TBase
    {
      private ProfileViewResponse _success;
      private UserException _ex;
      private SessionException _se;

      public ProfileViewResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public profileViewSummary_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProfileViewResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("profileViewSummary_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("profileViewSummary_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMutualFriends_args : TBase
    {
      private MutualFriend _mf;
      private Session _session;

      public MutualFriend Mf
      {
        get
        {
          return _mf;
        }
        set
        {
          __isset.mf = true;
          this._mf = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mf;
        public bool session;
      }

      public getMutualFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Mf = new MutualFriend();
                Mf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMutualFriends_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mf != null && __isset.mf) {
          field.Name = "mf";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Mf.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMutualFriends_args(");
        bool __first = true;
        if (Mf != null && __isset.mf) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mf: ");
          __sb.Append(Mf== null ? "<null>" : Mf.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMutualFriends_result : TBase
    {
      private MutualFriendResponse _success;
      private UserException _ex;
      private SessionException _se;

      public MutualFriendResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getMutualFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MutualFriendResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMutualFriends_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMutualFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAvailability_args : TBase
    {
      private string _userIdOrName;
      private Session _session;

      public string UserIdOrName
      {
        get
        {
          return _userIdOrName;
        }
        set
        {
          __isset.userIdOrName = true;
          this._userIdOrName = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userIdOrName;
        public bool session;
      }

      public getUserAvailability_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserIdOrName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAvailability_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserIdOrName != null && __isset.userIdOrName) {
          field.Name = "userIdOrName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserIdOrName);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAvailability_args(");
        bool __first = true;
        if (UserIdOrName != null && __isset.userIdOrName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIdOrName: ");
          __sb.Append(UserIdOrName);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserAvailability_result : TBase
    {
      private UserInfo _success;
      private UserException _ex;
      private SessionException _se;

      public UserInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserAvailability_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserAvailability_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserAvailability_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setStatus_args : TBase
    {
      private Status _status;
      private Session _session;

      public Status Status
      {
        get
        {
          return _status;
        }
        set
        {
          __isset.status = true;
          this._status = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool status;
        public bool session;
      }

      public setStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Status = new Status();
                Status.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Status != null && __isset.status) {
          field.Name = "status";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Status.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setStatus_args(");
        bool __first = true;
        if (Status != null && __isset.status) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Status: ");
          __sb.Append(Status== null ? "<null>" : Status.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setStatus_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public setStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activateUser_args : TBase
    {
      private string _targetUser;
      private string _guid;

      public string TargetUser
      {
        get
        {
          return _targetUser;
        }
        set
        {
          __isset.targetUser = true;
          this._targetUser = value;
        }
      }

      public string Guid
      {
        get
        {
          return _guid;
        }
        set
        {
          __isset.guid = true;
          this._guid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool targetUser;
        public bool guid;
      }

      public activateUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TargetUser = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("activateUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TargetUser != null && __isset.targetUser) {
          field.Name = "targetUser";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TargetUser);
          oprot.WriteFieldEnd();
        }
        if (Guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("activateUser_args(");
        bool __first = true;
        if (TargetUser != null && __isset.targetUser) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetUser: ");
          __sb.Append(TargetUser);
        }
        if (Guid != null && __isset.guid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Guid: ");
          __sb.Append(Guid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activateUser_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public activateUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("activateUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("activateUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class signalView_args : TBase
    {
      private string _viewer;
      private string _targetUser;
      private int _groupId;
      private int _viewType;
      private int _typeId;
      private Session _session;

      public string Viewer
      {
        get
        {
          return _viewer;
        }
        set
        {
          __isset.viewer = true;
          this._viewer = value;
        }
      }

      public string TargetUser
      {
        get
        {
          return _targetUser;
        }
        set
        {
          __isset.targetUser = true;
          this._targetUser = value;
        }
      }

      public int GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ViewType
      {
        get
        {
          return _viewType;
        }
        set
        {
          __isset.viewType = true;
          this._viewType = value;
        }
      }

      public int TypeId
      {
        get
        {
          return _typeId;
        }
        set
        {
          __isset.typeId = true;
          this._typeId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool viewer;
        public bool targetUser;
        public bool groupId;
        public bool viewType;
        public bool typeId;
        public bool session;
      }

      public signalView_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Viewer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TargetUser = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                GroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ViewType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                TypeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("signalView_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Viewer != null && __isset.viewer) {
          field.Name = "viewer";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Viewer);
          oprot.WriteFieldEnd();
        }
        if (TargetUser != null && __isset.targetUser) {
          field.Name = "targetUser";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TargetUser);
          oprot.WriteFieldEnd();
        }
        if (__isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GroupId);
          oprot.WriteFieldEnd();
        }
        if (__isset.viewType) {
          field.Name = "viewType";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ViewType);
          oprot.WriteFieldEnd();
        }
        if (__isset.typeId) {
          field.Name = "typeId";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TypeId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("signalView_args(");
        bool __first = true;
        if (Viewer != null && __isset.viewer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Viewer: ");
          __sb.Append(Viewer);
        }
        if (TargetUser != null && __isset.targetUser) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetUser: ");
          __sb.Append(TargetUser);
        }
        if (__isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.viewType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ViewType: ");
          __sb.Append(ViewType);
        }
        if (__isset.typeId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TypeId: ");
          __sb.Append(TypeId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class signalView_result : TBase
    {
      private DbStatus _success;
      private UserException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public signalView_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("signalView_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("signalView_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWebOnlyFriends_args : TBase
    {
      private WebOnlyFriend _webOnlyFriend;
      private Session _session;

      public WebOnlyFriend WebOnlyFriend
      {
        get
        {
          return _webOnlyFriend;
        }
        set
        {
          __isset.webOnlyFriend = true;
          this._webOnlyFriend = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool webOnlyFriend;
        public bool session;
      }

      public getWebOnlyFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                WebOnlyFriend = new WebOnlyFriend();
                WebOnlyFriend.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getWebOnlyFriends_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (WebOnlyFriend != null && __isset.webOnlyFriend) {
          field.Name = "webOnlyFriend";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          WebOnlyFriend.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getWebOnlyFriends_args(");
        bool __first = true;
        if (WebOnlyFriend != null && __isset.webOnlyFriend) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WebOnlyFriend: ");
          __sb.Append(WebOnlyFriend== null ? "<null>" : WebOnlyFriend.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWebOnlyFriends_result : TBase
    {
      private WebOnlyFriendResponse _success;
      private UserException _ex;
      private SessionException _se;

      public WebOnlyFriendResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getWebOnlyFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new WebOnlyFriendResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getWebOnlyFriends_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getWebOnlyFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserFriendsInCategory_args : TBase
    {
      private UserCategory _userCatagory;
      private Session _session;

      public UserCategory UserCatagory
      {
        get
        {
          return _userCatagory;
        }
        set
        {
          __isset.userCatagory = true;
          this._userCatagory = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCatagory;
        public bool session;
      }

      public getUserFriendsInCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserCatagory = new UserCategory();
                UserCatagory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserFriendsInCategory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserCatagory != null && __isset.userCatagory) {
          field.Name = "userCatagory";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserCatagory.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserFriendsInCategory_args(");
        bool __first = true;
        if (UserCatagory != null && __isset.userCatagory) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCatagory: ");
          __sb.Append(UserCatagory== null ? "<null>" : UserCatagory.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserFriendsInCategory_result : TBase
    {
      private List<UserInfo> _success;
      private UserException _ex;
      private SessionException _se;

      public List<UserInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public UserException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserFriendsInCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserInfo>();
                  TList _list244 = iprot.ReadListBegin();
                  for( int _i245 = 0; _i245 < _list244.Count; ++_i245)
                  {
                    UserInfo _elem246;
                    _elem246 = new UserInfo();
                    _elem246.Read(iprot);
                    Success.Add(_elem246);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new UserException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserFriendsInCategory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserInfo _iter247 in Success)
              {
                _iter247.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserFriendsInCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
