/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NotificationMob : TBase
  {
    private int _notificationId;
    private int _userId;
    private string _userName;
    private string _readDate;
    private int _typeId;
    private string _sentDate;
    private int _pageIndex;
    private int _pageSize;
    private int _requestDirection;
    private List<int> _nrTypes;
    private int _displayOnlyId;
    private string _name;
    private string _pictureUrl;
    private string _notification;
    private bool _type;
    private int _mutualFrdId;
    private string _mutualFrdName;
    private int _mutualFrdCount;
    private int _groupId;
    private string _groupName;
    private int _eventId;
    private string _eventName;
    private string _title;
    private string _clickDate;
    private bool _setAsRead;

    public int NotificationId
    {
      get
      {
        return _notificationId;
      }
      set
      {
        __isset.notificationId = true;
        this._notificationId = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string ReadDate
    {
      get
      {
        return _readDate;
      }
      set
      {
        __isset.readDate = true;
        this._readDate = value;
      }
    }

    public int TypeId
    {
      get
      {
        return _typeId;
      }
      set
      {
        __isset.typeId = true;
        this._typeId = value;
      }
    }

    public string SentDate
    {
      get
      {
        return _sentDate;
      }
      set
      {
        __isset.sentDate = true;
        this._sentDate = value;
      }
    }

    public int PageIndex
    {
      get
      {
        return _pageIndex;
      }
      set
      {
        __isset.pageIndex = true;
        this._pageIndex = value;
      }
    }

    public int PageSize
    {
      get
      {
        return _pageSize;
      }
      set
      {
        __isset.pageSize = true;
        this._pageSize = value;
      }
    }

    public int RequestDirection
    {
      get
      {
        return _requestDirection;
      }
      set
      {
        __isset.requestDirection = true;
        this._requestDirection = value;
      }
    }

    public List<int> NrTypes
    {
      get
      {
        return _nrTypes;
      }
      set
      {
        __isset.nrTypes = true;
        this._nrTypes = value;
      }
    }

    public int DisplayOnlyId
    {
      get
      {
        return _displayOnlyId;
      }
      set
      {
        __isset.displayOnlyId = true;
        this._displayOnlyId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string PictureUrl
    {
      get
      {
        return _pictureUrl;
      }
      set
      {
        __isset.pictureUrl = true;
        this._pictureUrl = value;
      }
    }

    public string Notification
    {
      get
      {
        return _notification;
      }
      set
      {
        __isset.notification = true;
        this._notification = value;
      }
    }

    public bool Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int MutualFrdId
    {
      get
      {
        return _mutualFrdId;
      }
      set
      {
        __isset.mutualFrdId = true;
        this._mutualFrdId = value;
      }
    }

    public string MutualFrdName
    {
      get
      {
        return _mutualFrdName;
      }
      set
      {
        __isset.mutualFrdName = true;
        this._mutualFrdName = value;
      }
    }

    public int MutualFrdCount
    {
      get
      {
        return _mutualFrdCount;
      }
      set
      {
        __isset.mutualFrdCount = true;
        this._mutualFrdCount = value;
      }
    }

    public int GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public string GroupName
    {
      get
      {
        return _groupName;
      }
      set
      {
        __isset.groupName = true;
        this._groupName = value;
      }
    }

    public int EventId
    {
      get
      {
        return _eventId;
      }
      set
      {
        __isset.eventId = true;
        this._eventId = value;
      }
    }

    public string EventName
    {
      get
      {
        return _eventName;
      }
      set
      {
        __isset.eventName = true;
        this._eventName = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string ClickDate
    {
      get
      {
        return _clickDate;
      }
      set
      {
        __isset.clickDate = true;
        this._clickDate = value;
      }
    }

    public bool SetAsRead
    {
      get
      {
        return _setAsRead;
      }
      set
      {
        __isset.setAsRead = true;
        this._setAsRead = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool notificationId;
      public bool userId;
      public bool userName;
      public bool readDate;
      public bool typeId;
      public bool sentDate;
      public bool pageIndex;
      public bool pageSize;
      public bool requestDirection;
      public bool nrTypes;
      public bool displayOnlyId;
      public bool name;
      public bool pictureUrl;
      public bool notification;
      public bool type;
      public bool mutualFrdId;
      public bool mutualFrdName;
      public bool mutualFrdCount;
      public bool groupId;
      public bool groupName;
      public bool eventId;
      public bool eventName;
      public bool title;
      public bool clickDate;
      public bool setAsRead;
    }

    public NotificationMob() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              NotificationId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ReadDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              TypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              SentDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              PageIndex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              PageSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              RequestDirection = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                NrTypes = new List<int>();
                TList _list100 = iprot.ReadListBegin();
                for( int _i101 = 0; _i101 < _list100.Count; ++_i101)
                {
                  int _elem102;
                  _elem102 = iprot.ReadI32();
                  NrTypes.Add(_elem102);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              DisplayOnlyId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              PictureUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Notification = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Bool) {
              Type = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              MutualFrdId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              MutualFrdName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              MutualFrdCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              GroupId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              GroupName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              EventId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              EventName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.String) {
              ClickDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Bool) {
              SetAsRead = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NotificationMob");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.notificationId) {
        field.Name = "notificationId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NotificationId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (ReadDate != null && __isset.readDate) {
        field.Name = "readDate";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ReadDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.typeId) {
        field.Name = "typeId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TypeId);
        oprot.WriteFieldEnd();
      }
      if (SentDate != null && __isset.sentDate) {
        field.Name = "sentDate";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SentDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageIndex) {
        field.Name = "pageIndex";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageSize) {
        field.Name = "pageSize";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.requestDirection) {
        field.Name = "requestDirection";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RequestDirection);
        oprot.WriteFieldEnd();
      }
      if (NrTypes != null && __isset.nrTypes) {
        field.Name = "nrTypes";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, NrTypes.Count));
          foreach (int _iter103 in NrTypes)
          {
            oprot.WriteI32(_iter103);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.displayOnlyId) {
        field.Name = "displayOnlyId";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayOnlyId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (PictureUrl != null && __isset.pictureUrl) {
        field.Name = "pictureUrl";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PictureUrl);
        oprot.WriteFieldEnd();
      }
      if (Notification != null && __isset.notification) {
        field.Name = "notification";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Notification);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Bool;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.mutualFrdId) {
        field.Name = "mutualFrdId";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MutualFrdId);
        oprot.WriteFieldEnd();
      }
      if (MutualFrdName != null && __isset.mutualFrdName) {
        field.Name = "mutualFrdName";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MutualFrdName);
        oprot.WriteFieldEnd();
      }
      if (__isset.mutualFrdCount) {
        field.Name = "mutualFrdCount";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MutualFrdCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.groupId) {
        field.Name = "groupId";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GroupId);
        oprot.WriteFieldEnd();
      }
      if (GroupName != null && __isset.groupName) {
        field.Name = "groupName";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GroupName);
        oprot.WriteFieldEnd();
      }
      if (__isset.eventId) {
        field.Name = "eventId";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EventId);
        oprot.WriteFieldEnd();
      }
      if (EventName != null && __isset.eventName) {
        field.Name = "eventName";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EventName);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (ClickDate != null && __isset.clickDate) {
        field.Name = "clickDate";
        field.Type = TType.String;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClickDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.setAsRead) {
        field.Name = "setAsRead";
        field.Type = TType.Bool;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SetAsRead);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NotificationMob(");
      bool __first = true;
      if (__isset.notificationId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotificationId: ");
        __sb.Append(NotificationId);
      }
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (UserName != null && __isset.userName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserName: ");
        __sb.Append(UserName);
      }
      if (ReadDate != null && __isset.readDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReadDate: ");
        __sb.Append(ReadDate);
      }
      if (__isset.typeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TypeId: ");
        __sb.Append(TypeId);
      }
      if (SentDate != null && __isset.sentDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SentDate: ");
        __sb.Append(SentDate);
      }
      if (__isset.pageIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageIndex: ");
        __sb.Append(PageIndex);
      }
      if (__isset.pageSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageSize: ");
        __sb.Append(PageSize);
      }
      if (__isset.requestDirection) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestDirection: ");
        __sb.Append(RequestDirection);
      }
      if (NrTypes != null && __isset.nrTypes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NrTypes: ");
        __sb.Append(NrTypes);
      }
      if (__isset.displayOnlyId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisplayOnlyId: ");
        __sb.Append(DisplayOnlyId);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (PictureUrl != null && __isset.pictureUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PictureUrl: ");
        __sb.Append(PictureUrl);
      }
      if (Notification != null && __isset.notification) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Notification: ");
        __sb.Append(Notification);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.mutualFrdId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutualFrdId: ");
        __sb.Append(MutualFrdId);
      }
      if (MutualFrdName != null && __isset.mutualFrdName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutualFrdName: ");
        __sb.Append(MutualFrdName);
      }
      if (__isset.mutualFrdCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutualFrdCount: ");
        __sb.Append(MutualFrdCount);
      }
      if (__isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      if (GroupName != null && __isset.groupName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupName: ");
        __sb.Append(GroupName);
      }
      if (__isset.eventId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EventId: ");
        __sb.Append(EventId);
      }
      if (EventName != null && __isset.eventName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EventName: ");
        __sb.Append(EventName);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (ClickDate != null && __isset.clickDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClickDate: ");
        __sb.Append(ClickDate);
      }
      if (__isset.setAsRead) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SetAsRead: ");
        __sb.Append(SetAsRead);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
