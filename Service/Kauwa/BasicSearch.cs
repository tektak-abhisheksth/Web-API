/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BasicSearch : TBase
  {
    private string _searchTerm;
    private int _userTypeId;
    private int _isConnected;
    private string _country;
    private string _title;
    private string _username;
    private int _pageIndex;
    private int _pageSize;
    private string _firstName;
    private string _lastName;
    private string _image;
    private int _userId;
    private int _mutualFriends;
    private int _statusTypeId;

    public string SearchTerm
    {
      get
      {
        return _searchTerm;
      }
      set
      {
        __isset.searchTerm = true;
        this._searchTerm = value;
      }
    }

    public int UserTypeId
    {
      get
      {
        return _userTypeId;
      }
      set
      {
        __isset.userTypeId = true;
        this._userTypeId = value;
      }
    }

    public int IsConnected
    {
      get
      {
        return _isConnected;
      }
      set
      {
        __isset.isConnected = true;
        this._isConnected = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public int PageIndex
    {
      get
      {
        return _pageIndex;
      }
      set
      {
        __isset.pageIndex = true;
        this._pageIndex = value;
      }
    }

    public int PageSize
    {
      get
      {
        return _pageSize;
      }
      set
      {
        __isset.pageSize = true;
        this._pageSize = value;
      }
    }

    public string FirstName
    {
      get
      {
        return _firstName;
      }
      set
      {
        __isset.firstName = true;
        this._firstName = value;
      }
    }

    public string LastName
    {
      get
      {
        return _lastName;
      }
      set
      {
        __isset.lastName = true;
        this._lastName = value;
      }
    }

    public string Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int MutualFriends
    {
      get
      {
        return _mutualFriends;
      }
      set
      {
        __isset.mutualFriends = true;
        this._mutualFriends = value;
      }
    }

    public int StatusTypeId
    {
      get
      {
        return _statusTypeId;
      }
      set
      {
        __isset.statusTypeId = true;
        this._statusTypeId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool searchTerm;
      public bool userTypeId;
      public bool isConnected;
      public bool country;
      public bool title;
      public bool username;
      public bool pageIndex;
      public bool pageSize;
      public bool firstName;
      public bool lastName;
      public bool image;
      public bool userId;
      public bool mutualFriends;
      public bool statusTypeId;
    }

    public BasicSearch() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SearchTerm = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              UserTypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              IsConnected = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Country = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Username = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              PageIndex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              PageSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              FirstName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              LastName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Image = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              MutualFriends = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              StatusTypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BasicSearch");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SearchTerm != null && __isset.searchTerm) {
        field.Name = "searchTerm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SearchTerm);
        oprot.WriteFieldEnd();
      }
      if (__isset.userTypeId) {
        field.Name = "userTypeId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserTypeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.isConnected) {
        field.Name = "isConnected";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IsConnected);
        oprot.WriteFieldEnd();
      }
      if (Country != null && __isset.country) {
        field.Name = "country";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Country);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Username != null && __isset.username) {
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Username);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageIndex) {
        field.Name = "pageIndex";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageSize) {
        field.Name = "pageSize";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageSize);
        oprot.WriteFieldEnd();
      }
      if (FirstName != null && __isset.firstName) {
        field.Name = "firstName";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FirstName);
        oprot.WriteFieldEnd();
      }
      if (LastName != null && __isset.lastName) {
        field.Name = "lastName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastName);
        oprot.WriteFieldEnd();
      }
      if (Image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Image);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.mutualFriends) {
        field.Name = "mutualFriends";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MutualFriends);
        oprot.WriteFieldEnd();
      }
      if (__isset.statusTypeId) {
        field.Name = "statusTypeId";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StatusTypeId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BasicSearch(");
      bool __first = true;
      if (SearchTerm != null && __isset.searchTerm) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SearchTerm: ");
        __sb.Append(SearchTerm);
      }
      if (__isset.userTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserTypeId: ");
        __sb.Append(UserTypeId);
      }
      if (__isset.isConnected) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsConnected: ");
        __sb.Append(IsConnected);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (Username != null && __isset.username) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Username: ");
        __sb.Append(Username);
      }
      if (__isset.pageIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageIndex: ");
        __sb.Append(PageIndex);
      }
      if (__isset.pageSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageSize: ");
        __sb.Append(PageSize);
      }
      if (FirstName != null && __isset.firstName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstName: ");
        __sb.Append(FirstName);
      }
      if (LastName != null && __isset.lastName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastName: ");
        __sb.Append(LastName);
      }
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.mutualFriends) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutualFriends: ");
        __sb.Append(MutualFriends);
      }
      if (__isset.statusTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusTypeId: ");
        __sb.Append(StatusTypeId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
