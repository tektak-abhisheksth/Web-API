/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class KauwaMail : TBase
  {
    private string _sender;
    private string _subject;
    private string _body;
    private bool _isHtml;
    private List<string> _to;
    private string _from;

    public string Sender
    {
      get
      {
        return _sender;
      }
      set
      {
        __isset.sender = true;
        this._sender = value;
      }
    }

    public string Subject
    {
      get
      {
        return _subject;
      }
      set
      {
        __isset.subject = true;
        this._subject = value;
      }
    }

    public string Body
    {
      get
      {
        return _body;
      }
      set
      {
        __isset.body = true;
        this._body = value;
      }
    }

    public bool IsHtml
    {
      get
      {
        return _isHtml;
      }
      set
      {
        __isset.isHtml = true;
        this._isHtml = value;
      }
    }

    public List<string> To
    {
      get
      {
        return _to;
      }
      set
      {
        __isset.to = true;
        this._to = value;
      }
    }

    public string From
    {
      get
      {
        return _from;
      }
      set
      {
        __isset.@from = true;
        this._from = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sender;
      public bool subject;
      public bool body;
      public bool isHtml;
      public bool to;
      public bool @from;
    }

    public KauwaMail() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Sender = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Subject = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Body = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsHtml = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                To = new List<string>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  string _elem34;
                  _elem34 = iprot.ReadString();
                  To.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              From = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("KauwaMail");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Sender != null && __isset.sender) {
        field.Name = "sender";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sender);
        oprot.WriteFieldEnd();
      }
      if (Subject != null && __isset.subject) {
        field.Name = "subject";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Subject);
        oprot.WriteFieldEnd();
      }
      if (Body != null && __isset.body) {
        field.Name = "body";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Body);
        oprot.WriteFieldEnd();
      }
      if (__isset.isHtml) {
        field.Name = "isHtml";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsHtml);
        oprot.WriteFieldEnd();
      }
      if (To != null && __isset.to) {
        field.Name = "to";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, To.Count));
          foreach (string _iter35 in To)
          {
            oprot.WriteString(_iter35);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (From != null && __isset.@from) {
        field.Name = "from";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(From);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("KauwaMail(");
      bool __first = true;
      if (Sender != null && __isset.sender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sender: ");
        __sb.Append(Sender);
      }
      if (Subject != null && __isset.subject) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Subject: ");
        __sb.Append(Subject);
      }
      if (Body != null && __isset.body) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Body: ");
        __sb.Append(Body);
      }
      if (__isset.isHtml) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsHtml: ");
        __sb.Append(IsHtml);
      }
      if (To != null && __isset.to) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("To: ");
        __sb.Append(To);
      }
      if (From != null && __isset.@from) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("From: ");
        __sb.Append(From);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
