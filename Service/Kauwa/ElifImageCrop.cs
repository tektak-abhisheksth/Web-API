/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ElifImageCrop : TBase
  {
    private double _width;
    private double _height;
    private double _top;
    private double _bottom;
    private double _left;
    private double _right;
    private SizedCodes _sizeCodes;

    public double Width
    {
      get
      {
        return _width;
      }
      set
      {
        __isset.width = true;
        this._width = value;
      }
    }

    public double Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }

    public double Top
    {
      get
      {
        return _top;
      }
      set
      {
        __isset.top = true;
        this._top = value;
      }
    }

    public double Bottom
    {
      get
      {
        return _bottom;
      }
      set
      {
        __isset.bottom = true;
        this._bottom = value;
      }
    }

    public double Left
    {
      get
      {
        return _left;
      }
      set
      {
        __isset.left = true;
        this._left = value;
      }
    }

    public double Right
    {
      get
      {
        return _right;
      }
      set
      {
        __isset.right = true;
        this._right = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SizedCodes"/>
    /// </summary>
    public SizedCodes SizeCodes
    {
      get
      {
        return _sizeCodes;
      }
      set
      {
        __isset.sizeCodes = true;
        this._sizeCodes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool width;
      public bool height;
      public bool top;
      public bool bottom;
      public bool left;
      public bool right;
      public bool sizeCodes;
    }

    public ElifImageCrop() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double) {
              Width = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              Height = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Top = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Bottom = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Left = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              Right = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              SizeCodes = (SizedCodes)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ElifImageCrop");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.width) {
        field.Name = "width";
        field.Type = TType.Double;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Width);
        oprot.WriteFieldEnd();
      }
      if (__isset.height) {
        field.Name = "height";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Height);
        oprot.WriteFieldEnd();
      }
      if (__isset.top) {
        field.Name = "top";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Top);
        oprot.WriteFieldEnd();
      }
      if (__isset.bottom) {
        field.Name = "bottom";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Bottom);
        oprot.WriteFieldEnd();
      }
      if (__isset.left) {
        field.Name = "left";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Left);
        oprot.WriteFieldEnd();
      }
      if (__isset.right) {
        field.Name = "right";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Right);
        oprot.WriteFieldEnd();
      }
      if (__isset.sizeCodes) {
        field.Name = "sizeCodes";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SizeCodes);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ElifImageCrop(");
      bool __first = true;
      if (__isset.width) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Width: ");
        __sb.Append(Width);
      }
      if (__isset.height) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Height: ");
        __sb.Append(Height);
      }
      if (__isset.top) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Top: ");
        __sb.Append(Top);
      }
      if (__isset.bottom) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bottom: ");
        __sb.Append(Bottom);
      }
      if (__isset.left) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Left: ");
        __sb.Append(Left);
      }
      if (__isset.right) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Right: ");
        __sb.Append(Right);
      }
      if (__isset.sizeCodes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SizeCodes: ");
        __sb.Append(SizeCodes);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
