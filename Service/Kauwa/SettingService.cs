/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class SettingService {
    public interface Iface {
      /// <summary>
      /// gets the list of Settings for given userId
      /// @param int userId
      /// @param int settingId
      /// @param Session sessionObj
      /// @return List<SettingPerson>
      /// String settingName in SettingTypePerson
      /// int settingGroupId in SettingTypePerson
      /// int settingTypeId in SettingTypePerson
      /// int value in SettingPerson
      /// String[] entries in SettingPerson
      /// @throws SettingServiceException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="visibility"></param>
      /// <param name="session"></param>
      List<SettingPerson> getSettingsForMobile(int userId, int visibility, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getSettingsForMobile(AsyncCallback callback, object state, int userId, int visibility, Session session);
      List<SettingPerson> End_getSettingsForMobile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get the Setting name, settingGroupId, settingTypeId, value, and entriesList for given settingId
      /// @param int userId
      /// @param int settingId
      /// @param Session sessionObj
      /// @return SettingPerson
      /// String settingName in SettingTypePerson
      /// int settingGroupId in SettingTypePerson
      /// int settingTypeId in SettingTypePerson
      /// int value in SettingPerson
      /// String[] entries in SettingPerson
      /// @throws SettingServiceException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="visibility"></param>
      /// <param name="settingId"></param>
      /// <param name="session"></param>
      SettingPerson getSettingForMobile(int userId, int visibility, int settingId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getSettingForMobile(AsyncCallback callback, object state, int userId, int visibility, int settingId, Session session);
      SettingPerson End_getSettingForMobile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the setting
      /// @param SettingPerson SettingPerson
      /// @param Session sessionObj
      /// int userId in SettingPerson
      /// int settingTypeId in SettingTypePerson
      /// int value in SettingPerson
      /// String[] entries in SettingPerson
      /// @return int
      /// @throws SettingServiceException
      /// @throws SessionException
      /// </summary>
      /// <param name="settingTypePerson"></param>
      /// <param name="session"></param>
      DbStatus updateSetting(SettingPerson settingTypePerson, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSetting(AsyncCallback callback, object state, SettingPerson settingTypePerson, Session session);
      DbStatus End_updateSetting(IAsyncResult asyncResult);
      #endif
      DbStatus upsertContactSetting(UserContactSettings userContactSettings, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_upsertContactSetting(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session);
      DbStatus End_upsertContactSetting(IAsyncResult asyncResult);
      #endif
      List<UserContactSettings> getContactSettings(UserContactSettings userContactSettings, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getContactSettings(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session);
      List<UserContactSettings> End_getContactSettings(IAsyncResult asyncResult);
      #endif
      List<UserContactSettings> getContactSettingsFriends(UserContactSettings userContactSettings, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getContactSettingsFriends(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session);
      List<UserContactSettings> End_getContactSettingsFriends(IAsyncResult asyncResult);
      #endif
      List<UserContactSettings> getContactSettingsCategories(UserContactSettings userContactSettings, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getContactSettingsCategories(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session);
      List<UserContactSettings> End_getContactSettingsCategories(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettingsForMobile(AsyncCallback callback, object state, int userId, int visibility, Session session)
      {
        return send_getSettingsForMobile(callback, state, userId, visibility, session);
      }

      public List<SettingPerson> End_getSettingsForMobile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettingsForMobile();
      }

      #endif

      /// <summary>
      /// gets the list of Settings for given userId
      /// @param int userId
      /// @param int settingId
      /// @param Session sessionObj
      /// @return List<SettingPerson>
      /// String settingName in SettingTypePerson
      /// int settingGroupId in SettingTypePerson
      /// int settingTypeId in SettingTypePerson
      /// int value in SettingPerson
      /// String[] entries in SettingPerson
      /// @throws SettingServiceException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="visibility"></param>
      /// <param name="session"></param>
      public List<SettingPerson> getSettingsForMobile(int userId, int visibility, Session session)
      {
        #if !SILVERLIGHT
        send_getSettingsForMobile(userId, visibility, session);
        return recv_getSettingsForMobile();

        #else
        var asyncResult = Begin_getSettingsForMobile(null, null, userId, visibility, session);
        return End_getSettingsForMobile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettingsForMobile(AsyncCallback callback, object state, int userId, int visibility, Session session)
      #else
      public void send_getSettingsForMobile(int userId, int visibility, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettingsForMobile", TMessageType.Call, seqid_));
        getSettingsForMobile_args args = new getSettingsForMobile_args();
        args.UserId = userId;
        args.Visibility = visibility;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<SettingPerson> recv_getSettingsForMobile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettingsForMobile_result result = new getSettingsForMobile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettingsForMobile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettingForMobile(AsyncCallback callback, object state, int userId, int visibility, int settingId, Session session)
      {
        return send_getSettingForMobile(callback, state, userId, visibility, settingId, session);
      }

      public SettingPerson End_getSettingForMobile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettingForMobile();
      }

      #endif

      /// <summary>
      /// get the Setting name, settingGroupId, settingTypeId, value, and entriesList for given settingId
      /// @param int userId
      /// @param int settingId
      /// @param Session sessionObj
      /// @return SettingPerson
      /// String settingName in SettingTypePerson
      /// int settingGroupId in SettingTypePerson
      /// int settingTypeId in SettingTypePerson
      /// int value in SettingPerson
      /// String[] entries in SettingPerson
      /// @throws SettingServiceException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="visibility"></param>
      /// <param name="settingId"></param>
      /// <param name="session"></param>
      public SettingPerson getSettingForMobile(int userId, int visibility, int settingId, Session session)
      {
        #if !SILVERLIGHT
        send_getSettingForMobile(userId, visibility, settingId, session);
        return recv_getSettingForMobile();

        #else
        var asyncResult = Begin_getSettingForMobile(null, null, userId, visibility, settingId, session);
        return End_getSettingForMobile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettingForMobile(AsyncCallback callback, object state, int userId, int visibility, int settingId, Session session)
      #else
      public void send_getSettingForMobile(int userId, int visibility, int settingId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettingForMobile", TMessageType.Call, seqid_));
        getSettingForMobile_args args = new getSettingForMobile_args();
        args.UserId = userId;
        args.Visibility = visibility;
        args.SettingId = settingId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SettingPerson recv_getSettingForMobile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettingForMobile_result result = new getSettingForMobile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettingForMobile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSetting(AsyncCallback callback, object state, SettingPerson settingTypePerson, Session session)
      {
        return send_updateSetting(callback, state, settingTypePerson, session);
      }

      public DbStatus End_updateSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateSetting();
      }

      #endif

      /// <summary>
      /// Updates the setting
      /// @param SettingPerson SettingPerson
      /// @param Session sessionObj
      /// int userId in SettingPerson
      /// int settingTypeId in SettingTypePerson
      /// int value in SettingPerson
      /// String[] entries in SettingPerson
      /// @return int
      /// @throws SettingServiceException
      /// @throws SessionException
      /// </summary>
      /// <param name="settingTypePerson"></param>
      /// <param name="session"></param>
      public DbStatus updateSetting(SettingPerson settingTypePerson, Session session)
      {
        #if !SILVERLIGHT
        send_updateSetting(settingTypePerson, session);
        return recv_updateSetting();

        #else
        var asyncResult = Begin_updateSetting(null, null, settingTypePerson, session);
        return End_updateSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSetting(AsyncCallback callback, object state, SettingPerson settingTypePerson, Session session)
      #else
      public void send_updateSetting(SettingPerson settingTypePerson, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSetting", TMessageType.Call, seqid_));
        updateSetting_args args = new updateSetting_args();
        args.SettingTypePerson = settingTypePerson;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_updateSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSetting_result result = new updateSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSetting failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upsertContactSetting(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      {
        return send_upsertContactSetting(callback, state, userContactSettings, session);
      }

      public DbStatus End_upsertContactSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upsertContactSetting();
      }

      #endif

      public DbStatus upsertContactSetting(UserContactSettings userContactSettings, Session session)
      {
        #if !SILVERLIGHT
        send_upsertContactSetting(userContactSettings, session);
        return recv_upsertContactSetting();

        #else
        var asyncResult = Begin_upsertContactSetting(null, null, userContactSettings, session);
        return End_upsertContactSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upsertContactSetting(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      #else
      public void send_upsertContactSetting(UserContactSettings userContactSettings, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upsertContactSetting", TMessageType.Call, seqid_));
        upsertContactSetting_args args = new upsertContactSetting_args();
        args.UserContactSettings = userContactSettings;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DbStatus recv_upsertContactSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upsertContactSetting_result result = new upsertContactSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upsertContactSetting failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getContactSettings(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      {
        return send_getContactSettings(callback, state, userContactSettings, session);
      }

      public List<UserContactSettings> End_getContactSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getContactSettings();
      }

      #endif

      public List<UserContactSettings> getContactSettings(UserContactSettings userContactSettings, Session session)
      {
        #if !SILVERLIGHT
        send_getContactSettings(userContactSettings, session);
        return recv_getContactSettings();

        #else
        var asyncResult = Begin_getContactSettings(null, null, userContactSettings, session);
        return End_getContactSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getContactSettings(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      #else
      public void send_getContactSettings(UserContactSettings userContactSettings, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getContactSettings", TMessageType.Call, seqid_));
        getContactSettings_args args = new getContactSettings_args();
        args.UserContactSettings = userContactSettings;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserContactSettings> recv_getContactSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getContactSettings_result result = new getContactSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getContactSettingsFriends(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      {
        return send_getContactSettingsFriends(callback, state, userContactSettings, session);
      }

      public List<UserContactSettings> End_getContactSettingsFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getContactSettingsFriends();
      }

      #endif

      public List<UserContactSettings> getContactSettingsFriends(UserContactSettings userContactSettings, Session session)
      {
        #if !SILVERLIGHT
        send_getContactSettingsFriends(userContactSettings, session);
        return recv_getContactSettingsFriends();

        #else
        var asyncResult = Begin_getContactSettingsFriends(null, null, userContactSettings, session);
        return End_getContactSettingsFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getContactSettingsFriends(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      #else
      public void send_getContactSettingsFriends(UserContactSettings userContactSettings, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getContactSettingsFriends", TMessageType.Call, seqid_));
        getContactSettingsFriends_args args = new getContactSettingsFriends_args();
        args.UserContactSettings = userContactSettings;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserContactSettings> recv_getContactSettingsFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getContactSettingsFriends_result result = new getContactSettingsFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactSettingsFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getContactSettingsCategories(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      {
        return send_getContactSettingsCategories(callback, state, userContactSettings, session);
      }

      public List<UserContactSettings> End_getContactSettingsCategories(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getContactSettingsCategories();
      }

      #endif

      public List<UserContactSettings> getContactSettingsCategories(UserContactSettings userContactSettings, Session session)
      {
        #if !SILVERLIGHT
        send_getContactSettingsCategories(userContactSettings, session);
        return recv_getContactSettingsCategories();

        #else
        var asyncResult = Begin_getContactSettingsCategories(null, null, userContactSettings, session);
        return End_getContactSettingsCategories(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getContactSettingsCategories(AsyncCallback callback, object state, UserContactSettings userContactSettings, Session session)
      #else
      public void send_getContactSettingsCategories(UserContactSettings userContactSettings, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getContactSettingsCategories", TMessageType.Call, seqid_));
        getContactSettingsCategories_args args = new getContactSettingsCategories_args();
        args.UserContactSettings = userContactSettings;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserContactSettings> recv_getContactSettingsCategories()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getContactSettingsCategories_result result = new getContactSettingsCategories_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactSettingsCategories failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getSettingsForMobile"] = getSettingsForMobile_Process;
        processMap_["getSettingForMobile"] = getSettingForMobile_Process;
        processMap_["updateSetting"] = updateSetting_Process;
        processMap_["upsertContactSetting"] = upsertContactSetting_Process;
        processMap_["getContactSettings"] = getContactSettings_Process;
        processMap_["getContactSettingsFriends"] = getContactSettingsFriends_Process;
        processMap_["getContactSettingsCategories"] = getContactSettingsCategories_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getSettingsForMobile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettingsForMobile_args args = new getSettingsForMobile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettingsForMobile_result result = new getSettingsForMobile_result();
        try {
          result.Success = iface_.getSettingsForMobile(args.UserId, args.Visibility, args.Session);
        } catch (SettingServiceException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getSettingsForMobile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSettingForMobile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettingForMobile_args args = new getSettingForMobile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettingForMobile_result result = new getSettingForMobile_result();
        try {
          result.Success = iface_.getSettingForMobile(args.UserId, args.Visibility, args.SettingId, args.Session);
        } catch (SettingServiceException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getSettingForMobile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSetting_args args = new updateSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSetting_result result = new updateSetting_result();
        try {
          result.Success = iface_.updateSetting(args.SettingTypePerson, args.Session);
        } catch (SettingServiceException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updateSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upsertContactSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upsertContactSetting_args args = new upsertContactSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upsertContactSetting_result result = new upsertContactSetting_result();
        try {
          result.Success = iface_.upsertContactSetting(args.UserContactSettings, args.Session);
        } catch (SettingServiceException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("upsertContactSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getContactSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getContactSettings_args args = new getContactSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getContactSettings_result result = new getContactSettings_result();
        try {
          result.Success = iface_.getContactSettings(args.UserContactSettings, args.Session);
        } catch (SettingServiceException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getContactSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getContactSettingsFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getContactSettingsFriends_args args = new getContactSettingsFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getContactSettingsFriends_result result = new getContactSettingsFriends_result();
        try {
          result.Success = iface_.getContactSettingsFriends(args.UserContactSettings, args.Session);
        } catch (SettingServiceException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getContactSettingsFriends", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getContactSettingsCategories_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getContactSettingsCategories_args args = new getContactSettingsCategories_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getContactSettingsCategories_result result = new getContactSettingsCategories_result();
        try {
          result.Success = iface_.getContactSettingsCategories(args.UserContactSettings, args.Session);
        } catch (SettingServiceException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getContactSettingsCategories", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettingsForMobile_args : TBase
    {
      private int _userId;
      private int _visibility;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public int Visibility
      {
        get
        {
          return _visibility;
        }
        set
        {
          __isset.visibility = true;
          this._visibility = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool visibility;
        public bool session;
      }

      public getSettingsForMobile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Visibility = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettingsForMobile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.visibility) {
          field.Name = "visibility";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Visibility);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSettingsForMobile_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.visibility) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Visibility: ");
          __sb.Append(Visibility);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettingsForMobile_result : TBase
    {
      private List<SettingPerson> _success;
      private SettingServiceException _ex;
      private SessionException _se;

      public List<SettingPerson> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SettingServiceException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getSettingsForMobile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SettingPerson>();
                  TList _list252 = iprot.ReadListBegin();
                  for( int _i253 = 0; _i253 < _list252.Count; ++_i253)
                  {
                    SettingPerson _elem254;
                    _elem254 = new SettingPerson();
                    _elem254.Read(iprot);
                    Success.Add(_elem254);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SettingServiceException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettingsForMobile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SettingPerson _iter255 in Success)
              {
                _iter255.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSettingsForMobile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettingForMobile_args : TBase
    {
      private int _userId;
      private int _visibility;
      private int _settingId;
      private Session _session;

      public int UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public int Visibility
      {
        get
        {
          return _visibility;
        }
        set
        {
          __isset.visibility = true;
          this._visibility = value;
        }
      }

      public int SettingId
      {
        get
        {
          return _settingId;
        }
        set
        {
          __isset.settingId = true;
          this._settingId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool visibility;
        public bool settingId;
        public bool session;
      }

      public getSettingForMobile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Visibility = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                SettingId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettingForMobile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.visibility) {
          field.Name = "visibility";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Visibility);
          oprot.WriteFieldEnd();
        }
        if (__isset.settingId) {
          field.Name = "settingId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SettingId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSettingForMobile_args(");
        bool __first = true;
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.visibility) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Visibility: ");
          __sb.Append(Visibility);
        }
        if (__isset.settingId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SettingId: ");
          __sb.Append(SettingId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettingForMobile_result : TBase
    {
      private SettingPerson _success;
      private SettingServiceException _ex;
      private SessionException _se;

      public SettingPerson Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SettingServiceException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getSettingForMobile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SettingPerson();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SettingServiceException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettingForMobile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSettingForMobile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSetting_args : TBase
    {
      private SettingPerson _settingTypePerson;
      private Session _session;

      public SettingPerson SettingTypePerson
      {
        get
        {
          return _settingTypePerson;
        }
        set
        {
          __isset.settingTypePerson = true;
          this._settingTypePerson = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool settingTypePerson;
        public bool session;
      }

      public updateSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SettingTypePerson = new SettingPerson();
                SettingTypePerson.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SettingTypePerson != null && __isset.settingTypePerson) {
          field.Name = "settingTypePerson";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SettingTypePerson.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateSetting_args(");
        bool __first = true;
        if (SettingTypePerson != null && __isset.settingTypePerson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SettingTypePerson: ");
          __sb.Append(SettingTypePerson== null ? "<null>" : SettingTypePerson.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSetting_result : TBase
    {
      private DbStatus _success;
      private SettingServiceException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SettingServiceException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public updateSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SettingServiceException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateSetting_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertContactSetting_args : TBase
    {
      private UserContactSettings _userContactSettings;
      private Session _session;

      public UserContactSettings UserContactSettings
      {
        get
        {
          return _userContactSettings;
        }
        set
        {
          __isset.userContactSettings = true;
          this._userContactSettings = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userContactSettings;
        public bool session;
      }

      public upsertContactSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserContactSettings = new UserContactSettings();
                UserContactSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertContactSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserContactSettings != null && __isset.userContactSettings) {
          field.Name = "userContactSettings";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserContactSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertContactSetting_args(");
        bool __first = true;
        if (UserContactSettings != null && __isset.userContactSettings) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserContactSettings: ");
          __sb.Append(UserContactSettings== null ? "<null>" : UserContactSettings.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upsertContactSetting_result : TBase
    {
      private DbStatus _success;
      private SettingServiceException _ex;
      private SessionException _se;

      public DbStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SettingServiceException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public upsertContactSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DbStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SettingServiceException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upsertContactSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upsertContactSetting_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSettings_args : TBase
    {
      private UserContactSettings _userContactSettings;
      private Session _session;

      public UserContactSettings UserContactSettings
      {
        get
        {
          return _userContactSettings;
        }
        set
        {
          __isset.userContactSettings = true;
          this._userContactSettings = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userContactSettings;
        public bool session;
      }

      public getContactSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserContactSettings = new UserContactSettings();
                UserContactSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserContactSettings != null && __isset.userContactSettings) {
          field.Name = "userContactSettings";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserContactSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSettings_args(");
        bool __first = true;
        if (UserContactSettings != null && __isset.userContactSettings) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserContactSettings: ");
          __sb.Append(UserContactSettings== null ? "<null>" : UserContactSettings.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSettings_result : TBase
    {
      private List<UserContactSettings> _success;
      private SettingServiceException _ex;
      private SessionException _se;

      public List<UserContactSettings> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SettingServiceException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getContactSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserContactSettings>();
                  TList _list256 = iprot.ReadListBegin();
                  for( int _i257 = 0; _i257 < _list256.Count; ++_i257)
                  {
                    UserContactSettings _elem258;
                    _elem258 = new UserContactSettings();
                    _elem258.Read(iprot);
                    Success.Add(_elem258);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SettingServiceException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserContactSettings _iter259 in Success)
              {
                _iter259.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSettings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSettingsFriends_args : TBase
    {
      private UserContactSettings _userContactSettings;
      private Session _session;

      public UserContactSettings UserContactSettings
      {
        get
        {
          return _userContactSettings;
        }
        set
        {
          __isset.userContactSettings = true;
          this._userContactSettings = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userContactSettings;
        public bool session;
      }

      public getContactSettingsFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserContactSettings = new UserContactSettings();
                UserContactSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSettingsFriends_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserContactSettings != null && __isset.userContactSettings) {
          field.Name = "userContactSettings";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserContactSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSettingsFriends_args(");
        bool __first = true;
        if (UserContactSettings != null && __isset.userContactSettings) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserContactSettings: ");
          __sb.Append(UserContactSettings== null ? "<null>" : UserContactSettings.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSettingsFriends_result : TBase
    {
      private List<UserContactSettings> _success;
      private SettingServiceException _ex;
      private SessionException _se;

      public List<UserContactSettings> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SettingServiceException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getContactSettingsFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserContactSettings>();
                  TList _list260 = iprot.ReadListBegin();
                  for( int _i261 = 0; _i261 < _list260.Count; ++_i261)
                  {
                    UserContactSettings _elem262;
                    _elem262 = new UserContactSettings();
                    _elem262.Read(iprot);
                    Success.Add(_elem262);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SettingServiceException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSettingsFriends_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserContactSettings _iter263 in Success)
              {
                _iter263.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSettingsFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSettingsCategories_args : TBase
    {
      private UserContactSettings _userContactSettings;
      private Session _session;

      public UserContactSettings UserContactSettings
      {
        get
        {
          return _userContactSettings;
        }
        set
        {
          __isset.userContactSettings = true;
          this._userContactSettings = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userContactSettings;
        public bool session;
      }

      public getContactSettingsCategories_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UserContactSettings = new UserContactSettings();
                UserContactSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSettingsCategories_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserContactSettings != null && __isset.userContactSettings) {
          field.Name = "userContactSettings";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UserContactSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSettingsCategories_args(");
        bool __first = true;
        if (UserContactSettings != null && __isset.userContactSettings) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserContactSettings: ");
          __sb.Append(UserContactSettings== null ? "<null>" : UserContactSettings.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContactSettingsCategories_result : TBase
    {
      private List<UserContactSettings> _success;
      private SettingServiceException _ex;
      private SessionException _se;

      public List<UserContactSettings> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SettingServiceException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getContactSettingsCategories_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserContactSettings>();
                  TList _list264 = iprot.ReadListBegin();
                  for( int _i265 = 0; _i265 < _list264.Count; ++_i265)
                  {
                    UserContactSettings _elem266;
                    _elem266 = new UserContactSettings();
                    _elem266.Read(iprot);
                    Success.Add(_elem266);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SettingServiceException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContactSettingsCategories_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserContactSettings _iter267 in Success)
              {
                _iter267.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getContactSettingsCategories_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
