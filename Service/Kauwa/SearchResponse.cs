/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SearchResponse : TBase
  {
    private bool _error;
    private string _response;
    private string _channel;

    public bool Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }

    public string Response
    {
      get
      {
        return _response;
      }
      set
      {
        __isset.response = true;
        this._response = value;
      }
    }

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool error;
      public bool response;
      public bool channel;
    }

    public SearchResponse() {
      this._error = false;
      this.__isset.error = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Error = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Response = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Channel = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SearchResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.error) {
        field.Name = "error";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Error);
        oprot.WriteFieldEnd();
      }
      if (Response != null && __isset.response) {
        field.Name = "response";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Response);
        oprot.WriteFieldEnd();
      }
      if (Channel != null && __isset.channel) {
        field.Name = "channel";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Channel);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SearchResponse(");
      bool __first = true;
      if (__isset.error) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Error: ");
        __sb.Append(Error);
      }
      if (Response != null && __isset.response) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Response: ");
        __sb.Append(Response);
      }
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
