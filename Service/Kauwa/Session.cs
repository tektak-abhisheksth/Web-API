/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  /// <summary>
  /// Used By Session Service
  /// 
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Session : TBase
  {
    private string _sessionToken;
    private string _userId;
    private string _transportIp;
    private int _transportPort;
    private List<string> _blockUsers;
    private string _deviceId;
    private bool _replay;
    private bool _isMobile;
    private int _iUserId;
    private string _modelName;
    private string _deviceType;
    private string _pushCode;
    private string _pushType;
    private long _lastActivity;

    /// <summary>
    /// <ul>
    ///    <li>Session token is received when user is authenticated</li>
    ///    <li>Each request to service layer should pass this token.</li>
    ///    <li>If no session token is passed than service layer will throw session exception</li>
    /// </ul>
    /// </summary>
    public string SessionToken
    {
      get
      {
        return _sessionToken;
      }
      set
      {
        __isset.sessionToken = true;
        this._sessionToken = value;
      }
    }

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    /// <summary>
    /// <ul>
    ///    <li>Ip address of broker where user is connected.</li>
    ///    <li>For mobile users they should send this field while notifiy message exchanger about their presence in broker</li>
    ///    <li>For web users this is determined automatically by kauwa service. So no need to pass.</li>
    /// </ul>
    /// </summary>
    public string TransportIp
    {
      get
      {
        return _transportIp;
      }
      set
      {
        __isset.transportIp = true;
        this._transportIp = value;
      }
    }

    /// <summary>
    /// <ul>
    ///    <li>Port of broker where user is connected.</li>
    ///    <li>For mobile users they should send this field while notifiy message exchanger about their presence in broker</li>
    ///    <li>For web users this is determined automatically by kauwa service. So no need to pass.</li>
    /// </ul>
    /// </summary>
    public int TransportPort
    {
      get
      {
        return _transportPort;
      }
      set
      {
        __isset.transportPort = true;
        this._transportPort = value;
      }
    }

    /// <summary>
    /// <ul>
    ///    <li>This is list of user ids which are used to block the connections</li>
    ///    <li>For more detail see message exchanging specification</li>
    /// </ul>
    /// </summary>
    public List<string> BlockUsers
    {
      get
      {
        return _blockUsers;
      }
      set
      {
        __isset.blockUsers = true;
        this._blockUsers = value;
      }
    }

    /// <summary>
    /// <ul>
    ///        <li>Device Id from where user is logged in.</li>
    ///        <li>This device id is used to stick the session token. So it required field.</li>
    ///        <li>For Web users this can be UserAgent hash value</li>
    /// </ul>
    /// </summary>
    public string DeviceId
    {
      get
      {
        return _deviceId;
      }
      set
      {
        __isset.deviceId = true;
        this._deviceId = value;
      }
    }

    /// <summary>
    /// <ul>
    ///     <li>Replay is used for long sessions.</li>
    ///     <li>In normal case session will timeout in 18 mins if no acctivity is occured.</li>
    ///     <li>Session can be replayed if they are expired/</li>
    ///     <li>For this replay token should be true. Default value is false.</li>
    /// </ul>
    /// </summary>
    public bool Replay
    {
      get
      {
        return _replay;
      }
      set
      {
        __isset.replay = true;
        this._replay = value;
      }
    }

    public bool IsMobile
    {
      get
      {
        return _isMobile;
      }
      set
      {
        __isset.isMobile = true;
        this._isMobile = value;
      }
    }

    public int IUserId
    {
      get
      {
        return _iUserId;
      }
      set
      {
        __isset.iUserId = true;
        this._iUserId = value;
      }
    }

    public string ModelName
    {
      get
      {
        return _modelName;
      }
      set
      {
        __isset.modelName = true;
        this._modelName = value;
      }
    }

    public string DeviceType
    {
      get
      {
        return _deviceType;
      }
      set
      {
        __isset.deviceType = true;
        this._deviceType = value;
      }
    }

    public string PushCode
    {
      get
      {
        return _pushCode;
      }
      set
      {
        __isset.pushCode = true;
        this._pushCode = value;
      }
    }

    public string PushType
    {
      get
      {
        return _pushType;
      }
      set
      {
        __isset.pushType = true;
        this._pushType = value;
      }
    }

    public long LastActivity
    {
      get
      {
        return _lastActivity;
      }
      set
      {
        __isset.lastActivity = true;
        this._lastActivity = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionToken;
      public bool userId;
      public bool transportIp;
      public bool transportPort;
      public bool blockUsers;
      public bool deviceId;
      public bool replay;
      public bool isMobile;
      public bool iUserId;
      public bool modelName;
      public bool deviceType;
      public bool pushCode;
      public bool pushType;
      public bool lastActivity;
    }

    public Session() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SessionToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TransportIp = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              TransportPort = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                BlockUsers = new List<string>();
                TList _list28 = iprot.ReadListBegin();
                for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                {
                  string _elem30;
                  _elem30 = iprot.ReadString();
                  BlockUsers.Add(_elem30);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              DeviceId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              Replay = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              IsMobile = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              IUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              ModelName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              DeviceType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              PushCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              PushType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              LastActivity = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Session");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SessionToken != null && __isset.sessionToken) {
        field.Name = "sessionToken";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionToken);
        oprot.WriteFieldEnd();
      }
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (TransportIp != null && __isset.transportIp) {
        field.Name = "transportIp";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TransportIp);
        oprot.WriteFieldEnd();
      }
      if (__isset.transportPort) {
        field.Name = "transportPort";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TransportPort);
        oprot.WriteFieldEnd();
      }
      if (BlockUsers != null && __isset.blockUsers) {
        field.Name = "blockUsers";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, BlockUsers.Count));
          foreach (string _iter31 in BlockUsers)
          {
            oprot.WriteString(_iter31);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (DeviceId != null && __isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.replay) {
        field.Name = "replay";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Replay);
        oprot.WriteFieldEnd();
      }
      if (__isset.isMobile) {
        field.Name = "isMobile";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsMobile);
        oprot.WriteFieldEnd();
      }
      if (__isset.iUserId) {
        field.Name = "iUserId";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IUserId);
        oprot.WriteFieldEnd();
      }
      if (ModelName != null && __isset.modelName) {
        field.Name = "modelName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ModelName);
        oprot.WriteFieldEnd();
      }
      if (DeviceType != null && __isset.deviceType) {
        field.Name = "deviceType";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceType);
        oprot.WriteFieldEnd();
      }
      if (PushCode != null && __isset.pushCode) {
        field.Name = "pushCode";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PushCode);
        oprot.WriteFieldEnd();
      }
      if (PushType != null && __isset.pushType) {
        field.Name = "pushType";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PushType);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastActivity) {
        field.Name = "lastActivity";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastActivity);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Session(");
      bool __first = true;
      if (SessionToken != null && __isset.sessionToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionToken: ");
        __sb.Append(SessionToken);
      }
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (TransportIp != null && __isset.transportIp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TransportIp: ");
        __sb.Append(TransportIp);
      }
      if (__isset.transportPort) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TransportPort: ");
        __sb.Append(TransportPort);
      }
      if (BlockUsers != null && __isset.blockUsers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlockUsers: ");
        __sb.Append(BlockUsers);
      }
      if (DeviceId != null && __isset.deviceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceId: ");
        __sb.Append(DeviceId);
      }
      if (__isset.replay) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Replay: ");
        __sb.Append(Replay);
      }
      if (__isset.isMobile) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsMobile: ");
        __sb.Append(IsMobile);
      }
      if (__isset.iUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IUserId: ");
        __sb.Append(IUserId);
      }
      if (ModelName != null && __isset.modelName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModelName: ");
        __sb.Append(ModelName);
      }
      if (DeviceType != null && __isset.deviceType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceType: ");
        __sb.Append(DeviceType);
      }
      if (PushCode != null && __isset.pushCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushCode: ");
        __sb.Append(PushCode);
      }
      if (PushType != null && __isset.pushType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PushType: ");
        __sb.Append(PushType);
      }
      if (__isset.lastActivity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastActivity: ");
        __sb.Append(LastActivity);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
