/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserInfo : TBase
  {
    private int _userId;
    private short _userTypeId;
    private string _timeZone;
    private string _joinedDate;
    private string _countryCode;
    private string _visibility;
    private string _headLine;
    private string _about;
    private string _url;
    private string _picture;
    private string _lastUpdated;
    private string _address;
    private string _userName;
    private string _fullName;
    private string _title;
    private string _email;
    private string _firstName;
    private string _lastName;
    private Status _status;
    private string _positionName;
    private string _callNumber;
    private bool _availableForMsg;
    private short _statusTypeId;
    private short _receptionMode;

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public short UserTypeId
    {
      get
      {
        return _userTypeId;
      }
      set
      {
        __isset.userTypeId = true;
        this._userTypeId = value;
      }
    }

    public string TimeZone
    {
      get
      {
        return _timeZone;
      }
      set
      {
        __isset.timeZone = true;
        this._timeZone = value;
      }
    }

    public string JoinedDate
    {
      get
      {
        return _joinedDate;
      }
      set
      {
        __isset.joinedDate = true;
        this._joinedDate = value;
      }
    }

    public string CountryCode
    {
      get
      {
        return _countryCode;
      }
      set
      {
        __isset.countryCode = true;
        this._countryCode = value;
      }
    }

    public string Visibility
    {
      get
      {
        return _visibility;
      }
      set
      {
        __isset.visibility = true;
        this._visibility = value;
      }
    }

    public string HeadLine
    {
      get
      {
        return _headLine;
      }
      set
      {
        __isset.headLine = true;
        this._headLine = value;
      }
    }

    public string About
    {
      get
      {
        return _about;
      }
      set
      {
        __isset.about = true;
        this._about = value;
      }
    }

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public string Picture
    {
      get
      {
        return _picture;
      }
      set
      {
        __isset.picture = true;
        this._picture = value;
      }
    }

    public string LastUpdated
    {
      get
      {
        return _lastUpdated;
      }
      set
      {
        __isset.lastUpdated = true;
        this._lastUpdated = value;
      }
    }

    public string Address
    {
      get
      {
        return _address;
      }
      set
      {
        __isset.address = true;
        this._address = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string FullName
    {
      get
      {
        return _fullName;
      }
      set
      {
        __isset.fullName = true;
        this._fullName = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string FirstName
    {
      get
      {
        return _firstName;
      }
      set
      {
        __isset.firstName = true;
        this._firstName = value;
      }
    }

    public string LastName
    {
      get
      {
        return _lastName;
      }
      set
      {
        __isset.lastName = true;
        this._lastName = value;
      }
    }

    public Status Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public string PositionName
    {
      get
      {
        return _positionName;
      }
      set
      {
        __isset.positionName = true;
        this._positionName = value;
      }
    }

    public string CallNumber
    {
      get
      {
        return _callNumber;
      }
      set
      {
        __isset.callNumber = true;
        this._callNumber = value;
      }
    }

    public bool AvailableForMsg
    {
      get
      {
        return _availableForMsg;
      }
      set
      {
        __isset.availableForMsg = true;
        this._availableForMsg = value;
      }
    }

    public short StatusTypeId
    {
      get
      {
        return _statusTypeId;
      }
      set
      {
        __isset.statusTypeId = true;
        this._statusTypeId = value;
      }
    }

    public short ReceptionMode
    {
      get
      {
        return _receptionMode;
      }
      set
      {
        __isset.receptionMode = true;
        this._receptionMode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool userTypeId;
      public bool timeZone;
      public bool joinedDate;
      public bool countryCode;
      public bool visibility;
      public bool headLine;
      public bool about;
      public bool url;
      public bool picture;
      public bool lastUpdated;
      public bool address;
      public bool userName;
      public bool fullName;
      public bool title;
      public bool email;
      public bool firstName;
      public bool lastName;
      public bool status;
      public bool positionName;
      public bool callNumber;
      public bool availableForMsg;
      public bool statusTypeId;
      public bool receptionMode;
    }

    public UserInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              UserTypeId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TimeZone = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              JoinedDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              CountryCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Visibility = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              HeadLine = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              About = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Picture = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              LastUpdated = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Address = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              FullName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Email = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              FirstName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              LastName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Struct) {
              Status = new Status();
              Status.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              PositionName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              CallNumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Bool) {
              AvailableForMsg = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I16) {
              StatusTypeId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I16) {
              ReceptionMode = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userTypeId) {
        field.Name = "userTypeId";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(UserTypeId);
        oprot.WriteFieldEnd();
      }
      if (TimeZone != null && __isset.timeZone) {
        field.Name = "timeZone";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TimeZone);
        oprot.WriteFieldEnd();
      }
      if (JoinedDate != null && __isset.joinedDate) {
        field.Name = "joinedDate";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JoinedDate);
        oprot.WriteFieldEnd();
      }
      if (CountryCode != null && __isset.countryCode) {
        field.Name = "countryCode";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CountryCode);
        oprot.WriteFieldEnd();
      }
      if (Visibility != null && __isset.visibility) {
        field.Name = "visibility";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Visibility);
        oprot.WriteFieldEnd();
      }
      if (HeadLine != null && __isset.headLine) {
        field.Name = "headLine";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HeadLine);
        oprot.WriteFieldEnd();
      }
      if (About != null && __isset.about) {
        field.Name = "about";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(About);
        oprot.WriteFieldEnd();
      }
      if (Url != null && __isset.url) {
        field.Name = "url";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (Picture != null && __isset.picture) {
        field.Name = "picture";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Picture);
        oprot.WriteFieldEnd();
      }
      if (LastUpdated != null && __isset.lastUpdated) {
        field.Name = "lastUpdated";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastUpdated);
        oprot.WriteFieldEnd();
      }
      if (Address != null && __isset.address) {
        field.Name = "address";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Address);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (FullName != null && __isset.fullName) {
        field.Name = "fullName";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FullName);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Email != null && __isset.email) {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Email);
        oprot.WriteFieldEnd();
      }
      if (FirstName != null && __isset.firstName) {
        field.Name = "firstName";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FirstName);
        oprot.WriteFieldEnd();
      }
      if (LastName != null && __isset.lastName) {
        field.Name = "lastName";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastName);
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.Struct;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        Status.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PositionName != null && __isset.positionName) {
        field.Name = "positionName";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PositionName);
        oprot.WriteFieldEnd();
      }
      if (CallNumber != null && __isset.callNumber) {
        field.Name = "callNumber";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CallNumber);
        oprot.WriteFieldEnd();
      }
      if (__isset.availableForMsg) {
        field.Name = "availableForMsg";
        field.Type = TType.Bool;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AvailableForMsg);
        oprot.WriteFieldEnd();
      }
      if (__isset.statusTypeId) {
        field.Name = "statusTypeId";
        field.Type = TType.I16;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(StatusTypeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.receptionMode) {
        field.Name = "receptionMode";
        field.Type = TType.I16;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ReceptionMode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserInfo(");
      bool __first = true;
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.userTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserTypeId: ");
        __sb.Append(UserTypeId);
      }
      if (TimeZone != null && __isset.timeZone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeZone: ");
        __sb.Append(TimeZone);
      }
      if (JoinedDate != null && __isset.joinedDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JoinedDate: ");
        __sb.Append(JoinedDate);
      }
      if (CountryCode != null && __isset.countryCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CountryCode: ");
        __sb.Append(CountryCode);
      }
      if (Visibility != null && __isset.visibility) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Visibility: ");
        __sb.Append(Visibility);
      }
      if (HeadLine != null && __isset.headLine) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HeadLine: ");
        __sb.Append(HeadLine);
      }
      if (About != null && __isset.about) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("About: ");
        __sb.Append(About);
      }
      if (Url != null && __isset.url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (Picture != null && __isset.picture) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Picture: ");
        __sb.Append(Picture);
      }
      if (LastUpdated != null && __isset.lastUpdated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastUpdated: ");
        __sb.Append(LastUpdated);
      }
      if (Address != null && __isset.address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Address: ");
        __sb.Append(Address);
      }
      if (UserName != null && __isset.userName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserName: ");
        __sb.Append(UserName);
      }
      if (FullName != null && __isset.fullName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FullName: ");
        __sb.Append(FullName);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (FirstName != null && __isset.firstName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstName: ");
        __sb.Append(FirstName);
      }
      if (LastName != null && __isset.lastName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastName: ");
        __sb.Append(LastName);
      }
      if (Status != null && __isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status== null ? "<null>" : Status.ToString());
      }
      if (PositionName != null && __isset.positionName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PositionName: ");
        __sb.Append(PositionName);
      }
      if (CallNumber != null && __isset.callNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CallNumber: ");
        __sb.Append(CallNumber);
      }
      if (__isset.availableForMsg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AvailableForMsg: ");
        __sb.Append(AvailableForMsg);
      }
      if (__isset.statusTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusTypeId: ");
        __sb.Append(StatusTypeId);
      }
      if (__isset.receptionMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceptionMode: ");
        __sb.Append(ReceptionMode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
