/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChatUserInfo : TBase
  {
    private List<string> _groupIds;
    private List<ChatBlockedInstance> _blockedInstance;
    private List<ChatMutedInstance> _mutedInstance;
    private List<ChatUserBlockedInstance> _userBlockedInstance;
    private List<ChatMutedUser> _muteUsers;

    public List<string> GroupIds
    {
      get
      {
        return _groupIds;
      }
      set
      {
        __isset.groupIds = true;
        this._groupIds = value;
      }
    }

    public List<ChatBlockedInstance> BlockedInstance
    {
      get
      {
        return _blockedInstance;
      }
      set
      {
        __isset.blockedInstance = true;
        this._blockedInstance = value;
      }
    }

    public List<ChatMutedInstance> MutedInstance
    {
      get
      {
        return _mutedInstance;
      }
      set
      {
        __isset.mutedInstance = true;
        this._mutedInstance = value;
      }
    }

    public List<ChatUserBlockedInstance> UserBlockedInstance
    {
      get
      {
        return _userBlockedInstance;
      }
      set
      {
        __isset.userBlockedInstance = true;
        this._userBlockedInstance = value;
      }
    }

    public List<ChatMutedUser> MuteUsers
    {
      get
      {
        return _muteUsers;
      }
      set
      {
        __isset.muteUsers = true;
        this._muteUsers = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupIds;
      public bool blockedInstance;
      public bool mutedInstance;
      public bool userBlockedInstance;
      public bool muteUsers;
    }

    public ChatUserInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                GroupIds = new List<string>();
                TList _list76 = iprot.ReadListBegin();
                for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                {
                  string _elem78;
                  _elem78 = iprot.ReadString();
                  GroupIds.Add(_elem78);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                BlockedInstance = new List<ChatBlockedInstance>();
                TList _list79 = iprot.ReadListBegin();
                for( int _i80 = 0; _i80 < _list79.Count; ++_i80)
                {
                  ChatBlockedInstance _elem81;
                  _elem81 = new ChatBlockedInstance();
                  _elem81.Read(iprot);
                  BlockedInstance.Add(_elem81);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                MutedInstance = new List<ChatMutedInstance>();
                TList _list82 = iprot.ReadListBegin();
                for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                {
                  ChatMutedInstance _elem84;
                  _elem84 = new ChatMutedInstance();
                  _elem84.Read(iprot);
                  MutedInstance.Add(_elem84);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                UserBlockedInstance = new List<ChatUserBlockedInstance>();
                TList _list85 = iprot.ReadListBegin();
                for( int _i86 = 0; _i86 < _list85.Count; ++_i86)
                {
                  ChatUserBlockedInstance _elem87;
                  _elem87 = new ChatUserBlockedInstance();
                  _elem87.Read(iprot);
                  UserBlockedInstance.Add(_elem87);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                MuteUsers = new List<ChatMutedUser>();
                TList _list88 = iprot.ReadListBegin();
                for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                {
                  ChatMutedUser _elem90;
                  _elem90 = new ChatMutedUser();
                  _elem90.Read(iprot);
                  MuteUsers.Add(_elem90);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ChatUserInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (GroupIds != null && __isset.groupIds) {
        field.Name = "groupIds";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, GroupIds.Count));
          foreach (string _iter91 in GroupIds)
          {
            oprot.WriteString(_iter91);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BlockedInstance != null && __isset.blockedInstance) {
        field.Name = "blockedInstance";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BlockedInstance.Count));
          foreach (ChatBlockedInstance _iter92 in BlockedInstance)
          {
            _iter92.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MutedInstance != null && __isset.mutedInstance) {
        field.Name = "mutedInstance";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MutedInstance.Count));
          foreach (ChatMutedInstance _iter93 in MutedInstance)
          {
            _iter93.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (UserBlockedInstance != null && __isset.userBlockedInstance) {
        field.Name = "userBlockedInstance";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, UserBlockedInstance.Count));
          foreach (ChatUserBlockedInstance _iter94 in UserBlockedInstance)
          {
            _iter94.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MuteUsers != null && __isset.muteUsers) {
        field.Name = "muteUsers";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MuteUsers.Count));
          foreach (ChatMutedUser _iter95 in MuteUsers)
          {
            _iter95.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChatUserInfo(");
      bool __first = true;
      if (GroupIds != null && __isset.groupIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupIds: ");
        __sb.Append(GroupIds);
      }
      if (BlockedInstance != null && __isset.blockedInstance) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlockedInstance: ");
        __sb.Append(BlockedInstance);
      }
      if (MutedInstance != null && __isset.mutedInstance) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutedInstance: ");
        __sb.Append(MutedInstance);
      }
      if (UserBlockedInstance != null && __isset.userBlockedInstance) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserBlockedInstance: ");
        __sb.Append(UserBlockedInstance);
      }
      if (MuteUsers != null && __isset.muteUsers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MuteUsers: ");
        __sb.Append(MuteUsers);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
