@using Humanizer
@using Utility
<style>
    .qa {
        margin-top: 25px;
    }

    div[name=answer] {
        margin: 0 25px 0 25px;
    }
</style>
<div class="jumbotron" style="box-shadow: 0 5px 8px rgba(0,0,0,0.5);"><h1 class="engraved" style="color: #B2B2B2">FAQs</h1></div>
This section provides answers to the common and frequently asked questions.
Last updated on <strong>@(new DateTime(2015, 6, 18).ToLongDateString())</strong>.
<br /><br />
<div class="SystemlistStyle3">
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                What is a temporary token?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                A temporary token is a time-based expiry token generated by the server. Temporary tokens are required for special cases when user is requesting open-APIs, i.e., APIs that might be required when there is no provision or possibility of user being already signed-in.
            </p>
            <p>
                This token is specific to the machine (server), and expires after the time duration set at the admin panel (See @Html.ActionLink("Settings", "Settings")) elapses (Currently, it is set to expire in @("minute".ToQuantity(SystemConstants.TemporaryTokenExpiryTimeInMinutes, ShowQuantityAs.Words))). First, a call to the server to request the token should be made. The request should include a valid device ID code. The returned temporary token is bound with the device ID itself and will not work if the device ID is changed.
            </p>
            <p>
                Once a valid token is obtained, all subsequent requests made to such open-APIs should contain the same device ID, either in the request URI or body of the request, and the temporary token in the "Authorization" header of the request.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                What is an authorization token?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                An authorization token is an encoded string that needs to be sent to the server each time a signed-in user calls closed-APIs. The token should be included in the "Authorization" header of the request.
            </p>
            <p>
                Authorization token is required for all regular API calls. All necessary information required for the server to identify the user are encoded in the authorization token. It is a base64 encoded string of the format {userid:username:usertypeid:devicetypeid:deviceid:token} (without braces).
                <ul>
                    <li>User ID: A unique integer value assigned to the user by the system. Returned on login.</li>
                    <li>User name: A unique identifying name chosen by the user to communicate with the system. Returned on login.</li>
                    <li>User type ID: An integer indicating as to whether the user is personal user or business user. Returned on login.</li>
                    <li>Device type ID: An alphabet indicating the device type (A, I or W representing Android, iOS, or Web). Supplied by the device itself.</li>
                    <li>Device ID: A unique identity of the device that the server tracks. Generated on the device itself.</li>
                    <li>Token: A string returned when invoking login API. Returned on login.</li>
                </ul>
            </p>
            <p>
                Once the information are obtained via the login API, authorization token should be generated using the above specified format. All subsequent requests made to closed-APIs should contain the same authorization token in the "Authorization" header of the request.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                My project requires me to use XML and not JSON. Is it possible?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                Yes. We support both JSON and XML.
            </p>
            <p>
                Developer can send an optional header "Content-Type" with the value of "application/xml" to indicate that the payload being sent is an XML. The "application/json" is the default and isn't required to be sent. To indicate the server to return response in XML, send an optional header "Accept" with the value of "application/xml". The "application/json" is the default and isn't required to be sent.
            </p>
            <p>
                Using optional headers "Content-Type" and "Accept", developers can specify the format of the data being transferred. This flexibility allows developers to, if ever the need arises, send a request in XML but receive the response in JSON and vice versa.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                The JSON returned by the system is not camel cased. Does the system not support camel cases?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                Yes, the server has configuration to support camel casing.
            </p>
            <p>
                The payload in request sent to the server can be of any case, the server really does not make any difference. The @Html.ActionLink("Settings", "Settings") panel has an option to make all requests camel cased, but that will affect all clients. If you strictly need to send and receive camel cased payloads, you can send an optional header key "Format" with a value "C" which will override the default setting and the JSON response's properties will be received in camel case.
            </p>
            <p>
                By default, camel casing is turned off as requested by our existing developers.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                My system does not support PUT and DELETE, but only GET and POST. How do I access PUT and DELETE requests?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                The server supports request tunneling to change one request method with another.
            </p>
            <p>
                Append the required HTTP verb (PUT or DELETE) at the end of the request itself, as simple as that. The server will treat the request as the verb appended. For example, for any given API "Friend", a POST request on "Friend/DELETE" will be treated as a DELETE request on "Friend". See @Html.ActionLink("Dev Notes", "Dev", null, null, null, "tunneling", null, null) for details.
            </p>
            <p>
                Request tunneling helps constrained clients effectively call unsupported HTTP methods. So developers can work seamlessly using only GET and POST.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                I need to compress my requests/responses. Is content encoding or stream compression supported?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                Yes, the server supports compressions to reduce data flow.
            </p>
            <p>
                Just add an optional header "Accept-Encoding" with a value "gzip", "deflate", or "gzip, deflate". See @Html.ActionLink("Dev Notes", "Dev", null, null, null, "compression", null, null) for details.
            </p>
            <p>
                Compression is useful for text body with large data, but is not beneficial for short texts and image/audio/video types.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                I am getting few of my requests dropped from the server. What am I doing wrong?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                The server can set upperlimit to the maximum number of requests allowed from a single device.
            </p>
            <p>
                Server can impose a restriction on the number of requests that can be sent from a device per second, minute, hour, day or week. For example, the upper limit of requests per second allowed is @SystemConstants.CallQuotaPerSecond. If required, special clients can also request clients or IPs whitelisting or altered/custom restrictions. Server may also blacklist certain clients or IPs.
            </p>
            <p>
                To prevent unwanted requests flood the system and prevent potential DOS attacks, throttling of requests is done both at IIS level (response status 403) and application level (response status 429).
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                Why are individual elements colored across the site?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                The site color-codes notes, APIs, conventions, and logs separately.
            </p>
            <p>
                Some elements are specific to web clients. Others, to mobile clients. The rest are general to both. As such, we have color-coded them according to classification. This can be controlled via <a href="#" onmouseover=" panelDown()">Defaults Panel</a>.
            </p>
            <p>
                If you feel unpleasant, you can disable the color-coding altogether.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                Why do I need discussion boards? When should I use one?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                Discussion boards allow developers to discuss general or specific topics with other developers and the moderators.
            </p>
            <p>
                Discussion boards help developers ask questions they have doubts about. They can also be used to request changes. For example, some missing server-side validations that should have been added to any specific API. These can also be used to request additions, changes or removal of APIs, developer notes, conventions, settings, or FAQs themselves.
            </p>
            <p>
                We highly encourage developers to make use of discussion. These can be helpful for new developers too. If not promptly replied, email the <a title="If your browser is setup for email, clicking here will let you send us an email." href="mailto:indira.sapkota@tektak.com?subject= About Web API&amp;cc=Abhisheksth@tektak.com">Web API team</a>.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                How do I use trace?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                The @Html.ActionLink("Trace", "Trace") provides the details of any and all live requests that server is currently serving.
            </p>
            <p>
                The details of the requests are enlisted in the page. Information such as the category of API, name and HTTP method, user name of the user who made the request, the time of the request, the device from which the request originated, the login token used, the authorization key used, along with the entire request and response bodies. Developer can copy the request and visit the API page directly to replicate the scenario. Developer can also set the trace's authorization to be the default for the browser, for future API calls. For the sake of easy notification by moderators, when an error (5xx Http status codes) occurs, the page makes an alert sound, which is completely normal. Developers can filter results to only see correct, warning or error entries.
            </p>
            <p>
                We highly encourage developers to make use of discussion. These can be helpful for new developers too. If not promptly replied, email the <a title="If your browser is setup for email, clicking here will let you send us an email." href="mailto:indira.sapkota@tektak.com?subject= About Web API&amp;cc=Abhisheksth@tektak.com">Web API team</a>.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->
    <!--#region QA-->
    <div class="qa">
        <span href="#" name="displayArrow">
            <img title="Collapse." src="~/Images/ArrowRight.png" />
            <a href="#" style="font-weight: bold">
                I have some confusion and/or problem that I am unable to understand/find. What should I do?
            </a>
        </span>
        <div name="answer" style="display: none">
            <p>
                The site is itself self-explanatory. We have tried our best to make things easily understandable, smoother and intuitively user-friendly.
            </p>
            <p>
                <ol>
                    <li>Each API gets auto-documented as they are developed.</li>
                    <li>Ample amount of descriptive texts aid in better understanding, from APIs to individual properties. Individual APIs with description, request body and parameters with description with validation details, response body and parameters with description, conventions used with description, all are provided and properly documented across the site.</li>
                    <li>Samples generated from live data are displayed in both JSON and XML formats to help developer better understand the payload requirements.</li>
                    <li>If in doubt, developer can test the API live by the "Try it!" feature for each API. This stimulates a live server call.</li>
                    <li>Live valid tokens can be pulled from the server via from the <a href="#" onmouseover=" panelDown()">Defaults Panel</a>  without the hassle of generating token manually and worrying if it will expire. Most recent and valid token is received and persisted on the browser, and is defaulted for every subsequent requests made. The developer can also just enter own token of choice.</li>
                    <li>@Html.ActionLink("Trace", "Trace") lists all live requests with abundant details, and helps observe server activities and trace recent API request(s) made.</li>
                    <li>@Html.ActionLink("Dev Notes", "Dev") assist in understanding the technical details of the workflow.</li>
                    <li>@Html.ActionLink("Conventions", "Conventions") lists the conventions the system follows, along with respective descriptions.</li>
                    <li>Progress and changes are logged for convenience.</li>
                    <li>Legends assist in providing extra details and or conditions/restrictions imposed on notes, APIs, conventions, among others.</li>
                    <li>Report a bug feature allows developer to submit a bug with description, time, and full request and response to the developer.</li>
                    <li>Discussion threads are available at the bottom of almost all pages in the site. Developers are encouraged to initiate and participate in discussions, or join any hot discussions.</li>
                </ol>
            </p>
            <p>
                You can always contact the <a title="If your browser is setup for email, clicking here will let you send us an email." href="mailto:indira.sapkota@tektak.com?subject= About Web API&amp;cc=Abhisheksth@tektak.com">Web API team</a> in case you are still in confusion. We are happy to help.
            </p>
            <hr />
        </div>
    </div>
    <!--#endregion-->

</div>
<p>&nbsp;</p>
@{ Disqus.Initialize("iloopwebapi"); }
@Disqus.ShowComments("faq")

<script>
    function showHide(e, displayAnswer) {
        var elem = $(e).parent("div");
        var rImg = "/Images/ArrowRight.png";
        var dImg = "/Images/ArrowDown.png";
        var im = $(elem).find("img");
        if (displayAnswer == null)
            displayAnswer = ($(im).attr('src') === rImg);
        if (displayAnswer) {
            $(im).attr('title', 'Collapse.');
            $(im).attr('src', dImg);
            $(elem).find("[name=answer]").slideDown('slow');
        } else {
            $(im).attr('title', 'Expand.');
            $(im).attr('src', rImg);
            $(elem).find("[name=answer]").slideUp('slow');
        }
    }

    function bindArrow(d) {
        $(d).click(function (event) {
            event.preventDefault();
            showHide(this, null);

        });
    }
    $('[name=displayArrow]').each(function (i, d) {
        bindArrow(d);
    });
</script>