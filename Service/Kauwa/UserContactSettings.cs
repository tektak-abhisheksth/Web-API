/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserContactSettings : TBase
  {
    private int _userId;
    private int _fieldId;
    private int _contactChatNetworkId;
    private int _value;
    private short _mode;
    private long _contactCustomId;
    private long _contactId;
    private string _entriesInPage;
    private string _entryList;
    private bool _isDefault;
    private bool _isBasicPrimary;
    private UserInfo _userInfo;
    private UserInfoPerson _userInfoPerson;
    private User _user;
    private UserCategory _userCategory;

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int FieldId
    {
      get
      {
        return _fieldId;
      }
      set
      {
        __isset.fieldId = true;
        this._fieldId = value;
      }
    }

    public int ContactChatNetworkId
    {
      get
      {
        return _contactChatNetworkId;
      }
      set
      {
        __isset.contactChatNetworkId = true;
        this._contactChatNetworkId = value;
      }
    }

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public short Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public long ContactCustomId
    {
      get
      {
        return _contactCustomId;
      }
      set
      {
        __isset.contactCustomId = true;
        this._contactCustomId = value;
      }
    }

    public long ContactId
    {
      get
      {
        return _contactId;
      }
      set
      {
        __isset.contactId = true;
        this._contactId = value;
      }
    }

    public string EntriesInPage
    {
      get
      {
        return _entriesInPage;
      }
      set
      {
        __isset.entriesInPage = true;
        this._entriesInPage = value;
      }
    }

    public string EntryList
    {
      get
      {
        return _entryList;
      }
      set
      {
        __isset.entryList = true;
        this._entryList = value;
      }
    }

    public bool IsDefault
    {
      get
      {
        return _isDefault;
      }
      set
      {
        __isset.isDefault = true;
        this._isDefault = value;
      }
    }

    public bool IsBasicPrimary
    {
      get
      {
        return _isBasicPrimary;
      }
      set
      {
        __isset.isBasicPrimary = true;
        this._isBasicPrimary = value;
      }
    }

    public UserInfo UserInfo
    {
      get
      {
        return _userInfo;
      }
      set
      {
        __isset.userInfo = true;
        this._userInfo = value;
      }
    }

    public UserInfoPerson UserInfoPerson
    {
      get
      {
        return _userInfoPerson;
      }
      set
      {
        __isset.userInfoPerson = true;
        this._userInfoPerson = value;
      }
    }

    public User User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }

    public UserCategory UserCategory
    {
      get
      {
        return _userCategory;
      }
      set
      {
        __isset.userCategory = true;
        this._userCategory = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool fieldId;
      public bool contactChatNetworkId;
      public bool @value;
      public bool mode;
      public bool contactCustomId;
      public bool contactId;
      public bool entriesInPage;
      public bool entryList;
      public bool isDefault;
      public bool isBasicPrimary;
      public bool userInfo;
      public bool userInfoPerson;
      public bool user;
      public bool userCategory;
    }

    public UserContactSettings() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              FieldId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ContactChatNetworkId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Value = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Mode = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              ContactCustomId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              ContactId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              EntriesInPage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              EntryList = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              IsDefault = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              IsBasicPrimary = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              UserInfo = new UserInfo();
              UserInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Struct) {
              UserInfoPerson = new UserInfoPerson();
              UserInfoPerson.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Struct) {
              User = new User();
              User.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Struct) {
              UserCategory = new UserCategory();
              UserCategory.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserContactSettings");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.fieldId) {
        field.Name = "fieldId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FieldId);
        oprot.WriteFieldEnd();
      }
      if (__isset.contactChatNetworkId) {
        field.Name = "contactChatNetworkId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ContactChatNetworkId);
        oprot.WriteFieldEnd();
      }
      if (__isset.@value) {
        field.Name = "value";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.mode) {
        field.Name = "mode";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Mode);
        oprot.WriteFieldEnd();
      }
      if (__isset.contactCustomId) {
        field.Name = "contactCustomId";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ContactCustomId);
        oprot.WriteFieldEnd();
      }
      if (__isset.contactId) {
        field.Name = "contactId";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ContactId);
        oprot.WriteFieldEnd();
      }
      if (EntriesInPage != null && __isset.entriesInPage) {
        field.Name = "entriesInPage";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EntriesInPage);
        oprot.WriteFieldEnd();
      }
      if (EntryList != null && __isset.entryList) {
        field.Name = "entryList";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EntryList);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDefault) {
        field.Name = "isDefault";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDefault);
        oprot.WriteFieldEnd();
      }
      if (__isset.isBasicPrimary) {
        field.Name = "isBasicPrimary";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsBasicPrimary);
        oprot.WriteFieldEnd();
      }
      if (UserInfo != null && __isset.userInfo) {
        field.Name = "userInfo";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        UserInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UserInfoPerson != null && __isset.userInfoPerson) {
        field.Name = "userInfoPerson";
        field.Type = TType.Struct;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        UserInfoPerson.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (User != null && __isset.user) {
        field.Name = "user";
        field.Type = TType.Struct;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        User.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UserCategory != null && __isset.userCategory) {
        field.Name = "userCategory";
        field.Type = TType.Struct;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        UserCategory.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserContactSettings(");
      bool __first = true;
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.fieldId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FieldId: ");
        __sb.Append(FieldId);
      }
      if (__isset.contactChatNetworkId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactChatNetworkId: ");
        __sb.Append(ContactChatNetworkId);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (__isset.contactCustomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactCustomId: ");
        __sb.Append(ContactCustomId);
      }
      if (__isset.contactId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactId: ");
        __sb.Append(ContactId);
      }
      if (EntriesInPage != null && __isset.entriesInPage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EntriesInPage: ");
        __sb.Append(EntriesInPage);
      }
      if (EntryList != null && __isset.entryList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EntryList: ");
        __sb.Append(EntryList);
      }
      if (__isset.isDefault) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsDefault: ");
        __sb.Append(IsDefault);
      }
      if (__isset.isBasicPrimary) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsBasicPrimary: ");
        __sb.Append(IsBasicPrimary);
      }
      if (UserInfo != null && __isset.userInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserInfo: ");
        __sb.Append(UserInfo== null ? "<null>" : UserInfo.ToString());
      }
      if (UserInfoPerson != null && __isset.userInfoPerson) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserInfoPerson: ");
        __sb.Append(UserInfoPerson== null ? "<null>" : UserInfoPerson.ToString());
      }
      if (User != null && __isset.user) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("User: ");
        __sb.Append(User== null ? "<null>" : User.ToString());
      }
      if (UserCategory != null && __isset.userCategory) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserCategory: ");
        __sb.Append(UserCategory== null ? "<null>" : UserCategory.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
