/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class ChatGroupService {
    public interface Iface {
      /// <summary>
      /// Inserts the group object into hBase
      /// where all the group fields except groupId are set into jsonObject which in turns is stringify
      /// and value is inserted into given column name
      /// @param ChatGroup group
      /// @param Session sessionObj
      /// @retutn String (Group Id)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="group"></param>
      /// <param name="session"></param>
      string addGroup(ChatGroup @group, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_addGroup(AsyncCallback callback, object state, ChatGroup @group, Session session);
      string End_addGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Provides the information regarding group for given groupId
      /// 
      /// @param String groupId
      /// @return Group
      /// @throws DataModelException.HBaseException
      /// @throws IOException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      ChatGroup getGroupInfo(string groupId, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getGroupInfo(AsyncCallback callback, object state, string groupId, string userId, Session session);
      ChatGroup End_getGroupInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the groupName for given groupId
      /// At first checks for the user permission
      /// 
      /// @param String groupId
      /// @param String groupName
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="groupName"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void updateGroupName(string groupId, string groupName, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updateGroupName(AsyncCallback callback, object state, string groupId, string groupName, string userId, Session session);
      void End_updateGroupName(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method for getting the list of settings for a requested group
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @return list<ChatGroupSetting> (i.e settingKey and settingValue)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="session"></param>
      string getSettings(string userId, string groupId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getSettings(AsyncCallback callback, object state, string userId, string groupId, Session session);
      string End_getSettings(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method for adding additional settings for a group
      /// Only owner of the group is allowed to add additional settings
      /// 
      /// @param String groupId
      /// @param String groupSettings
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="groupSettings"></param>
      /// <param name="session"></param>
      void addSettings(string userId, string groupId, string groupSettings, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_addSettings(AsyncCallback callback, object state, string userId, string groupId, string groupSettings, Session session);
      void End_addSettings(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the history of group (information about members that has been added or deleted)
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @return List<ChatPendingGroupMember> (i.e userId, requestedByUserId
      /// requestedTimestamp, approvedTimestamp, leftTimestamp)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="session"></param>
      List<ChatPendingGroupMember> getGroupHistory(string userId, string groupId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getGroupHistory(AsyncCallback callback, object state, string userId, string groupId, Session session);
      List<ChatPendingGroupMember> End_getGroupHistory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of pending members in the requested group
      /// i.e members that has been requested by third person but not been approved yet
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @return List<ChatPendingGroupMember> (i.e userId, requestedByUserId
      /// requestedTimestamp, approvedTimestamp)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="session"></param>
      List<ChatPendingGroupMember> getPendingList(string userId, string groupId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getPendingList(AsyncCallback callback, object state, string userId, string groupId, Session session);
      List<ChatPendingGroupMember> End_getPendingList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Removes from the members list
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupList"></param>
      /// <param name="session"></param>
      List<string> leaveGroup(string userId, List<string> groupList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_leaveGroup(AsyncCallback callback, object state, string userId, List<string> groupList, Session session);
      List<string> End_leaveGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Approves the pending request sent by other members
      /// i.e adds the user id to group member list and append approvedTimestamp into pendingList
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="group"></param>
      /// <param name="session"></param>
      void approveGroupRequestByAdmin(string userId, ChatGroup @group, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_approveGroupRequestByAdmin(AsyncCallback callback, object state, string userId, ChatGroup @group, Session session);
      void End_approveGroupRequestByAdmin(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Deletes the group from db for given groupId
      /// User is not allowed to deleteGroup the group if given uid is not owner of respective group
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupList"></param>
      /// <param name="session"></param>
      List<string> deleteGroup(string userId, List<string> groupList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteGroup(AsyncCallback callback, object state, string userId, List<string> groupList, Session session);
      List<string> End_deleteGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Add members into group
      /// If the group Setting for 'autoAdd' member is set to '1'
      /// then user is directly added to group member list without admin approval
      /// this action is performed by third person other than admin
      /// 
      /// @param String   groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="userList"></param>
      /// <param name="session"></param>
      void requestUser(string userId, string groupId, List<string> userList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_requestUser(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session);
      void End_requestUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Add members into group
      /// the user is direclty added to group member list and approvedTimestamp is added
      /// this action is performed by admin
      /// 
      /// @param String   groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="userList"></param>
      /// <param name="session"></param>
      void addMembers(string userId, string groupId, List<string> userList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_addMembers(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session);
      void End_addMembers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Removes members from group
      /// the user is removed from group member list  and leftTimestamp is added in history
      /// this action is performed by admin
      /// 
      /// @param String   groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="userList"></param>
      /// <param name="session"></param>
      void removeUser(string userId, string groupId, List<string> userList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_removeUser(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session);
      void End_removeUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the members of given groupId
      /// 
      /// @param String groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<string> getGroupMember(string groupId, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getGroupMember(AsyncCallback callback, object state, string groupId, string userId, Session session);
      List<string> End_getGroupMember(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_addGroup(AsyncCallback callback, object state, ChatGroup @group, Session session)
      {
        return send_addGroup(callback, state, @group, session);
      }

      public string End_addGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_addGroup();
      }

      #endif

      /// <summary>
      /// Inserts the group object into hBase
      /// where all the group fields except groupId are set into jsonObject which in turns is stringify
      /// and value is inserted into given column name
      /// @param ChatGroup group
      /// @param Session sessionObj
      /// @retutn String (Group Id)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="group"></param>
      /// <param name="session"></param>
      public string addGroup(ChatGroup @group, Session session)
      {
        #if !SILVERLIGHT
        send_addGroup(@group, session);
        return recv_addGroup();

        #else
        var asyncResult = Begin_addGroup(null, null, @group, session);
        return End_addGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addGroup(AsyncCallback callback, object state, ChatGroup @group, Session session)
      #else
      public void send_addGroup(ChatGroup @group, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addGroup", TMessageType.Call, seqid_));
        addGroup_args args = new addGroup_args();
        args.Group = @group;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_addGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addGroup_result result = new addGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroupInfo(AsyncCallback callback, object state, string groupId, string userId, Session session)
      {
        return send_getGroupInfo(callback, state, groupId, userId, session);
      }

      public ChatGroup End_getGroupInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroupInfo();
      }

      #endif

      /// <summary>
      /// Provides the information regarding group for given groupId
      /// 
      /// @param String groupId
      /// @return Group
      /// @throws DataModelException.HBaseException
      /// @throws IOException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public ChatGroup getGroupInfo(string groupId, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getGroupInfo(groupId, userId, session);
        return recv_getGroupInfo();

        #else
        var asyncResult = Begin_getGroupInfo(null, null, groupId, userId, session);
        return End_getGroupInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroupInfo(AsyncCallback callback, object state, string groupId, string userId, Session session)
      #else
      public void send_getGroupInfo(string groupId, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroupInfo", TMessageType.Call, seqid_));
        getGroupInfo_args args = new getGroupInfo_args();
        args.GroupId = groupId;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ChatGroup recv_getGroupInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroupInfo_result result = new getGroupInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateGroupName(AsyncCallback callback, object state, string groupId, string groupName, string userId, Session session)
      {
        return send_updateGroupName(callback, state, groupId, groupName, userId, session);
      }

      public void End_updateGroupName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateGroupName();
      }

      #endif

      /// <summary>
      /// Updates the groupName for given groupId
      /// At first checks for the user permission
      /// 
      /// @param String groupId
      /// @param String groupName
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="groupName"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void updateGroupName(string groupId, string groupName, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_updateGroupName(groupId, groupName, userId, session);
        recv_updateGroupName();

        #else
        var asyncResult = Begin_updateGroupName(null, null, groupId, groupName, userId, session);
        End_updateGroupName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateGroupName(AsyncCallback callback, object state, string groupId, string groupName, string userId, Session session)
      #else
      public void send_updateGroupName(string groupId, string groupName, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateGroupName", TMessageType.Call, seqid_));
        updateGroupName_args args = new updateGroupName_args();
        args.GroupId = groupId;
        args.GroupName = groupName;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateGroupName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateGroupName_result result = new updateGroupName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettings(AsyncCallback callback, object state, string userId, string groupId, Session session)
      {
        return send_getSettings(callback, state, userId, groupId, session);
      }

      public string End_getSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettings();
      }

      #endif

      /// <summary>
      /// Method for getting the list of settings for a requested group
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @return list<ChatGroupSetting> (i.e settingKey and settingValue)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="session"></param>
      public string getSettings(string userId, string groupId, Session session)
      {
        #if !SILVERLIGHT
        send_getSettings(userId, groupId, session);
        return recv_getSettings();

        #else
        var asyncResult = Begin_getSettings(null, null, userId, groupId, session);
        return End_getSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettings(AsyncCallback callback, object state, string userId, string groupId, Session session)
      #else
      public void send_getSettings(string userId, string groupId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettings", TMessageType.Call, seqid_));
        getSettings_args args = new getSettings_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettings_result result = new getSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addSettings(AsyncCallback callback, object state, string userId, string groupId, string groupSettings, Session session)
      {
        return send_addSettings(callback, state, userId, groupId, groupSettings, session);
      }

      public void End_addSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addSettings();
      }

      #endif

      /// <summary>
      /// Method for adding additional settings for a group
      /// Only owner of the group is allowed to add additional settings
      /// 
      /// @param String groupId
      /// @param String groupSettings
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="groupSettings"></param>
      /// <param name="session"></param>
      public void addSettings(string userId, string groupId, string groupSettings, Session session)
      {
        #if !SILVERLIGHT
        send_addSettings(userId, groupId, groupSettings, session);
        recv_addSettings();

        #else
        var asyncResult = Begin_addSettings(null, null, userId, groupId, groupSettings, session);
        End_addSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addSettings(AsyncCallback callback, object state, string userId, string groupId, string groupSettings, Session session)
      #else
      public void send_addSettings(string userId, string groupId, string groupSettings, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addSettings", TMessageType.Call, seqid_));
        addSettings_args args = new addSettings_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.GroupSettings = groupSettings;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addSettings_result result = new addSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroupHistory(AsyncCallback callback, object state, string userId, string groupId, Session session)
      {
        return send_getGroupHistory(callback, state, userId, groupId, session);
      }

      public List<ChatPendingGroupMember> End_getGroupHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroupHistory();
      }

      #endif

      /// <summary>
      /// Gets the history of group (information about members that has been added or deleted)
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @return List<ChatPendingGroupMember> (i.e userId, requestedByUserId
      /// requestedTimestamp, approvedTimestamp, leftTimestamp)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="session"></param>
      public List<ChatPendingGroupMember> getGroupHistory(string userId, string groupId, Session session)
      {
        #if !SILVERLIGHT
        send_getGroupHistory(userId, groupId, session);
        return recv_getGroupHistory();

        #else
        var asyncResult = Begin_getGroupHistory(null, null, userId, groupId, session);
        return End_getGroupHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroupHistory(AsyncCallback callback, object state, string userId, string groupId, Session session)
      #else
      public void send_getGroupHistory(string userId, string groupId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroupHistory", TMessageType.Call, seqid_));
        getGroupHistory_args args = new getGroupHistory_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ChatPendingGroupMember> recv_getGroupHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroupHistory_result result = new getGroupHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPendingList(AsyncCallback callback, object state, string userId, string groupId, Session session)
      {
        return send_getPendingList(callback, state, userId, groupId, session);
      }

      public List<ChatPendingGroupMember> End_getPendingList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPendingList();
      }

      #endif

      /// <summary>
      /// Gets the list of pending members in the requested group
      /// i.e members that has been requested by third person but not been approved yet
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @return List<ChatPendingGroupMember> (i.e userId, requestedByUserId
      /// requestedTimestamp, approvedTimestamp)
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="session"></param>
      public List<ChatPendingGroupMember> getPendingList(string userId, string groupId, Session session)
      {
        #if !SILVERLIGHT
        send_getPendingList(userId, groupId, session);
        return recv_getPendingList();

        #else
        var asyncResult = Begin_getPendingList(null, null, userId, groupId, session);
        return End_getPendingList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPendingList(AsyncCallback callback, object state, string userId, string groupId, Session session)
      #else
      public void send_getPendingList(string userId, string groupId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPendingList", TMessageType.Call, seqid_));
        getPendingList_args args = new getPendingList_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ChatPendingGroupMember> recv_getPendingList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPendingList_result result = new getPendingList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPendingList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_leaveGroup(AsyncCallback callback, object state, string userId, List<string> groupList, Session session)
      {
        return send_leaveGroup(callback, state, userId, groupList, session);
      }

      public List<string> End_leaveGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_leaveGroup();
      }

      #endif

      /// <summary>
      /// Removes from the members list
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupList"></param>
      /// <param name="session"></param>
      public List<string> leaveGroup(string userId, List<string> groupList, Session session)
      {
        #if !SILVERLIGHT
        send_leaveGroup(userId, groupList, session);
        return recv_leaveGroup();

        #else
        var asyncResult = Begin_leaveGroup(null, null, userId, groupList, session);
        return End_leaveGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_leaveGroup(AsyncCallback callback, object state, string userId, List<string> groupList, Session session)
      #else
      public void send_leaveGroup(string userId, List<string> groupList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Call, seqid_));
        leaveGroup_args args = new leaveGroup_args();
        args.UserId = userId;
        args.GroupList = groupList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_leaveGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        leaveGroup_result result = new leaveGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "leaveGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_approveGroupRequestByAdmin(AsyncCallback callback, object state, string userId, ChatGroup @group, Session session)
      {
        return send_approveGroupRequestByAdmin(callback, state, userId, @group, session);
      }

      public void End_approveGroupRequestByAdmin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_approveGroupRequestByAdmin();
      }

      #endif

      /// <summary>
      /// Approves the pending request sent by other members
      /// i.e adds the user id to group member list and append approvedTimestamp into pendingList
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="group"></param>
      /// <param name="session"></param>
      public void approveGroupRequestByAdmin(string userId, ChatGroup @group, Session session)
      {
        #if !SILVERLIGHT
        send_approveGroupRequestByAdmin(userId, @group, session);
        recv_approveGroupRequestByAdmin();

        #else
        var asyncResult = Begin_approveGroupRequestByAdmin(null, null, userId, @group, session);
        End_approveGroupRequestByAdmin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_approveGroupRequestByAdmin(AsyncCallback callback, object state, string userId, ChatGroup @group, Session session)
      #else
      public void send_approveGroupRequestByAdmin(string userId, ChatGroup @group, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("approveGroupRequestByAdmin", TMessageType.Call, seqid_));
        approveGroupRequestByAdmin_args args = new approveGroupRequestByAdmin_args();
        args.UserId = userId;
        args.Group = @group;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_approveGroupRequestByAdmin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        approveGroupRequestByAdmin_result result = new approveGroupRequestByAdmin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteGroup(AsyncCallback callback, object state, string userId, List<string> groupList, Session session)
      {
        return send_deleteGroup(callback, state, userId, groupList, session);
      }

      public List<string> End_deleteGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteGroup();
      }

      #endif

      /// <summary>
      /// Deletes the group from db for given groupId
      /// User is not allowed to deleteGroup the group if given uid is not owner of respective group
      /// 
      /// @param String groupId
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupList"></param>
      /// <param name="session"></param>
      public List<string> deleteGroup(string userId, List<string> groupList, Session session)
      {
        #if !SILVERLIGHT
        send_deleteGroup(userId, groupList, session);
        return recv_deleteGroup();

        #else
        var asyncResult = Begin_deleteGroup(null, null, userId, groupList, session);
        return End_deleteGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteGroup(AsyncCallback callback, object state, string userId, List<string> groupList, Session session)
      #else
      public void send_deleteGroup(string userId, List<string> groupList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteGroup", TMessageType.Call, seqid_));
        deleteGroup_args args = new deleteGroup_args();
        args.UserId = userId;
        args.GroupList = groupList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_deleteGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteGroup_result result = new deleteGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_requestUser(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session)
      {
        return send_requestUser(callback, state, userId, groupId, userList, session);
      }

      public void End_requestUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_requestUser();
      }

      #endif

      /// <summary>
      /// Add members into group
      /// If the group Setting for 'autoAdd' member is set to '1'
      /// then user is directly added to group member list without admin approval
      /// this action is performed by third person other than admin
      /// 
      /// @param String   groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="userList"></param>
      /// <param name="session"></param>
      public void requestUser(string userId, string groupId, List<string> userList, Session session)
      {
        #if !SILVERLIGHT
        send_requestUser(userId, groupId, userList, session);
        recv_requestUser();

        #else
        var asyncResult = Begin_requestUser(null, null, userId, groupId, userList, session);
        End_requestUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_requestUser(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session)
      #else
      public void send_requestUser(string userId, string groupId, List<string> userList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("requestUser", TMessageType.Call, seqid_));
        requestUser_args args = new requestUser_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.UserList = userList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_requestUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        requestUser_result result = new requestUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addMembers(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session)
      {
        return send_addMembers(callback, state, userId, groupId, userList, session);
      }

      public void End_addMembers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addMembers();
      }

      #endif

      /// <summary>
      /// Add members into group
      /// the user is direclty added to group member list and approvedTimestamp is added
      /// this action is performed by admin
      /// 
      /// @param String   groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="userList"></param>
      /// <param name="session"></param>
      public void addMembers(string userId, string groupId, List<string> userList, Session session)
      {
        #if !SILVERLIGHT
        send_addMembers(userId, groupId, userList, session);
        recv_addMembers();

        #else
        var asyncResult = Begin_addMembers(null, null, userId, groupId, userList, session);
        End_addMembers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addMembers(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session)
      #else
      public void send_addMembers(string userId, string groupId, List<string> userList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addMembers", TMessageType.Call, seqid_));
        addMembers_args args = new addMembers_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.UserList = userList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addMembers_result result = new addMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeUser(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session)
      {
        return send_removeUser(callback, state, userId, groupId, userList, session);
      }

      public void End_removeUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeUser();
      }

      #endif

      /// <summary>
      /// Removes members from group
      /// the user is removed from group member list  and leftTimestamp is added in history
      /// this action is performed by admin
      /// 
      /// @param String   groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="groupId"></param>
      /// <param name="userList"></param>
      /// <param name="session"></param>
      public void removeUser(string userId, string groupId, List<string> userList, Session session)
      {
        #if !SILVERLIGHT
        send_removeUser(userId, groupId, userList, session);
        recv_removeUser();

        #else
        var asyncResult = Begin_removeUser(null, null, userId, groupId, userList, session);
        End_removeUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeUser(AsyncCallback callback, object state, string userId, string groupId, List<string> userList, Session session)
      #else
      public void send_removeUser(string userId, string groupId, List<string> userList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeUser", TMessageType.Call, seqid_));
        removeUser_args args = new removeUser_args();
        args.UserId = userId;
        args.GroupId = groupId;
        args.UserList = userList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeUser_result result = new removeUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroupMember(AsyncCallback callback, object state, string groupId, string userId, Session session)
      {
        return send_getGroupMember(callback, state, groupId, userId, session);
      }

      public List<string> End_getGroupMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroupMember();
      }

      #endif

      /// <summary>
      /// Gets the members of given groupId
      /// 
      /// @param String groupId
      /// @param list<String> users
      /// @param Session sessionObj
      /// @throws ChatGroupException
      /// @throws SessionException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<string> getGroupMember(string groupId, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getGroupMember(groupId, userId, session);
        return recv_getGroupMember();

        #else
        var asyncResult = Begin_getGroupMember(null, null, groupId, userId, session);
        return End_getGroupMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroupMember(AsyncCallback callback, object state, string groupId, string userId, Session session)
      #else
      public void send_getGroupMember(string groupId, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroupMember", TMessageType.Call, seqid_));
        getGroupMember_args args = new getGroupMember_args();
        args.GroupId = groupId;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getGroupMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroupMember_result result = new getGroupMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupMember failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["addGroup"] = addGroup_Process;
        processMap_["getGroupInfo"] = getGroupInfo_Process;
        processMap_["updateGroupName"] = updateGroupName_Process;
        processMap_["getSettings"] = getSettings_Process;
        processMap_["addSettings"] = addSettings_Process;
        processMap_["getGroupHistory"] = getGroupHistory_Process;
        processMap_["getPendingList"] = getPendingList_Process;
        processMap_["leaveGroup"] = leaveGroup_Process;
        processMap_["approveGroupRequestByAdmin"] = approveGroupRequestByAdmin_Process;
        processMap_["deleteGroup"] = deleteGroup_Process;
        processMap_["requestUser"] = requestUser_Process;
        processMap_["addMembers"] = addMembers_Process;
        processMap_["removeUser"] = removeUser_Process;
        processMap_["getGroupMember"] = getGroupMember_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void addGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addGroup_args args = new addGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addGroup_result result = new addGroup_result();
        try {
          result.Success = iface_.addGroup(args.Group, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("addGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroupInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroupInfo_args args = new getGroupInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroupInfo_result result = new getGroupInfo_result();
        try {
          result.Success = iface_.getGroupInfo(args.GroupId, args.UserId, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateGroupName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateGroupName_args args = new updateGroupName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateGroupName_result result = new updateGroupName_result();
        try {
          iface_.updateGroupName(args.GroupId, args.GroupName, args.UserId, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updateGroupName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettings_args args = new getSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettings_result result = new getSettings_result();
        try {
          result.Success = iface_.getSettings(args.UserId, args.GroupId, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addSettings_args args = new addSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addSettings_result result = new addSettings_result();
        try {
          iface_.addSettings(args.UserId, args.GroupId, args.GroupSettings, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("addSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroupHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroupHistory_args args = new getGroupHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroupHistory_result result = new getGroupHistory_result();
        try {
          result.Success = iface_.getGroupHistory(args.UserId, args.GroupId, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPendingList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPendingList_args args = new getPendingList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPendingList_result result = new getPendingList_result();
        try {
          result.Success = iface_.getPendingList(args.UserId, args.GroupId, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getPendingList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void leaveGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        leaveGroup_args args = new leaveGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        leaveGroup_result result = new leaveGroup_result();
        try {
          result.Success = iface_.leaveGroup(args.UserId, args.GroupList, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void approveGroupRequestByAdmin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        approveGroupRequestByAdmin_args args = new approveGroupRequestByAdmin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        approveGroupRequestByAdmin_result result = new approveGroupRequestByAdmin_result();
        try {
          iface_.approveGroupRequestByAdmin(args.UserId, args.Group, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("approveGroupRequestByAdmin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteGroup_args args = new deleteGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteGroup_result result = new deleteGroup_result();
        try {
          result.Success = iface_.deleteGroup(args.UserId, args.GroupList, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("deleteGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void requestUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        requestUser_args args = new requestUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        requestUser_result result = new requestUser_result();
        try {
          iface_.requestUser(args.UserId, args.GroupId, args.UserList, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("requestUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addMembers_args args = new addMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addMembers_result result = new addMembers_result();
        try {
          iface_.addMembers(args.UserId, args.GroupId, args.UserList, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("addMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeUser_args args = new removeUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeUser_result result = new removeUser_result();
        try {
          iface_.removeUser(args.UserId, args.GroupId, args.UserList, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("removeUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroupMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroupMember_args args = new getGroupMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroupMember_result result = new getGroupMember_result();
        try {
          result.Success = iface_.getGroupMember(args.GroupId, args.UserId, args.Session);
        } catch (ChatGroupException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addGroup_args : TBase
    {
      private ChatGroup _group;
      private Session _session;

      public ChatGroup Group
      {
        get
        {
          return _group;
        }
        set
        {
          __isset.@group = true;
          this._group = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool @group;
        public bool session;
      }

      public addGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Group = new ChatGroup();
                Group.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Group != null && __isset.@group) {
          field.Name = "group";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Group.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addGroup_args(");
        bool __first = true;
        if (Group != null && __isset.@group) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Group: ");
          __sb.Append(Group== null ? "<null>" : Group.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addGroup_result : TBase
    {
      private string _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public addGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupInfo_args : TBase
    {
      private string _groupId;
      private string _userId;
      private Session _session;

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool userId;
        public bool session;
      }

      public getGroupInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupInfo_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupInfo_result : TBase
    {
      private ChatGroup _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public ChatGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getGroupInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChatGroup();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroupName_args : TBase
    {
      private string _groupId;
      private string _groupName;
      private string _userId;
      private Session _session;

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string GroupName
      {
        get
        {
          return _groupName;
        }
        set
        {
          __isset.groupName = true;
          this._groupName = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool groupName;
        public bool userId;
        public bool session;
      }

      public updateGroupName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateGroupName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (GroupName != null && __isset.groupName) {
          field.Name = "groupName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupName);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGroupName_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (GroupName != null && __isset.groupName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupName: ");
          __sb.Append(GroupName);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroupName_result : TBase
    {
      private ChatGroupException _ex;
      private SessionException _se;

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public updateGroupName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateGroupName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGroupName_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettings_args : TBase
    {
      private string _userId;
      private string _groupId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool session;
      }

      public getSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSettings_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettings_result : TBase
    {
      private string _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSettings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSettings_args : TBase
    {
      private string _userId;
      private string _groupId;
      private string _groupSettings;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string GroupSettings
      {
        get
        {
          return _groupSettings;
        }
        set
        {
          __isset.groupSettings = true;
          this._groupSettings = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool groupSettings;
        public bool session;
      }

      public addSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GroupSettings = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (GroupSettings != null && __isset.groupSettings) {
          field.Name = "groupSettings";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupSettings);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addSettings_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (GroupSettings != null && __isset.groupSettings) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupSettings: ");
          __sb.Append(GroupSettings);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSettings_result : TBase
    {
      private ChatGroupException _ex;
      private SessionException _se;

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public addSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addSettings_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupHistory_args : TBase
    {
      private string _userId;
      private string _groupId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool session;
      }

      public getGroupHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupHistory_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupHistory_result : TBase
    {
      private List<ChatPendingGroupMember> _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public List<ChatPendingGroupMember> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getGroupHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChatPendingGroupMember>();
                  TList _list288 = iprot.ReadListBegin();
                  for( int _i289 = 0; _i289 < _list288.Count; ++_i289)
                  {
                    ChatPendingGroupMember _elem290;
                    _elem290 = new ChatPendingGroupMember();
                    _elem290.Read(iprot);
                    Success.Add(_elem290);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChatPendingGroupMember _iter291 in Success)
              {
                _iter291.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupHistory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPendingList_args : TBase
    {
      private string _userId;
      private string _groupId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool session;
      }

      public getPendingList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPendingList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPendingList_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPendingList_result : TBase
    {
      private List<ChatPendingGroupMember> _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public List<ChatPendingGroupMember> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getPendingList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChatPendingGroupMember>();
                  TList _list292 = iprot.ReadListBegin();
                  for( int _i293 = 0; _i293 < _list292.Count; ++_i293)
                  {
                    ChatPendingGroupMember _elem294;
                    _elem294 = new ChatPendingGroupMember();
                    _elem294.Read(iprot);
                    Success.Add(_elem294);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPendingList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChatPendingGroupMember _iter295 in Success)
              {
                _iter295.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPendingList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leaveGroup_args : TBase
    {
      private string _userId;
      private List<string> _groupList;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public List<string> GroupList
      {
        get
        {
          return _groupList;
        }
        set
        {
          __isset.groupList = true;
          this._groupList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupList;
        public bool session;
      }

      public leaveGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  GroupList = new List<string>();
                  TList _list296 = iprot.ReadListBegin();
                  for( int _i297 = 0; _i297 < _list296.Count; ++_i297)
                  {
                    string _elem298;
                    _elem298 = iprot.ReadString();
                    GroupList.Add(_elem298);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaveGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupList != null && __isset.groupList) {
          field.Name = "groupList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GroupList.Count));
            foreach (string _iter299 in GroupList)
            {
              oprot.WriteString(_iter299);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("leaveGroup_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupList != null && __isset.groupList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupList: ");
          __sb.Append(GroupList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leaveGroup_result : TBase
    {
      private List<string> _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public leaveGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list300 = iprot.ReadListBegin();
                  for( int _i301 = 0; _i301 < _list300.Count; ++_i301)
                  {
                    string _elem302;
                    _elem302 = iprot.ReadString();
                    Success.Add(_elem302);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaveGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter303 in Success)
              {
                oprot.WriteString(_iter303);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("leaveGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class approveGroupRequestByAdmin_args : TBase
    {
      private string _userId;
      private ChatGroup _group;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public ChatGroup Group
      {
        get
        {
          return _group;
        }
        set
        {
          __isset.@group = true;
          this._group = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool @group;
        public bool session;
      }

      public approveGroupRequestByAdmin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Group = new ChatGroup();
                Group.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("approveGroupRequestByAdmin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Group != null && __isset.@group) {
          field.Name = "group";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Group.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("approveGroupRequestByAdmin_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Group != null && __isset.@group) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Group: ");
          __sb.Append(Group== null ? "<null>" : Group.ToString());
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class approveGroupRequestByAdmin_result : TBase
    {
      private ChatGroupException _ex;
      private SessionException _se;

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public approveGroupRequestByAdmin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("approveGroupRequestByAdmin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("approveGroupRequestByAdmin_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteGroup_args : TBase
    {
      private string _userId;
      private List<string> _groupList;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public List<string> GroupList
      {
        get
        {
          return _groupList;
        }
        set
        {
          __isset.groupList = true;
          this._groupList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupList;
        public bool session;
      }

      public deleteGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  GroupList = new List<string>();
                  TList _list304 = iprot.ReadListBegin();
                  for( int _i305 = 0; _i305 < _list304.Count; ++_i305)
                  {
                    string _elem306;
                    _elem306 = iprot.ReadString();
                    GroupList.Add(_elem306);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupList != null && __isset.groupList) {
          field.Name = "groupList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GroupList.Count));
            foreach (string _iter307 in GroupList)
            {
              oprot.WriteString(_iter307);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteGroup_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupList != null && __isset.groupList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupList: ");
          __sb.Append(GroupList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteGroup_result : TBase
    {
      private List<string> _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public deleteGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list308 = iprot.ReadListBegin();
                  for( int _i309 = 0; _i309 < _list308.Count; ++_i309)
                  {
                    string _elem310;
                    _elem310 = iprot.ReadString();
                    Success.Add(_elem310);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter311 in Success)
              {
                oprot.WriteString(_iter311);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestUser_args : TBase
    {
      private string _userId;
      private string _groupId;
      private List<string> _userList;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public List<string> UserList
      {
        get
        {
          return _userList;
        }
        set
        {
          __isset.userList = true;
          this._userList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool userList;
        public bool session;
      }

      public requestUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  UserList = new List<string>();
                  TList _list312 = iprot.ReadListBegin();
                  for( int _i313 = 0; _i313 < _list312.Count; ++_i313)
                  {
                    string _elem314;
                    _elem314 = iprot.ReadString();
                    UserList.Add(_elem314);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (UserList != null && __isset.userList) {
          field.Name = "userList";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserList.Count));
            foreach (string _iter315 in UserList)
            {
              oprot.WriteString(_iter315);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("requestUser_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (UserList != null && __isset.userList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserList: ");
          __sb.Append(UserList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestUser_result : TBase
    {
      private ChatGroupException _ex;
      private SessionException _se;

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public requestUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("requestUser_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addMembers_args : TBase
    {
      private string _userId;
      private string _groupId;
      private List<string> _userList;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public List<string> UserList
      {
        get
        {
          return _userList;
        }
        set
        {
          __isset.userList = true;
          this._userList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool userList;
        public bool session;
      }

      public addMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  UserList = new List<string>();
                  TList _list316 = iprot.ReadListBegin();
                  for( int _i317 = 0; _i317 < _list316.Count; ++_i317)
                  {
                    string _elem318;
                    _elem318 = iprot.ReadString();
                    UserList.Add(_elem318);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (UserList != null && __isset.userList) {
          field.Name = "userList";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserList.Count));
            foreach (string _iter319 in UserList)
            {
              oprot.WriteString(_iter319);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addMembers_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (UserList != null && __isset.userList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserList: ");
          __sb.Append(UserList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addMembers_result : TBase
    {
      private ChatGroupException _ex;
      private SessionException _se;

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public addMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addMembers_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeUser_args : TBase
    {
      private string _userId;
      private string _groupId;
      private List<string> _userList;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public List<string> UserList
      {
        get
        {
          return _userList;
        }
        set
        {
          __isset.userList = true;
          this._userList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool groupId;
        public bool userList;
        public bool session;
      }

      public removeUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  UserList = new List<string>();
                  TList _list320 = iprot.ReadListBegin();
                  for( int _i321 = 0; _i321 < _list320.Count; ++_i321)
                  {
                    string _elem322;
                    _elem322 = iprot.ReadString();
                    UserList.Add(_elem322);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (UserList != null && __isset.userList) {
          field.Name = "userList";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserList.Count));
            foreach (string _iter323 in UserList)
            {
              oprot.WriteString(_iter323);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeUser_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (UserList != null && __isset.userList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserList: ");
          __sb.Append(UserList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeUser_result : TBase
    {
      private ChatGroupException _ex;
      private SessionException _se;

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public removeUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeUser_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupMember_args : TBase
    {
      private string _groupId;
      private string _userId;
      private Session _session;

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool userId;
        public bool session;
      }

      public getGroupMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupMember_result : TBase
    {
      private List<string> _success;
      private ChatGroupException _ex;
      private SessionException _se;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatGroupException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getGroupMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list324 = iprot.ReadListBegin();
                  for( int _i325 = 0; _i325 < _list324.Count; ++_i325)
                  {
                    string _elem326;
                    _elem326 = iprot.ReadString();
                    Success.Add(_elem326);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatGroupException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter327 in Success)
              {
                oprot.WriteString(_iter327);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
