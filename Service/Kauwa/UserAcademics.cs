/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserAcademics : TBase
  {
    private int _displayOrderId;
    private int _academicInstituteId;
    private string _academicInstituteName;
    private City _city;
    private Country _country;
    private string _joinedYear;
    private bool _hasGraduated;
    private string _graduatedYear;
    private Degree _degree;
    private Concentration _concentration;
    private int _academicId;
    private string _academicInstitute;
    private int _userId;
    private int _mode;
    private string _userIdOrName;

    public int DisplayOrderId
    {
      get
      {
        return _displayOrderId;
      }
      set
      {
        __isset.displayOrderId = true;
        this._displayOrderId = value;
      }
    }

    public int AcademicInstituteId
    {
      get
      {
        return _academicInstituteId;
      }
      set
      {
        __isset.academicInstituteId = true;
        this._academicInstituteId = value;
      }
    }

    public string AcademicInstituteName
    {
      get
      {
        return _academicInstituteName;
      }
      set
      {
        __isset.academicInstituteName = true;
        this._academicInstituteName = value;
      }
    }

    public City City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        this._city = value;
      }
    }

    public Country Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string JoinedYear
    {
      get
      {
        return _joinedYear;
      }
      set
      {
        __isset.joinedYear = true;
        this._joinedYear = value;
      }
    }

    public bool HasGraduated
    {
      get
      {
        return _hasGraduated;
      }
      set
      {
        __isset.hasGraduated = true;
        this._hasGraduated = value;
      }
    }

    public string GraduatedYear
    {
      get
      {
        return _graduatedYear;
      }
      set
      {
        __isset.graduatedYear = true;
        this._graduatedYear = value;
      }
    }

    public Degree Degree
    {
      get
      {
        return _degree;
      }
      set
      {
        __isset.degree = true;
        this._degree = value;
      }
    }

    public Concentration Concentration
    {
      get
      {
        return _concentration;
      }
      set
      {
        __isset.concentration = true;
        this._concentration = value;
      }
    }

    public int AcademicId
    {
      get
      {
        return _academicId;
      }
      set
      {
        __isset.academicId = true;
        this._academicId = value;
      }
    }

    public string AcademicInstitute
    {
      get
      {
        return _academicInstitute;
      }
      set
      {
        __isset.academicInstitute = true;
        this._academicInstitute = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public string UserIdOrName
    {
      get
      {
        return _userIdOrName;
      }
      set
      {
        __isset.userIdOrName = true;
        this._userIdOrName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool displayOrderId;
      public bool academicInstituteId;
      public bool academicInstituteName;
      public bool city;
      public bool country;
      public bool joinedYear;
      public bool hasGraduated;
      public bool graduatedYear;
      public bool degree;
      public bool concentration;
      public bool academicId;
      public bool academicInstitute;
      public bool userId;
      public bool mode;
      public bool userIdOrName;
    }

    public UserAcademics() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DisplayOrderId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              AcademicInstituteId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              AcademicInstituteName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              City = new City();
              City.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Country = new Country();
              Country.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              JoinedYear = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              HasGraduated = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              GraduatedYear = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              Degree = new Degree();
              Degree.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Concentration = new Concentration();
              Concentration.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              AcademicId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              AcademicInstitute = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Mode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              UserIdOrName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserAcademics");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.displayOrderId) {
        field.Name = "displayOrderId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayOrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.academicInstituteId) {
        field.Name = "academicInstituteId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AcademicInstituteId);
        oprot.WriteFieldEnd();
      }
      if (AcademicInstituteName != null && __isset.academicInstituteName) {
        field.Name = "academicInstituteName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AcademicInstituteName);
        oprot.WriteFieldEnd();
      }
      if (City != null && __isset.city) {
        field.Name = "city";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        City.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Country != null && __isset.country) {
        field.Name = "country";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Country.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (JoinedYear != null && __isset.joinedYear) {
        field.Name = "joinedYear";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JoinedYear);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasGraduated) {
        field.Name = "hasGraduated";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasGraduated);
        oprot.WriteFieldEnd();
      }
      if (GraduatedYear != null && __isset.graduatedYear) {
        field.Name = "graduatedYear";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GraduatedYear);
        oprot.WriteFieldEnd();
      }
      if (Degree != null && __isset.degree) {
        field.Name = "degree";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        Degree.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Concentration != null && __isset.concentration) {
        field.Name = "concentration";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Concentration.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.academicId) {
        field.Name = "academicId";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AcademicId);
        oprot.WriteFieldEnd();
      }
      if (AcademicInstitute != null && __isset.academicInstitute) {
        field.Name = "academicInstitute";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AcademicInstitute);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.mode) {
        field.Name = "mode";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Mode);
        oprot.WriteFieldEnd();
      }
      if (UserIdOrName != null && __isset.userIdOrName) {
        field.Name = "userIdOrName";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserIdOrName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserAcademics(");
      bool __first = true;
      if (__isset.displayOrderId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisplayOrderId: ");
        __sb.Append(DisplayOrderId);
      }
      if (__isset.academicInstituteId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AcademicInstituteId: ");
        __sb.Append(AcademicInstituteId);
      }
      if (AcademicInstituteName != null && __isset.academicInstituteName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AcademicInstituteName: ");
        __sb.Append(AcademicInstituteName);
      }
      if (City != null && __isset.city) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("City: ");
        __sb.Append(City== null ? "<null>" : City.ToString());
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country== null ? "<null>" : Country.ToString());
      }
      if (JoinedYear != null && __isset.joinedYear) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JoinedYear: ");
        __sb.Append(JoinedYear);
      }
      if (__isset.hasGraduated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasGraduated: ");
        __sb.Append(HasGraduated);
      }
      if (GraduatedYear != null && __isset.graduatedYear) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GraduatedYear: ");
        __sb.Append(GraduatedYear);
      }
      if (Degree != null && __isset.degree) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Degree: ");
        __sb.Append(Degree== null ? "<null>" : Degree.ToString());
      }
      if (Concentration != null && __isset.concentration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Concentration: ");
        __sb.Append(Concentration== null ? "<null>" : Concentration.ToString());
      }
      if (__isset.academicId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AcademicId: ");
        __sb.Append(AcademicId);
      }
      if (AcademicInstitute != null && __isset.academicInstitute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AcademicInstitute: ");
        __sb.Append(AcademicInstitute);
      }
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (UserIdOrName != null && __isset.userIdOrName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserIdOrName: ");
        __sb.Append(UserIdOrName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
