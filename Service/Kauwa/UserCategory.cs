/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserCategory : TBase
  {
    private string _userId;
    private int _userCategoryTypeId;
    private string _name;
    private string _description;
    private bool _isSystemDefault;
    private int _contactCount;
    private List<string> _friends;
    private int _dbStatusCode;
    private int _dbSubStatusCode;
    private string _dbStatusMsg;
    private bool _invertCatSerch;
    private int _pageIndex;
    private int _pageSize;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int UserCategoryTypeId
    {
      get
      {
        return _userCategoryTypeId;
      }
      set
      {
        __isset.userCategoryTypeId = true;
        this._userCategoryTypeId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public bool IsSystemDefault
    {
      get
      {
        return _isSystemDefault;
      }
      set
      {
        __isset.isSystemDefault = true;
        this._isSystemDefault = value;
      }
    }

    public int ContactCount
    {
      get
      {
        return _contactCount;
      }
      set
      {
        __isset.contactCount = true;
        this._contactCount = value;
      }
    }

    public List<string> Friends
    {
      get
      {
        return _friends;
      }
      set
      {
        __isset.friends = true;
        this._friends = value;
      }
    }

    public int DbStatusCode
    {
      get
      {
        return _dbStatusCode;
      }
      set
      {
        __isset.dbStatusCode = true;
        this._dbStatusCode = value;
      }
    }

    public int DbSubStatusCode
    {
      get
      {
        return _dbSubStatusCode;
      }
      set
      {
        __isset.dbSubStatusCode = true;
        this._dbSubStatusCode = value;
      }
    }

    public string DbStatusMsg
    {
      get
      {
        return _dbStatusMsg;
      }
      set
      {
        __isset.dbStatusMsg = true;
        this._dbStatusMsg = value;
      }
    }

    public bool InvertCatSerch
    {
      get
      {
        return _invertCatSerch;
      }
      set
      {
        __isset.invertCatSerch = true;
        this._invertCatSerch = value;
      }
    }

    public int PageIndex
    {
      get
      {
        return _pageIndex;
      }
      set
      {
        __isset.pageIndex = true;
        this._pageIndex = value;
      }
    }

    public int PageSize
    {
      get
      {
        return _pageSize;
      }
      set
      {
        __isset.pageSize = true;
        this._pageSize = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool userCategoryTypeId;
      public bool name;
      public bool description;
      public bool isSystemDefault;
      public bool contactCount;
      public bool friends;
      public bool dbStatusCode;
      public bool dbSubStatusCode;
      public bool dbStatusMsg;
      public bool invertCatSerch;
      public bool pageIndex;
      public bool pageSize;
    }

    public UserCategory() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              UserCategoryTypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              IsSystemDefault = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ContactCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Friends = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  Friends.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              DbStatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              DbSubStatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DbStatusMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              InvertCatSerch = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              PageIndex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              PageSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserCategory");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userCategoryTypeId) {
        field.Name = "userCategoryTypeId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserCategoryTypeId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSystemDefault) {
        field.Name = "isSystemDefault";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSystemDefault);
        oprot.WriteFieldEnd();
      }
      if (__isset.contactCount) {
        field.Name = "contactCount";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ContactCount);
        oprot.WriteFieldEnd();
      }
      if (Friends != null && __isset.friends) {
        field.Name = "friends";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Friends.Count));
          foreach (string _iter3 in Friends)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.dbStatusCode) {
        field.Name = "dbStatusCode";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DbStatusCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.dbSubStatusCode) {
        field.Name = "dbSubStatusCode";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DbSubStatusCode);
        oprot.WriteFieldEnd();
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        field.Name = "dbStatusMsg";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DbStatusMsg);
        oprot.WriteFieldEnd();
      }
      if (__isset.invertCatSerch) {
        field.Name = "invertCatSerch";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(InvertCatSerch);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageIndex) {
        field.Name = "pageIndex";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageSize) {
        field.Name = "pageSize";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageSize);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserCategory(");
      bool __first = true;
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.userCategoryTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserCategoryTypeId: ");
        __sb.Append(UserCategoryTypeId);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (__isset.isSystemDefault) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsSystemDefault: ");
        __sb.Append(IsSystemDefault);
      }
      if (__isset.contactCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactCount: ");
        __sb.Append(ContactCount);
      }
      if (Friends != null && __isset.friends) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Friends: ");
        __sb.Append(Friends);
      }
      if (__isset.dbStatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbStatusCode: ");
        __sb.Append(DbStatusCode);
      }
      if (__isset.dbSubStatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbSubStatusCode: ");
        __sb.Append(DbSubStatusCode);
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbStatusMsg: ");
        __sb.Append(DbStatusMsg);
      }
      if (__isset.invertCatSerch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvertCatSerch: ");
        __sb.Append(InvertCatSerch);
      }
      if (__isset.pageIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageIndex: ");
        __sb.Append(PageIndex);
      }
      if (__isset.pageSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageSize: ");
        __sb.Append(PageSize);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
