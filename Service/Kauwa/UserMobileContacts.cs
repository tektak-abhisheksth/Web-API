/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserMobileContacts : TBase
  {
    private int _userId;
    private string _deviceId;
    private string _cTag;
    private int _systemDbStatus;
    private List<MobileContact> _toAddmobileContacts;
    private List<MobileContact> _toDelmobileContacts;
    private int _dbSubStatusCode;
    private string _dbStatusMsg;
    private bool _flush;

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string DeviceId
    {
      get
      {
        return _deviceId;
      }
      set
      {
        __isset.deviceId = true;
        this._deviceId = value;
      }
    }

    public string CTag
    {
      get
      {
        return _cTag;
      }
      set
      {
        __isset.cTag = true;
        this._cTag = value;
      }
    }

    public int SystemDbStatus
    {
      get
      {
        return _systemDbStatus;
      }
      set
      {
        __isset.systemDbStatus = true;
        this._systemDbStatus = value;
      }
    }

    public List<MobileContact> ToAddmobileContacts
    {
      get
      {
        return _toAddmobileContacts;
      }
      set
      {
        __isset.toAddmobileContacts = true;
        this._toAddmobileContacts = value;
      }
    }

    public List<MobileContact> ToDelmobileContacts
    {
      get
      {
        return _toDelmobileContacts;
      }
      set
      {
        __isset.toDelmobileContacts = true;
        this._toDelmobileContacts = value;
      }
    }

    public int DbSubStatusCode
    {
      get
      {
        return _dbSubStatusCode;
      }
      set
      {
        __isset.dbSubStatusCode = true;
        this._dbSubStatusCode = value;
      }
    }

    public string DbStatusMsg
    {
      get
      {
        return _dbStatusMsg;
      }
      set
      {
        __isset.dbStatusMsg = true;
        this._dbStatusMsg = value;
      }
    }

    public bool Flush
    {
      get
      {
        return _flush;
      }
      set
      {
        __isset.flush = true;
        this._flush = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool deviceId;
      public bool cTag;
      public bool systemDbStatus;
      public bool toAddmobileContacts;
      public bool toDelmobileContacts;
      public bool dbSubStatusCode;
      public bool dbStatusMsg;
      public bool flush;
    }

    public UserMobileContacts() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              DeviceId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CTag = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SystemDbStatus = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                ToAddmobileContacts = new List<MobileContact>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  MobileContact _elem10;
                  _elem10 = new MobileContact();
                  _elem10.Read(iprot);
                  ToAddmobileContacts.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                ToDelmobileContacts = new List<MobileContact>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  MobileContact _elem13;
                  _elem13 = new MobileContact();
                  _elem13.Read(iprot);
                  ToDelmobileContacts.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              DbSubStatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              DbStatusMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Flush = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserMobileContacts");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (DeviceId != null && __isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (CTag != null && __isset.cTag) {
        field.Name = "cTag";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CTag);
        oprot.WriteFieldEnd();
      }
      if (__isset.systemDbStatus) {
        field.Name = "systemDbStatus";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SystemDbStatus);
        oprot.WriteFieldEnd();
      }
      if (ToAddmobileContacts != null && __isset.toAddmobileContacts) {
        field.Name = "toAddmobileContacts";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ToAddmobileContacts.Count));
          foreach (MobileContact _iter14 in ToAddmobileContacts)
          {
            _iter14.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ToDelmobileContacts != null && __isset.toDelmobileContacts) {
        field.Name = "toDelmobileContacts";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ToDelmobileContacts.Count));
          foreach (MobileContact _iter15 in ToDelmobileContacts)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.dbSubStatusCode) {
        field.Name = "dbSubStatusCode";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DbSubStatusCode);
        oprot.WriteFieldEnd();
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        field.Name = "dbStatusMsg";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DbStatusMsg);
        oprot.WriteFieldEnd();
      }
      if (__isset.flush) {
        field.Name = "flush";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Flush);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserMobileContacts(");
      bool __first = true;
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (DeviceId != null && __isset.deviceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceId: ");
        __sb.Append(DeviceId);
      }
      if (CTag != null && __isset.cTag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CTag: ");
        __sb.Append(CTag);
      }
      if (__isset.systemDbStatus) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemDbStatus: ");
        __sb.Append(SystemDbStatus);
      }
      if (ToAddmobileContacts != null && __isset.toAddmobileContacts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ToAddmobileContacts: ");
        __sb.Append(ToAddmobileContacts);
      }
      if (ToDelmobileContacts != null && __isset.toDelmobileContacts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ToDelmobileContacts: ");
        __sb.Append(ToDelmobileContacts);
      }
      if (__isset.dbSubStatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbSubStatusCode: ");
        __sb.Append(DbSubStatusCode);
      }
      if (DbStatusMsg != null && __isset.dbStatusMsg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DbStatusMsg: ");
        __sb.Append(DbStatusMsg);
      }
      if (__isset.flush) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Flush: ");
        __sb.Append(Flush);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
