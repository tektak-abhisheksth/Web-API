/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChatMessagePull : TBase
  {
    private string _userId;
    private int _pageSize;
    private string _drillUp;
    private string _drillDown;
    private string _limit;
    private string _instanceId;
    private bool _unreadMsg;
    private string _lastMsg;
    private string _cursor;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int PageSize
    {
      get
      {
        return _pageSize;
      }
      set
      {
        __isset.pageSize = true;
        this._pageSize = value;
      }
    }

    public string DrillUp
    {
      get
      {
        return _drillUp;
      }
      set
      {
        __isset.drillUp = true;
        this._drillUp = value;
      }
    }

    public string DrillDown
    {
      get
      {
        return _drillDown;
      }
      set
      {
        __isset.drillDown = true;
        this._drillDown = value;
      }
    }

    public string Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    public string InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public bool UnreadMsg
    {
      get
      {
        return _unreadMsg;
      }
      set
      {
        __isset.unreadMsg = true;
        this._unreadMsg = value;
      }
    }

    public string LastMsg
    {
      get
      {
        return _lastMsg;
      }
      set
      {
        __isset.lastMsg = true;
        this._lastMsg = value;
      }
    }

    public string Cursor
    {
      get
      {
        return _cursor;
      }
      set
      {
        __isset.cursor = true;
        this._cursor = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool pageSize;
      public bool drillUp;
      public bool drillDown;
      public bool limit;
      public bool instanceId;
      public bool unreadMsg;
      public bool lastMsg;
      public bool cursor;
    }

    public ChatMessagePull() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              PageSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DrillUp = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              DrillDown = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Limit = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              InstanceId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              UnreadMsg = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              LastMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Cursor = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ChatMessagePull");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.pageSize) {
        field.Name = "pageSize";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PageSize);
        oprot.WriteFieldEnd();
      }
      if (DrillUp != null && __isset.drillUp) {
        field.Name = "drillUp";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DrillUp);
        oprot.WriteFieldEnd();
      }
      if (DrillDown != null && __isset.drillDown) {
        field.Name = "drillDown";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DrillDown);
        oprot.WriteFieldEnd();
      }
      if (Limit != null && __isset.limit) {
        field.Name = "limit";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Limit);
        oprot.WriteFieldEnd();
      }
      if (InstanceId != null && __isset.instanceId) {
        field.Name = "instanceId";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InstanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.unreadMsg) {
        field.Name = "unreadMsg";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(UnreadMsg);
        oprot.WriteFieldEnd();
      }
      if (LastMsg != null && __isset.lastMsg) {
        field.Name = "lastMsg";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastMsg);
        oprot.WriteFieldEnd();
      }
      if (Cursor != null && __isset.cursor) {
        field.Name = "cursor";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cursor);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChatMessagePull(");
      bool __first = true;
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.pageSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PageSize: ");
        __sb.Append(PageSize);
      }
      if (DrillUp != null && __isset.drillUp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DrillUp: ");
        __sb.Append(DrillUp);
      }
      if (DrillDown != null && __isset.drillDown) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DrillDown: ");
        __sb.Append(DrillDown);
      }
      if (Limit != null && __isset.limit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Limit: ");
        __sb.Append(Limit);
      }
      if (InstanceId != null && __isset.instanceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InstanceId: ");
        __sb.Append(InstanceId);
      }
      if (__isset.unreadMsg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UnreadMsg: ");
        __sb.Append(UnreadMsg);
      }
      if (LastMsg != null && __isset.lastMsg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastMsg: ");
        __sb.Append(LastMsg);
      }
      if (Cursor != null && __isset.cursor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cursor: ");
        __sb.Append(Cursor);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
