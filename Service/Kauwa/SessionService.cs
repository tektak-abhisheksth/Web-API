/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class SessionService {
    public interface Iface {
      Session CreateSession(Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateSession(AsyncCallback callback, object state, Session session);
      Session End_CreateSession(IAsyncResult asyncResult);
      #endif
      bool CheckSession(Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_CheckSession(AsyncCallback callback, object state, Session session);
      bool End_CheckSession(IAsyncResult asyncResult);
      #endif
      List<Session> getSession(Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getSession(AsyncCallback callback, object state, Session session);
      List<Session> End_getSession(IAsyncResult asyncResult);
      #endif
      bool killSession(Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_killSession(AsyncCallback callback, object state, Session session);
      bool End_killSession(IAsyncResult asyncResult);
      #endif
      bool sessionKickOut(Session session, string sessionList);
      #if SILVERLIGHT
      IAsyncResult Begin_sessionKickOut(AsyncCallback callback, object state, Session session, string sessionList);
      bool End_sessionKickOut(IAsyncResult asyncResult);
      #endif
      bool sessionKickOutVerification(Session session, Session targetSession);
      #if SILVERLIGHT
      IAsyncResult Begin_sessionKickOutVerification(AsyncCallback callback, object state, Session session, Session targetSession);
      bool End_sessionKickOutVerification(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateSession(AsyncCallback callback, object state, Session session)
      {
        return send_CreateSession(callback, state, session);
      }

      public Session End_CreateSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateSession();
      }

      #endif

      public Session CreateSession(Session session)
      {
        #if !SILVERLIGHT
        send_CreateSession(session);
        return recv_CreateSession();

        #else
        var asyncResult = Begin_CreateSession(null, null, session);
        return End_CreateSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateSession(AsyncCallback callback, object state, Session session)
      #else
      public void send_CreateSession(Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateSession", TMessageType.Call, seqid_));
        CreateSession_args args = new CreateSession_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Session recv_CreateSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateSession_result result = new CreateSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CheckSession(AsyncCallback callback, object state, Session session)
      {
        return send_CheckSession(callback, state, session);
      }

      public bool End_CheckSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CheckSession();
      }

      #endif

      public bool CheckSession(Session session)
      {
        #if !SILVERLIGHT
        send_CheckSession(session);
        return recv_CheckSession();

        #else
        var asyncResult = Begin_CheckSession(null, null, session);
        return End_CheckSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CheckSession(AsyncCallback callback, object state, Session session)
      #else
      public void send_CheckSession(Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CheckSession", TMessageType.Call, seqid_));
        CheckSession_args args = new CheckSession_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_CheckSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckSession_result result = new CheckSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSession(AsyncCallback callback, object state, Session session)
      {
        return send_getSession(callback, state, session);
      }

      public List<Session> End_getSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSession();
      }

      #endif

      public List<Session> getSession(Session session)
      {
        #if !SILVERLIGHT
        send_getSession(session);
        return recv_getSession();

        #else
        var asyncResult = Begin_getSession(null, null, session);
        return End_getSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSession(AsyncCallback callback, object state, Session session)
      #else
      public void send_getSession(Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSession", TMessageType.Call, seqid_));
        getSession_args args = new getSession_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Session> recv_getSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSession_result result = new getSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_killSession(AsyncCallback callback, object state, Session session)
      {
        return send_killSession(callback, state, session);
      }

      public bool End_killSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_killSession();
      }

      #endif

      public bool killSession(Session session)
      {
        #if !SILVERLIGHT
        send_killSession(session);
        return recv_killSession();

        #else
        var asyncResult = Begin_killSession(null, null, session);
        return End_killSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_killSession(AsyncCallback callback, object state, Session session)
      #else
      public void send_killSession(Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("killSession", TMessageType.Call, seqid_));
        killSession_args args = new killSession_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_killSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        killSession_result result = new killSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "killSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sessionKickOut(AsyncCallback callback, object state, Session session, string sessionList)
      {
        return send_sessionKickOut(callback, state, session, sessionList);
      }

      public bool End_sessionKickOut(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sessionKickOut();
      }

      #endif

      public bool sessionKickOut(Session session, string sessionList)
      {
        #if !SILVERLIGHT
        send_sessionKickOut(session, sessionList);
        return recv_sessionKickOut();

        #else
        var asyncResult = Begin_sessionKickOut(null, null, session, sessionList);
        return End_sessionKickOut(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sessionKickOut(AsyncCallback callback, object state, Session session, string sessionList)
      #else
      public void send_sessionKickOut(Session session, string sessionList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sessionKickOut", TMessageType.Call, seqid_));
        sessionKickOut_args args = new sessionKickOut_args();
        args.Session = session;
        args.SessionList = sessionList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_sessionKickOut()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sessionKickOut_result result = new sessionKickOut_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sessionKickOut failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sessionKickOutVerification(AsyncCallback callback, object state, Session session, Session targetSession)
      {
        return send_sessionKickOutVerification(callback, state, session, targetSession);
      }

      public bool End_sessionKickOutVerification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sessionKickOutVerification();
      }

      #endif

      public bool sessionKickOutVerification(Session session, Session targetSession)
      {
        #if !SILVERLIGHT
        send_sessionKickOutVerification(session, targetSession);
        return recv_sessionKickOutVerification();

        #else
        var asyncResult = Begin_sessionKickOutVerification(null, null, session, targetSession);
        return End_sessionKickOutVerification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sessionKickOutVerification(AsyncCallback callback, object state, Session session, Session targetSession)
      #else
      public void send_sessionKickOutVerification(Session session, Session targetSession)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sessionKickOutVerification", TMessageType.Call, seqid_));
        sessionKickOutVerification_args args = new sessionKickOutVerification_args();
        args.Session = session;
        args.TargetSession = targetSession;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_sessionKickOutVerification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sessionKickOutVerification_result result = new sessionKickOutVerification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sessionKickOutVerification failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["CreateSession"] = CreateSession_Process;
        processMap_["CheckSession"] = CheckSession_Process;
        processMap_["getSession"] = getSession_Process;
        processMap_["killSession"] = killSession_Process;
        processMap_["sessionKickOut"] = sessionKickOut_Process;
        processMap_["sessionKickOutVerification"] = sessionKickOutVerification_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void CreateSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateSession_args args = new CreateSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateSession_result result = new CreateSession_result();
        try {
          result.Success = iface_.CreateSession(args.Session);
        } catch (SessionException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("CreateSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CheckSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckSession_args args = new CheckSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckSession_result result = new CheckSession_result();
        try {
          result.Success = iface_.CheckSession(args.Session);
        } catch (SessionException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("CheckSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSession_args args = new getSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSession_result result = new getSession_result();
        try {
          result.Success = iface_.getSession(args.Session);
        } catch (SessionException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void killSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        killSession_args args = new killSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        killSession_result result = new killSession_result();
        try {
          result.Success = iface_.killSession(args.Session);
        } catch (SessionException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("killSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sessionKickOut_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sessionKickOut_args args = new sessionKickOut_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sessionKickOut_result result = new sessionKickOut_result();
        try {
          result.Success = iface_.sessionKickOut(args.Session, args.SessionList);
        } catch (SessionException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("sessionKickOut", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sessionKickOutVerification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sessionKickOutVerification_args args = new sessionKickOutVerification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sessionKickOutVerification_result result = new sessionKickOutVerification_result();
        try {
          result.Success = iface_.sessionKickOutVerification(args.Session, args.TargetSession);
        } catch (SessionException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("sessionKickOutVerification", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSession_args : TBase
    {
      private Session _session;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public CreateSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSession_args(");
        bool __first = true;
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSession_result : TBase
    {
      private Session _success;
      private SessionException _ex;

      public Session Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SessionException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public CreateSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Session();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SessionException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckSession_args : TBase
    {
      private Session _session;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public CheckSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CheckSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckSession_args(");
        bool __first = true;
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckSession_result : TBase
    {
      private bool _success;
      private SessionException _ex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SessionException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public CheckSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SessionException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CheckSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckSession_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSession_args : TBase
    {
      private Session _session;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public getSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSession_args(");
        bool __first = true;
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSession_result : TBase
    {
      private List<Session> _success;
      private SessionException _ex;

      public List<Session> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SessionException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public getSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Session>();
                  TList _list248 = iprot.ReadListBegin();
                  for( int _i249 = 0; _i249 < _list248.Count; ++_i249)
                  {
                    Session _elem250;
                    _elem250 = new Session();
                    _elem250.Read(iprot);
                    Success.Add(_elem250);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SessionException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Session _iter251 in Success)
              {
                _iter251.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class killSession_args : TBase
    {
      private Session _session;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public killSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("killSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("killSession_args(");
        bool __first = true;
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class killSession_result : TBase
    {
      private bool _success;
      private SessionException _ex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SessionException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public killSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SessionException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("killSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("killSession_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sessionKickOut_args : TBase
    {
      private Session _session;
      private string _sessionList;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public string SessionList
      {
        get
        {
          return _sessionList;
        }
        set
        {
          __isset.sessionList = true;
          this._sessionList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool sessionList;
      }

      public sessionKickOut_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SessionList = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sessionKickOut_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SessionList != null && __isset.sessionList) {
          field.Name = "sessionList";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionList);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sessionKickOut_args(");
        bool __first = true;
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        if (SessionList != null && __isset.sessionList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionList: ");
          __sb.Append(SessionList);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sessionKickOut_result : TBase
    {
      private bool _success;
      private SessionException _ex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SessionException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public sessionKickOut_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SessionException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sessionKickOut_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sessionKickOut_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sessionKickOutVerification_args : TBase
    {
      private Session _session;
      private Session _targetSession;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public Session TargetSession
      {
        get
        {
          return _targetSession;
        }
        set
        {
          __isset.targetSession = true;
          this._targetSession = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool targetSession;
      }

      public sessionKickOutVerification_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                TargetSession = new Session();
                TargetSession.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sessionKickOutVerification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TargetSession != null && __isset.targetSession) {
          field.Name = "targetSession";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          TargetSession.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sessionKickOutVerification_args(");
        bool __first = true;
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        if (TargetSession != null && __isset.targetSession) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetSession: ");
          __sb.Append(TargetSession== null ? "<null>" : TargetSession.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sessionKickOutVerification_result : TBase
    {
      private bool _success;
      private SessionException _ex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SessionException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public sessionKickOutVerification_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new SessionException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sessionKickOutVerification_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sessionKickOutVerification_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
