/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChatGroup : TBase
  {
    private string _groupId;
    private string _groupName;
    private string _createdBy;
    private long _createdDate;
    private List<string> _members;
    private List<ChatPendingGroupMember> _pendingGroupMember;
    private string _groupSettings;
    private string _mar;
    private List<ChatMember> _chatMemberInfo;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public string GroupName
    {
      get
      {
        return _groupName;
      }
      set
      {
        __isset.groupName = true;
        this._groupName = value;
      }
    }

    public string CreatedBy
    {
      get
      {
        return _createdBy;
      }
      set
      {
        __isset.createdBy = true;
        this._createdBy = value;
      }
    }

    public long CreatedDate
    {
      get
      {
        return _createdDate;
      }
      set
      {
        __isset.createdDate = true;
        this._createdDate = value;
      }
    }

    public List<string> Members
    {
      get
      {
        return _members;
      }
      set
      {
        __isset.members = true;
        this._members = value;
      }
    }

    public List<ChatPendingGroupMember> PendingGroupMember
    {
      get
      {
        return _pendingGroupMember;
      }
      set
      {
        __isset.pendingGroupMember = true;
        this._pendingGroupMember = value;
      }
    }

    public string GroupSettings
    {
      get
      {
        return _groupSettings;
      }
      set
      {
        __isset.groupSettings = true;
        this._groupSettings = value;
      }
    }

    public string Mar
    {
      get
      {
        return _mar;
      }
      set
      {
        __isset.mar = true;
        this._mar = value;
      }
    }

    public List<ChatMember> ChatMemberInfo
    {
      get
      {
        return _chatMemberInfo;
      }
      set
      {
        __isset.chatMemberInfo = true;
        this._chatMemberInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
      public bool groupName;
      public bool createdBy;
      public bool createdDate;
      public bool members;
      public bool pendingGroupMember;
      public bool groupSettings;
      public bool mar;
      public bool chatMemberInfo;
    }

    public ChatGroup() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              GroupId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              GroupName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CreatedBy = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              CreatedDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Members = new List<string>();
                TList _list60 = iprot.ReadListBegin();
                for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                {
                  string _elem62;
                  _elem62 = iprot.ReadString();
                  Members.Add(_elem62);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                PendingGroupMember = new List<ChatPendingGroupMember>();
                TList _list63 = iprot.ReadListBegin();
                for( int _i64 = 0; _i64 < _list63.Count; ++_i64)
                {
                  ChatPendingGroupMember _elem65;
                  _elem65 = new ChatPendingGroupMember();
                  _elem65.Read(iprot);
                  PendingGroupMember.Add(_elem65);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              GroupSettings = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Mar = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                ChatMemberInfo = new List<ChatMember>();
                TList _list66 = iprot.ReadListBegin();
                for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                {
                  ChatMember _elem68;
                  _elem68 = new ChatMember();
                  _elem68.Read(iprot);
                  ChatMemberInfo.Add(_elem68);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ChatGroup");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (GroupId != null && __isset.groupId) {
        field.Name = "groupId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GroupId);
        oprot.WriteFieldEnd();
      }
      if (GroupName != null && __isset.groupName) {
        field.Name = "groupName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GroupName);
        oprot.WriteFieldEnd();
      }
      if (CreatedBy != null && __isset.createdBy) {
        field.Name = "createdBy";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CreatedBy);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdDate) {
        field.Name = "createdDate";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedDate);
        oprot.WriteFieldEnd();
      }
      if (Members != null && __isset.members) {
        field.Name = "members";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Members.Count));
          foreach (string _iter69 in Members)
          {
            oprot.WriteString(_iter69);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PendingGroupMember != null && __isset.pendingGroupMember) {
        field.Name = "pendingGroupMember";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PendingGroupMember.Count));
          foreach (ChatPendingGroupMember _iter70 in PendingGroupMember)
          {
            _iter70.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (GroupSettings != null && __isset.groupSettings) {
        field.Name = "groupSettings";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GroupSettings);
        oprot.WriteFieldEnd();
      }
      if (Mar != null && __isset.mar) {
        field.Name = "mar";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mar);
        oprot.WriteFieldEnd();
      }
      if (ChatMemberInfo != null && __isset.chatMemberInfo) {
        field.Name = "chatMemberInfo";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ChatMemberInfo.Count));
          foreach (ChatMember _iter71 in ChatMemberInfo)
          {
            _iter71.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChatGroup(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      if (GroupName != null && __isset.groupName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupName: ");
        __sb.Append(GroupName);
      }
      if (CreatedBy != null && __isset.createdBy) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedBy: ");
        __sb.Append(CreatedBy);
      }
      if (__isset.createdDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedDate: ");
        __sb.Append(CreatedDate);
      }
      if (Members != null && __isset.members) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Members: ");
        __sb.Append(Members);
      }
      if (PendingGroupMember != null && __isset.pendingGroupMember) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PendingGroupMember: ");
        __sb.Append(PendingGroupMember);
      }
      if (GroupSettings != null && __isset.groupSettings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupSettings: ");
        __sb.Append(GroupSettings);
      }
      if (Mar != null && __isset.mar) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mar: ");
        __sb.Append(Mar);
      }
      if (ChatMemberInfo != null && __isset.chatMemberInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatMemberInfo: ");
        __sb.Append(ChatMemberInfo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
