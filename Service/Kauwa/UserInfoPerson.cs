/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserInfoPerson : TBase
  {
    private string _userId;
    private string _birthDate;
    private string _firstName;
    private string _lastName;
    private string _gender;
    private string _title;
    private EmployerType _employerTypeId;
    private Industry _industryId;
    private string _interests;
    private Religion _religionId;
    private RelationshipStatus _relationshipStatusId;
    private Nationality _nationality;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string BirthDate
    {
      get
      {
        return _birthDate;
      }
      set
      {
        __isset.birthDate = true;
        this._birthDate = value;
      }
    }

    public string FirstName
    {
      get
      {
        return _firstName;
      }
      set
      {
        __isset.firstName = true;
        this._firstName = value;
      }
    }

    public string LastName
    {
      get
      {
        return _lastName;
      }
      set
      {
        __isset.lastName = true;
        this._lastName = value;
      }
    }

    public string Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public EmployerType EmployerTypeId
    {
      get
      {
        return _employerTypeId;
      }
      set
      {
        __isset.employerTypeId = true;
        this._employerTypeId = value;
      }
    }

    public Industry IndustryId
    {
      get
      {
        return _industryId;
      }
      set
      {
        __isset.industryId = true;
        this._industryId = value;
      }
    }

    public string Interests
    {
      get
      {
        return _interests;
      }
      set
      {
        __isset.interests = true;
        this._interests = value;
      }
    }

    public Religion ReligionId
    {
      get
      {
        return _religionId;
      }
      set
      {
        __isset.religionId = true;
        this._religionId = value;
      }
    }

    public RelationshipStatus RelationshipStatusId
    {
      get
      {
        return _relationshipStatusId;
      }
      set
      {
        __isset.relationshipStatusId = true;
        this._relationshipStatusId = value;
      }
    }

    public Nationality Nationality
    {
      get
      {
        return _nationality;
      }
      set
      {
        __isset.nationality = true;
        this._nationality = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool birthDate;
      public bool firstName;
      public bool lastName;
      public bool gender;
      public bool title;
      public bool employerTypeId;
      public bool industryId;
      public bool interests;
      public bool religionId;
      public bool relationshipStatusId;
      public bool nationality;
    }

    public UserInfoPerson() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              BirthDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              FirstName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              LastName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Gender = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              EmployerTypeId = new EmployerType();
              EmployerTypeId.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              IndustryId = new Industry();
              IndustryId.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Interests = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              ReligionId = new Religion();
              ReligionId.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              RelationshipStatusId = new RelationshipStatus();
              RelationshipStatusId.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              Nationality = new Nationality();
              Nationality.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserInfoPerson");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (BirthDate != null && __isset.birthDate) {
        field.Name = "birthDate";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BirthDate);
        oprot.WriteFieldEnd();
      }
      if (FirstName != null && __isset.firstName) {
        field.Name = "firstName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FirstName);
        oprot.WriteFieldEnd();
      }
      if (LastName != null && __isset.lastName) {
        field.Name = "lastName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastName);
        oprot.WriteFieldEnd();
      }
      if (Gender != null && __isset.gender) {
        field.Name = "gender";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Gender);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (EmployerTypeId != null && __isset.employerTypeId) {
        field.Name = "employerTypeId";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        EmployerTypeId.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (IndustryId != null && __isset.industryId) {
        field.Name = "industryId";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        IndustryId.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Interests != null && __isset.interests) {
        field.Name = "interests";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Interests);
        oprot.WriteFieldEnd();
      }
      if (ReligionId != null && __isset.religionId) {
        field.Name = "religionId";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        ReligionId.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (RelationshipStatusId != null && __isset.relationshipStatusId) {
        field.Name = "relationshipStatusId";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        RelationshipStatusId.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Nationality != null && __isset.nationality) {
        field.Name = "nationality";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        Nationality.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserInfoPerson(");
      bool __first = true;
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (BirthDate != null && __isset.birthDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BirthDate: ");
        __sb.Append(BirthDate);
      }
      if (FirstName != null && __isset.firstName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstName: ");
        __sb.Append(FirstName);
      }
      if (LastName != null && __isset.lastName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastName: ");
        __sb.Append(LastName);
      }
      if (Gender != null && __isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (EmployerTypeId != null && __isset.employerTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EmployerTypeId: ");
        __sb.Append(EmployerTypeId== null ? "<null>" : EmployerTypeId.ToString());
      }
      if (IndustryId != null && __isset.industryId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IndustryId: ");
        __sb.Append(IndustryId== null ? "<null>" : IndustryId.ToString());
      }
      if (Interests != null && __isset.interests) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Interests: ");
        __sb.Append(Interests);
      }
      if (ReligionId != null && __isset.religionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReligionId: ");
        __sb.Append(ReligionId== null ? "<null>" : ReligionId.ToString());
      }
      if (RelationshipStatusId != null && __isset.relationshipStatusId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RelationshipStatusId: ");
        __sb.Append(RelationshipStatusId== null ? "<null>" : RelationshipStatusId.ToString());
      }
      if (Nationality != null && __isset.nationality) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Nationality: ");
        __sb.Append(Nationality== null ? "<null>" : Nationality.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
