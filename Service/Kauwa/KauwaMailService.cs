/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class KauwaMailService {
    /// <summary>
    /// * @author Dipak Malla
    /// *         KauwaMailService Class
    /// *         This service is used to send mail
    ///    Date: 7/24/14
    /// </summary>
    public interface Iface {
      /// <summary>
      /// @param KauwaMail
      ///             Takes KauwaMail object parameter.
      ///             Set sender, to and body. subject and isHtml are optional.
      ///             By default mail is send without isHtml Field.
      /// @throws KauwaMailException (See Error Code list for details)
      /// </summary>
      /// <param name="mail"></param>
      void SendMail(KauwaMail mail);
      #if SILVERLIGHT
      IAsyncResult Begin_SendMail(AsyncCallback callback, object state, KauwaMail mail);
      void End_SendMail(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// * @author Dipak Malla
    /// *         KauwaMailService Class
    /// *         This service is used to send mail
    ///    Date: 7/24/14
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_SendMail(AsyncCallback callback, object state, KauwaMail mail)
      {
        return send_SendMail(callback, state, mail);
      }

      public void End_SendMail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SendMail();
      }

      #endif

      /// <summary>
      /// @param KauwaMail
      ///             Takes KauwaMail object parameter.
      ///             Set sender, to and body. subject and isHtml are optional.
      ///             By default mail is send without isHtml Field.
      /// @throws KauwaMailException (See Error Code list for details)
      /// </summary>
      /// <param name="mail"></param>
      public void SendMail(KauwaMail mail)
      {
        #if !SILVERLIGHT
        send_SendMail(mail);
        recv_SendMail();

        #else
        var asyncResult = Begin_SendMail(null, null, mail);
        End_SendMail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SendMail(AsyncCallback callback, object state, KauwaMail mail)
      #else
      public void send_SendMail(KauwaMail mail)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SendMail", TMessageType.Call, seqid_));
        SendMail_args args = new SendMail_args();
        args.Mail = mail;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SendMail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SendMail_result result = new SendMail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["SendMail"] = SendMail_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void SendMail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SendMail_args args = new SendMail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SendMail_result result = new SendMail_result();
        try {
          iface_.SendMail(args.Mail);
        } catch (KauwaMailException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("SendMail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendMail_args : TBase
    {
      private KauwaMail _mail;

      public KauwaMail Mail
      {
        get
        {
          return _mail;
        }
        set
        {
          __isset.mail = true;
          this._mail = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mail;
      }

      public SendMail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Mail = new KauwaMail();
                Mail.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendMail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mail != null && __isset.mail) {
          field.Name = "mail";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Mail.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SendMail_args(");
        bool __first = true;
        if (Mail != null && __isset.mail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mail: ");
          __sb.Append(Mail== null ? "<null>" : Mail.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendMail_result : TBase
    {
      private KauwaMailException _ex;

      public KauwaMailException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
      }

      public SendMail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new KauwaMailException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendMail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SendMail_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
