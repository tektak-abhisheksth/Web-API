/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserInfoCompany : TBase
  {
    private string _name;
    private string _date;
    private OwnershipType _ownershipType;
    private Industry _industry;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Date
    {
      get
      {
        return _date;
      }
      set
      {
        __isset.date = true;
        this._date = value;
      }
    }

    public OwnershipType OwnershipType
    {
      get
      {
        return _ownershipType;
      }
      set
      {
        __isset.ownershipType = true;
        this._ownershipType = value;
      }
    }

    public Industry Industry
    {
      get
      {
        return _industry;
      }
      set
      {
        __isset.industry = true;
        this._industry = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool date;
      public bool ownershipType;
      public bool industry;
    }

    public UserInfoCompany() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Date = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              OwnershipType = new OwnershipType();
              OwnershipType.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Industry = new Industry();
              Industry.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserInfoCompany");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Date != null && __isset.date) {
        field.Name = "date";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Date);
        oprot.WriteFieldEnd();
      }
      if (OwnershipType != null && __isset.ownershipType) {
        field.Name = "ownershipType";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        OwnershipType.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Industry != null && __isset.industry) {
        field.Name = "industry";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Industry.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserInfoCompany(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Date != null && __isset.date) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Date: ");
        __sb.Append(Date);
      }
      if (OwnershipType != null && __isset.ownershipType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OwnershipType: ");
        __sb.Append(OwnershipType== null ? "<null>" : OwnershipType.ToString());
      }
      if (Industry != null && __isset.industry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Industry: ");
        __sb.Append(Industry== null ? "<null>" : Industry.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
