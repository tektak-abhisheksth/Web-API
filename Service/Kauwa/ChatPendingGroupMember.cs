/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChatPendingGroupMember : TBase
  {
    private string _userId;
    private string _requestedByUserId;
    private long _requestedTimestamp;
    private long _approvedTimestamp;
    private long _leftTimestamp;
    private long _deletedTimestamp;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string RequestedByUserId
    {
      get
      {
        return _requestedByUserId;
      }
      set
      {
        __isset.requestedByUserId = true;
        this._requestedByUserId = value;
      }
    }

    public long RequestedTimestamp
    {
      get
      {
        return _requestedTimestamp;
      }
      set
      {
        __isset.requestedTimestamp = true;
        this._requestedTimestamp = value;
      }
    }

    public long ApprovedTimestamp
    {
      get
      {
        return _approvedTimestamp;
      }
      set
      {
        __isset.approvedTimestamp = true;
        this._approvedTimestamp = value;
      }
    }

    public long LeftTimestamp
    {
      get
      {
        return _leftTimestamp;
      }
      set
      {
        __isset.leftTimestamp = true;
        this._leftTimestamp = value;
      }
    }

    public long DeletedTimestamp
    {
      get
      {
        return _deletedTimestamp;
      }
      set
      {
        __isset.deletedTimestamp = true;
        this._deletedTimestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool requestedByUserId;
      public bool requestedTimestamp;
      public bool approvedTimestamp;
      public bool leftTimestamp;
      public bool deletedTimestamp;
    }

    public ChatPendingGroupMember() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              RequestedByUserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              RequestedTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              ApprovedTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              LeftTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              DeletedTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ChatPendingGroupMember");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (RequestedByUserId != null && __isset.requestedByUserId) {
        field.Name = "requestedByUserId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RequestedByUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.requestedTimestamp) {
        field.Name = "requestedTimestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RequestedTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.approvedTimestamp) {
        field.Name = "approvedTimestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ApprovedTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.leftTimestamp) {
        field.Name = "leftTimestamp";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LeftTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.deletedTimestamp) {
        field.Name = "deletedTimestamp";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DeletedTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChatPendingGroupMember(");
      bool __first = true;
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (RequestedByUserId != null && __isset.requestedByUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestedByUserId: ");
        __sb.Append(RequestedByUserId);
      }
      if (__isset.requestedTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestedTimestamp: ");
        __sb.Append(RequestedTimestamp);
      }
      if (__isset.approvedTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApprovedTimestamp: ");
        __sb.Append(ApprovedTimestamp);
      }
      if (__isset.leftTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LeftTimestamp: ");
        __sb.Append(LeftTimestamp);
      }
      if (__isset.deletedTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeletedTimestamp: ");
        __sb.Append(DeletedTimestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
