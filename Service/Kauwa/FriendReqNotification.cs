/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FriendReqNotification : TBase
  {
    private string _username;
    private int _requestId;
    private int _userId;
    private int _userTypeId;
    private string _name;
    private string _image;
    private string _title;
    private long _sentDate;
    private long _readDate;
    private NotificationType _nType;
    private List<Friend> _mFriends;
    private int _mutualFriendId;
    private string _mutualFriendName;
    private int _mutualFriendCount;
    private string _groupId;
    private string _groupName;
    private int _eventId;
    private string _eventName;

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public int RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int UserTypeId
    {
      get
      {
        return _userTypeId;
      }
      set
      {
        __isset.userTypeId = true;
        this._userTypeId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public long SentDate
    {
      get
      {
        return _sentDate;
      }
      set
      {
        __isset.sentDate = true;
        this._sentDate = value;
      }
    }

    public long ReadDate
    {
      get
      {
        return _readDate;
      }
      set
      {
        __isset.readDate = true;
        this._readDate = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="NotificationType"/>
    /// </summary>
    public NotificationType NType
    {
      get
      {
        return _nType;
      }
      set
      {
        __isset.nType = true;
        this._nType = value;
      }
    }

    public List<Friend> MFriends
    {
      get
      {
        return _mFriends;
      }
      set
      {
        __isset.mFriends = true;
        this._mFriends = value;
      }
    }

    public int MutualFriendId
    {
      get
      {
        return _mutualFriendId;
      }
      set
      {
        __isset.mutualFriendId = true;
        this._mutualFriendId = value;
      }
    }

    public string MutualFriendName
    {
      get
      {
        return _mutualFriendName;
      }
      set
      {
        __isset.mutualFriendName = true;
        this._mutualFriendName = value;
      }
    }

    public int MutualFriendCount
    {
      get
      {
        return _mutualFriendCount;
      }
      set
      {
        __isset.mutualFriendCount = true;
        this._mutualFriendCount = value;
      }
    }

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public string GroupName
    {
      get
      {
        return _groupName;
      }
      set
      {
        __isset.groupName = true;
        this._groupName = value;
      }
    }

    public int EventId
    {
      get
      {
        return _eventId;
      }
      set
      {
        __isset.eventId = true;
        this._eventId = value;
      }
    }

    public string EventName
    {
      get
      {
        return _eventName;
      }
      set
      {
        __isset.eventName = true;
        this._eventName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool username;
      public bool requestId;
      public bool userId;
      public bool userTypeId;
      public bool name;
      public bool image;
      public bool title;
      public bool sentDate;
      public bool readDate;
      public bool nType;
      public bool mFriends;
      public bool mutualFriendId;
      public bool mutualFriendName;
      public bool mutualFriendCount;
      public bool groupId;
      public bool groupName;
      public bool eventId;
      public bool eventName;
    }

    public FriendReqNotification() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Username = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RequestId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              UserTypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Image = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              SentDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              ReadDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              NType = (NotificationType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                MFriends = new List<Friend>();
                TList _list124 = iprot.ReadListBegin();
                for( int _i125 = 0; _i125 < _list124.Count; ++_i125)
                {
                  Friend _elem126;
                  _elem126 = new Friend();
                  _elem126.Read(iprot);
                  MFriends.Add(_elem126);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              MutualFriendId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              MutualFriendName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              MutualFriendCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              GroupId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              GroupName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              EventId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              EventName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FriendReqNotification");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Username != null && __isset.username) {
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Username);
        oprot.WriteFieldEnd();
      }
      if (__isset.requestId) {
        field.Name = "requestId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RequestId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userTypeId) {
        field.Name = "userTypeId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserTypeId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Image);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (__isset.sentDate) {
        field.Name = "sentDate";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SentDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.readDate) {
        field.Name = "readDate";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ReadDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.nType) {
        field.Name = "nType";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)NType);
        oprot.WriteFieldEnd();
      }
      if (MFriends != null && __isset.mFriends) {
        field.Name = "mFriends";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MFriends.Count));
          foreach (Friend _iter127 in MFriends)
          {
            _iter127.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.mutualFriendId) {
        field.Name = "mutualFriendId";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MutualFriendId);
        oprot.WriteFieldEnd();
      }
      if (MutualFriendName != null && __isset.mutualFriendName) {
        field.Name = "mutualFriendName";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MutualFriendName);
        oprot.WriteFieldEnd();
      }
      if (__isset.mutualFriendCount) {
        field.Name = "mutualFriendCount";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MutualFriendCount);
        oprot.WriteFieldEnd();
      }
      if (GroupId != null && __isset.groupId) {
        field.Name = "groupId";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GroupId);
        oprot.WriteFieldEnd();
      }
      if (GroupName != null && __isset.groupName) {
        field.Name = "groupName";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GroupName);
        oprot.WriteFieldEnd();
      }
      if (__isset.eventId) {
        field.Name = "eventId";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EventId);
        oprot.WriteFieldEnd();
      }
      if (EventName != null && __isset.eventName) {
        field.Name = "eventName";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EventName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FriendReqNotification(");
      bool __first = true;
      if (Username != null && __isset.username) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Username: ");
        __sb.Append(Username);
      }
      if (__isset.requestId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestId: ");
        __sb.Append(RequestId);
      }
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.userTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserTypeId: ");
        __sb.Append(UserTypeId);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (__isset.sentDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SentDate: ");
        __sb.Append(SentDate);
      }
      if (__isset.readDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReadDate: ");
        __sb.Append(ReadDate);
      }
      if (__isset.nType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NType: ");
        __sb.Append(NType);
      }
      if (MFriends != null && __isset.mFriends) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MFriends: ");
        __sb.Append(MFriends);
      }
      if (__isset.mutualFriendId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutualFriendId: ");
        __sb.Append(MutualFriendId);
      }
      if (MutualFriendName != null && __isset.mutualFriendName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutualFriendName: ");
        __sb.Append(MutualFriendName);
      }
      if (__isset.mutualFriendCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MutualFriendCount: ");
        __sb.Append(MutualFriendCount);
      }
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      if (GroupName != null && __isset.groupName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupName: ");
        __sb.Append(GroupName);
      }
      if (__isset.eventId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EventId: ");
        __sb.Append(EventId);
      }
      if (EventName != null && __isset.eventName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EventName: ");
        __sb.Append(EventName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
