/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TekTak.iLoop.Kauwa
{
  public partial class ChatUserInfoService {
    public interface Iface {
      /// <summary>
      /// Gets the array of groupIds for given userId           *
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<String> groupIds
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<string> getGroups(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getGroups(AsyncCallback callback, object state, string userId, Session session);
      List<string> End_getGroups(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes the given array of blockedInstanceIds for a given userID
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param list<String> blockedInstanceIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instances"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void saveBlockedInstanceIds(List<string> instances, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveBlockedInstanceIds(AsyncCallback callback, object state, List<string> instances, string userId, Session session);
      void End_saveBlockedInstanceIds(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes a single blockedInstanceId along with timestamp for given userId
      /// Inserts only if given userId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param String instanceId
      /// @param String userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instanceId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void saveBlockedInstanceId(string instanceId, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveBlockedInstanceId(AsyncCallback callback, object state, string instanceId, string userId, Session session);
      void End_saveBlockedInstanceId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes the given array of mutedInstanceIds for a given userID
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param list<String> blockedInstanceIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instances"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void saveMutedInstanceIds(List<string> instances, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveMutedInstanceIds(AsyncCallback callback, object state, List<string> instances, string userId, Session session);
      void End_saveMutedInstanceIds(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes a single mutedInstanceId along with timestamp for given userId
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// @param String instanceId
      /// @param String userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instanceId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void saveMutedInstanceId(string instanceId, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveMutedInstanceId(AsyncCallback callback, object state, string instanceId, string userId, Session session);
      void End_saveMutedInstanceId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes the given array of userBlockedInstanceIds for a given userID
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// @param list<String> userBlockedInstanceIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instanceId"></param>
      /// <param name="userIdList"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void saveUserBlockedInstancess(string instanceId, List<string> userIdList, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveUserBlockedInstancess(AsyncCallback callback, object state, string instanceId, List<string> userIdList, string userId, Session session);
      void End_saveUserBlockedInstancess(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes the given array of mutedUserIds for a given userID
      /// Inserts only if given userId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param list<String> mutedUserIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userIdList"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void saveMuteUserIds(List<string> userIdList, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveMuteUserIds(AsyncCallback callback, object state, List<string> userIdList, string userId, Session session);
      void End_saveMuteUserIds(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes a single mutedUserId along with timestamp for given userId
      /// Inserts only if given userId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param String mutedUserId
      /// @param String userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="muteUserId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      void saveMuteUserId(string muteUserId, string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveMuteUserId(AsyncCallback callback, object state, string muteUserId, string userId, Session session);
      void End_saveMuteUserId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of (BlockedInstance) blockedInstances for given userId
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatBlockedInstance>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<ChatBlockedInstance> getBlockedInstances(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getBlockedInstances(AsyncCallback callback, object state, string userId, Session session);
      List<ChatBlockedInstance> End_getBlockedInstances(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of (UserBlockedInstance) userBlockedInstanceIds for given userId
      /// 
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatUserBlockedInstance>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<ChatUserBlockedInstance> getUserBlockedInstances(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserBlockedInstances(AsyncCallback callback, object state, string userId, Session session);
      List<ChatUserBlockedInstance> End_getUserBlockedInstances(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of (MutedInstance) mutedInstances for given userId
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatMutedInstance>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<ChatMutedInstance> getMutedInstances(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getMutedInstances(AsyncCallback callback, object state, string userId, Session session);
      List<ChatMutedInstance> End_getMutedInstances(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the list of (MutedUser) mutedUsers for given userId
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatMutedUser>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      List<ChatMutedUser> getMutedUsers(string userId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getMutedUsers(AsyncCallback callback, object state, string userId, Session session);
      List<ChatMutedUser> End_getMutedUsers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts/Deletes the given group id for given array of userId
      /// inserts only if given groupId has not been stored into hbase yet
      /// deletes if it is already present in the hbase
      /// @param String groupId
      /// @param list<String>   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="userIdList"></param>
      /// <param name="session"></param>
      void saveGroupForUsers(string groupId, List<string> userIdList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_saveGroupForUsers(AsyncCallback callback, object state, string groupId, List<string> userIdList, Session session);
      void End_saveGroupForUsers(IAsyncResult asyncResult);
      #endif
      void updatePushCode(string pushCode, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updatePushCode(AsyncCallback callback, object state, string pushCode, Session session);
      void End_updatePushCode(IAsyncResult asyncResult);
      #endif
      void instanceOperation(List<string> instances, InstanceOperation operations, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_instanceOperation(AsyncCallback callback, object state, List<string> instances, InstanceOperation operations, Session session);
      void End_instanceOperation(IAsyncResult asyncResult);
      #endif
      List<string> msgDelete(string instanceId, List<string> msgList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_msgDelete(AsyncCallback callback, object state, string instanceId, List<string> msgList, Session session);
      List<string> End_msgDelete(IAsyncResult asyncResult);
      #endif
      void chatMemAddRem(string instanceId, List<string> userList, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_chatMemAddRem(AsyncCallback callback, object state, string instanceId, List<string> userList, Session session);
      void End_chatMemAddRem(IAsyncResult asyncResult);
      #endif
      string getInstance(string instanceId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getInstance(AsyncCallback callback, object state, string instanceId, Session session);
      string End_getInstance(IAsyncResult asyncResult);
      #endif
      void updateDisposableInstance(string instanceId, int viewCount, int viewTimeLimit, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_updateDisposableInstance(AsyncCallback callback, object state, string instanceId, int viewCount, int viewTimeLimit, Session session);
      void End_updateDisposableInstance(IAsyncResult asyncResult);
      #endif
      string getMessage(string instanceId, string msgId, Session session);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessage(AsyncCallback callback, object state, string instanceId, string msgId, Session session);
      string End_getMessage(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroups(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getGroups(callback, state, userId, session);
      }

      public List<string> End_getGroups(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroups();
      }

      #endif

      /// <summary>
      /// Gets the array of groupIds for given userId           *
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<String> groupIds
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<string> getGroups(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getGroups(userId, session);
        return recv_getGroups();

        #else
        var asyncResult = Begin_getGroups(null, null, userId, session);
        return End_getGroups(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroups(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getGroups(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroups", TMessageType.Call, seqid_));
        getGroups_args args = new getGroups_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroups_result result = new getGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroups failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveBlockedInstanceIds(AsyncCallback callback, object state, List<string> instances, string userId, Session session)
      {
        return send_saveBlockedInstanceIds(callback, state, instances, userId, session);
      }

      public void End_saveBlockedInstanceIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveBlockedInstanceIds();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes the given array of blockedInstanceIds for a given userID
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param list<String> blockedInstanceIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instances"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void saveBlockedInstanceIds(List<string> instances, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_saveBlockedInstanceIds(instances, userId, session);
        recv_saveBlockedInstanceIds();

        #else
        var asyncResult = Begin_saveBlockedInstanceIds(null, null, instances, userId, session);
        End_saveBlockedInstanceIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveBlockedInstanceIds(AsyncCallback callback, object state, List<string> instances, string userId, Session session)
      #else
      public void send_saveBlockedInstanceIds(List<string> instances, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveBlockedInstanceIds", TMessageType.Call, seqid_));
        saveBlockedInstanceIds_args args = new saveBlockedInstanceIds_args();
        args.Instances = instances;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveBlockedInstanceIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveBlockedInstanceIds_result result = new saveBlockedInstanceIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveBlockedInstanceId(AsyncCallback callback, object state, string instanceId, string userId, Session session)
      {
        return send_saveBlockedInstanceId(callback, state, instanceId, userId, session);
      }

      public void End_saveBlockedInstanceId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveBlockedInstanceId();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes a single blockedInstanceId along with timestamp for given userId
      /// Inserts only if given userId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param String instanceId
      /// @param String userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instanceId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void saveBlockedInstanceId(string instanceId, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_saveBlockedInstanceId(instanceId, userId, session);
        recv_saveBlockedInstanceId();

        #else
        var asyncResult = Begin_saveBlockedInstanceId(null, null, instanceId, userId, session);
        End_saveBlockedInstanceId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveBlockedInstanceId(AsyncCallback callback, object state, string instanceId, string userId, Session session)
      #else
      public void send_saveBlockedInstanceId(string instanceId, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveBlockedInstanceId", TMessageType.Call, seqid_));
        saveBlockedInstanceId_args args = new saveBlockedInstanceId_args();
        args.InstanceId = instanceId;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveBlockedInstanceId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveBlockedInstanceId_result result = new saveBlockedInstanceId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveMutedInstanceIds(AsyncCallback callback, object state, List<string> instances, string userId, Session session)
      {
        return send_saveMutedInstanceIds(callback, state, instances, userId, session);
      }

      public void End_saveMutedInstanceIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveMutedInstanceIds();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes the given array of mutedInstanceIds for a given userID
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param list<String> blockedInstanceIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instances"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void saveMutedInstanceIds(List<string> instances, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_saveMutedInstanceIds(instances, userId, session);
        recv_saveMutedInstanceIds();

        #else
        var asyncResult = Begin_saveMutedInstanceIds(null, null, instances, userId, session);
        End_saveMutedInstanceIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveMutedInstanceIds(AsyncCallback callback, object state, List<string> instances, string userId, Session session)
      #else
      public void send_saveMutedInstanceIds(List<string> instances, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveMutedInstanceIds", TMessageType.Call, seqid_));
        saveMutedInstanceIds_args args = new saveMutedInstanceIds_args();
        args.Instances = instances;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveMutedInstanceIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveMutedInstanceIds_result result = new saveMutedInstanceIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveMutedInstanceId(AsyncCallback callback, object state, string instanceId, string userId, Session session)
      {
        return send_saveMutedInstanceId(callback, state, instanceId, userId, session);
      }

      public void End_saveMutedInstanceId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveMutedInstanceId();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes a single mutedInstanceId along with timestamp for given userId
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// @param String instanceId
      /// @param String userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instanceId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void saveMutedInstanceId(string instanceId, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_saveMutedInstanceId(instanceId, userId, session);
        recv_saveMutedInstanceId();

        #else
        var asyncResult = Begin_saveMutedInstanceId(null, null, instanceId, userId, session);
        End_saveMutedInstanceId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveMutedInstanceId(AsyncCallback callback, object state, string instanceId, string userId, Session session)
      #else
      public void send_saveMutedInstanceId(string instanceId, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveMutedInstanceId", TMessageType.Call, seqid_));
        saveMutedInstanceId_args args = new saveMutedInstanceId_args();
        args.InstanceId = instanceId;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveMutedInstanceId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveMutedInstanceId_result result = new saveMutedInstanceId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveUserBlockedInstancess(AsyncCallback callback, object state, string instanceId, List<string> userIdList, string userId, Session session)
      {
        return send_saveUserBlockedInstancess(callback, state, instanceId, userIdList, userId, session);
      }

      public void End_saveUserBlockedInstancess(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveUserBlockedInstancess();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes the given array of userBlockedInstanceIds for a given userID
      /// Inserts only if given instanceId is not present in the hbase
      /// Deletes otherwise
      /// @param list<String> userBlockedInstanceIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="instanceId"></param>
      /// <param name="userIdList"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void saveUserBlockedInstancess(string instanceId, List<string> userIdList, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_saveUserBlockedInstancess(instanceId, userIdList, userId, session);
        recv_saveUserBlockedInstancess();

        #else
        var asyncResult = Begin_saveUserBlockedInstancess(null, null, instanceId, userIdList, userId, session);
        End_saveUserBlockedInstancess(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveUserBlockedInstancess(AsyncCallback callback, object state, string instanceId, List<string> userIdList, string userId, Session session)
      #else
      public void send_saveUserBlockedInstancess(string instanceId, List<string> userIdList, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveUserBlockedInstancess", TMessageType.Call, seqid_));
        saveUserBlockedInstancess_args args = new saveUserBlockedInstancess_args();
        args.InstanceId = instanceId;
        args.UserIdList = userIdList;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveUserBlockedInstancess()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveUserBlockedInstancess_result result = new saveUserBlockedInstancess_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveMuteUserIds(AsyncCallback callback, object state, List<string> userIdList, string userId, Session session)
      {
        return send_saveMuteUserIds(callback, state, userIdList, userId, session);
      }

      public void End_saveMuteUserIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveMuteUserIds();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes the given array of mutedUserIds for a given userID
      /// Inserts only if given userId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param list<String> mutedUserIds
      /// @param String   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userIdList"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void saveMuteUserIds(List<string> userIdList, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_saveMuteUserIds(userIdList, userId, session);
        recv_saveMuteUserIds();

        #else
        var asyncResult = Begin_saveMuteUserIds(null, null, userIdList, userId, session);
        End_saveMuteUserIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveMuteUserIds(AsyncCallback callback, object state, List<string> userIdList, string userId, Session session)
      #else
      public void send_saveMuteUserIds(List<string> userIdList, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveMuteUserIds", TMessageType.Call, seqid_));
        saveMuteUserIds_args args = new saveMuteUserIds_args();
        args.UserIdList = userIdList;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveMuteUserIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveMuteUserIds_result result = new saveMuteUserIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveMuteUserId(AsyncCallback callback, object state, string muteUserId, string userId, Session session)
      {
        return send_saveMuteUserId(callback, state, muteUserId, userId, session);
      }

      public void End_saveMuteUserId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveMuteUserId();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes a single mutedUserId along with timestamp for given userId
      /// Inserts only if given userId is not present in the hbase
      /// Deletes otherwise
      /// 
      /// @param String mutedUserId
      /// @param String userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="muteUserId"></param>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public void saveMuteUserId(string muteUserId, string userId, Session session)
      {
        #if !SILVERLIGHT
        send_saveMuteUserId(muteUserId, userId, session);
        recv_saveMuteUserId();

        #else
        var asyncResult = Begin_saveMuteUserId(null, null, muteUserId, userId, session);
        End_saveMuteUserId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveMuteUserId(AsyncCallback callback, object state, string muteUserId, string userId, Session session)
      #else
      public void send_saveMuteUserId(string muteUserId, string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveMuteUserId", TMessageType.Call, seqid_));
        saveMuteUserId_args args = new saveMuteUserId_args();
        args.MuteUserId = muteUserId;
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveMuteUserId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveMuteUserId_result result = new saveMuteUserId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBlockedInstances(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getBlockedInstances(callback, state, userId, session);
      }

      public List<ChatBlockedInstance> End_getBlockedInstances(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBlockedInstances();
      }

      #endif

      /// <summary>
      /// Gets the list of (BlockedInstance) blockedInstances for given userId
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatBlockedInstance>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<ChatBlockedInstance> getBlockedInstances(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getBlockedInstances(userId, session);
        return recv_getBlockedInstances();

        #else
        var asyncResult = Begin_getBlockedInstances(null, null, userId, session);
        return End_getBlockedInstances(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBlockedInstances(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getBlockedInstances(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBlockedInstances", TMessageType.Call, seqid_));
        getBlockedInstances_args args = new getBlockedInstances_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ChatBlockedInstance> recv_getBlockedInstances()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBlockedInstances_result result = new getBlockedInstances_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedInstances failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserBlockedInstances(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getUserBlockedInstances(callback, state, userId, session);
      }

      public List<ChatUserBlockedInstance> End_getUserBlockedInstances(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserBlockedInstances();
      }

      #endif

      /// <summary>
      /// Gets the list of (UserBlockedInstance) userBlockedInstanceIds for given userId
      /// 
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatUserBlockedInstance>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<ChatUserBlockedInstance> getUserBlockedInstances(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getUserBlockedInstances(userId, session);
        return recv_getUserBlockedInstances();

        #else
        var asyncResult = Begin_getUserBlockedInstances(null, null, userId, session);
        return End_getUserBlockedInstances(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserBlockedInstances(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getUserBlockedInstances(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserBlockedInstances", TMessageType.Call, seqid_));
        getUserBlockedInstances_args args = new getUserBlockedInstances_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ChatUserBlockedInstance> recv_getUserBlockedInstances()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserBlockedInstances_result result = new getUserBlockedInstances_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserBlockedInstances failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMutedInstances(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getMutedInstances(callback, state, userId, session);
      }

      public List<ChatMutedInstance> End_getMutedInstances(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMutedInstances();
      }

      #endif

      /// <summary>
      /// Gets the list of (MutedInstance) mutedInstances for given userId
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatMutedInstance>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<ChatMutedInstance> getMutedInstances(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getMutedInstances(userId, session);
        return recv_getMutedInstances();

        #else
        var asyncResult = Begin_getMutedInstances(null, null, userId, session);
        return End_getMutedInstances(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMutedInstances(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getMutedInstances(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMutedInstances", TMessageType.Call, seqid_));
        getMutedInstances_args args = new getMutedInstances_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ChatMutedInstance> recv_getMutedInstances()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMutedInstances_result result = new getMutedInstances_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMutedInstances failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMutedUsers(AsyncCallback callback, object state, string userId, Session session)
      {
        return send_getMutedUsers(callback, state, userId, session);
      }

      public List<ChatMutedUser> End_getMutedUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMutedUsers();
      }

      #endif

      /// <summary>
      /// Gets the list of (MutedUser) mutedUsers for given userId
      /// @param String userId
      /// @param Session sessionObj
      /// @return list<ChatMutedUser>
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="session"></param>
      public List<ChatMutedUser> getMutedUsers(string userId, Session session)
      {
        #if !SILVERLIGHT
        send_getMutedUsers(userId, session);
        return recv_getMutedUsers();

        #else
        var asyncResult = Begin_getMutedUsers(null, null, userId, session);
        return End_getMutedUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMutedUsers(AsyncCallback callback, object state, string userId, Session session)
      #else
      public void send_getMutedUsers(string userId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMutedUsers", TMessageType.Call, seqid_));
        getMutedUsers_args args = new getMutedUsers_args();
        args.UserId = userId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ChatMutedUser> recv_getMutedUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMutedUsers_result result = new getMutedUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMutedUsers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveGroupForUsers(AsyncCallback callback, object state, string groupId, List<string> userIdList, Session session)
      {
        return send_saveGroupForUsers(callback, state, groupId, userIdList, session);
      }

      public void End_saveGroupForUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveGroupForUsers();
      }

      #endif

      /// <summary>
      /// Inserts/Deletes the given group id for given array of userId
      /// inserts only if given groupId has not been stored into hbase yet
      /// deletes if it is already present in the hbase
      /// @param String groupId
      /// @param list<String>   userId
      /// @param Session sessionObj
      /// @throws ChatUserInfoException
      /// @throws SessionException
      /// </summary>
      /// <param name="groupId"></param>
      /// <param name="userIdList"></param>
      /// <param name="session"></param>
      public void saveGroupForUsers(string groupId, List<string> userIdList, Session session)
      {
        #if !SILVERLIGHT
        send_saveGroupForUsers(groupId, userIdList, session);
        recv_saveGroupForUsers();

        #else
        var asyncResult = Begin_saveGroupForUsers(null, null, groupId, userIdList, session);
        End_saveGroupForUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveGroupForUsers(AsyncCallback callback, object state, string groupId, List<string> userIdList, Session session)
      #else
      public void send_saveGroupForUsers(string groupId, List<string> userIdList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveGroupForUsers", TMessageType.Call, seqid_));
        saveGroupForUsers_args args = new saveGroupForUsers_args();
        args.GroupId = groupId;
        args.UserIdList = userIdList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveGroupForUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveGroupForUsers_result result = new saveGroupForUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updatePushCode(AsyncCallback callback, object state, string pushCode, Session session)
      {
        return send_updatePushCode(callback, state, pushCode, session);
      }

      public void End_updatePushCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updatePushCode();
      }

      #endif

      public void updatePushCode(string pushCode, Session session)
      {
        #if !SILVERLIGHT
        send_updatePushCode(pushCode, session);
        recv_updatePushCode();

        #else
        var asyncResult = Begin_updatePushCode(null, null, pushCode, session);
        End_updatePushCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updatePushCode(AsyncCallback callback, object state, string pushCode, Session session)
      #else
      public void send_updatePushCode(string pushCode, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updatePushCode", TMessageType.Call, seqid_));
        updatePushCode_args args = new updatePushCode_args();
        args.PushCode = pushCode;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updatePushCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updatePushCode_result result = new updatePushCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_instanceOperation(AsyncCallback callback, object state, List<string> instances, InstanceOperation operations, Session session)
      {
        return send_instanceOperation(callback, state, instances, operations, session);
      }

      public void End_instanceOperation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_instanceOperation();
      }

      #endif

      public void instanceOperation(List<string> instances, InstanceOperation operations, Session session)
      {
        #if !SILVERLIGHT
        send_instanceOperation(instances, operations, session);
        recv_instanceOperation();

        #else
        var asyncResult = Begin_instanceOperation(null, null, instances, operations, session);
        End_instanceOperation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_instanceOperation(AsyncCallback callback, object state, List<string> instances, InstanceOperation operations, Session session)
      #else
      public void send_instanceOperation(List<string> instances, InstanceOperation operations, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("instanceOperation", TMessageType.Call, seqid_));
        instanceOperation_args args = new instanceOperation_args();
        args.Instances = instances;
        args.Operations = operations;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_instanceOperation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        instanceOperation_result result = new instanceOperation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_msgDelete(AsyncCallback callback, object state, string instanceId, List<string> msgList, Session session)
      {
        return send_msgDelete(callback, state, instanceId, msgList, session);
      }

      public List<string> End_msgDelete(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_msgDelete();
      }

      #endif

      public List<string> msgDelete(string instanceId, List<string> msgList, Session session)
      {
        #if !SILVERLIGHT
        send_msgDelete(instanceId, msgList, session);
        return recv_msgDelete();

        #else
        var asyncResult = Begin_msgDelete(null, null, instanceId, msgList, session);
        return End_msgDelete(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_msgDelete(AsyncCallback callback, object state, string instanceId, List<string> msgList, Session session)
      #else
      public void send_msgDelete(string instanceId, List<string> msgList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("msgDelete", TMessageType.Call, seqid_));
        msgDelete_args args = new msgDelete_args();
        args.InstanceId = instanceId;
        args.MsgList = msgList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_msgDelete()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        msgDelete_result result = new msgDelete_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "msgDelete failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_chatMemAddRem(AsyncCallback callback, object state, string instanceId, List<string> userList, Session session)
      {
        return send_chatMemAddRem(callback, state, instanceId, userList, session);
      }

      public void End_chatMemAddRem(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_chatMemAddRem();
      }

      #endif

      public void chatMemAddRem(string instanceId, List<string> userList, Session session)
      {
        #if !SILVERLIGHT
        send_chatMemAddRem(instanceId, userList, session);
        recv_chatMemAddRem();

        #else
        var asyncResult = Begin_chatMemAddRem(null, null, instanceId, userList, session);
        End_chatMemAddRem(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_chatMemAddRem(AsyncCallback callback, object state, string instanceId, List<string> userList, Session session)
      #else
      public void send_chatMemAddRem(string instanceId, List<string> userList, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("chatMemAddRem", TMessageType.Call, seqid_));
        chatMemAddRem_args args = new chatMemAddRem_args();
        args.InstanceId = instanceId;
        args.UserList = userList;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_chatMemAddRem()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        chatMemAddRem_result result = new chatMemAddRem_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getInstance(AsyncCallback callback, object state, string instanceId, Session session)
      {
        return send_getInstance(callback, state, instanceId, session);
      }

      public string End_getInstance(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getInstance();
      }

      #endif

      public string getInstance(string instanceId, Session session)
      {
        #if !SILVERLIGHT
        send_getInstance(instanceId, session);
        return recv_getInstance();

        #else
        var asyncResult = Begin_getInstance(null, null, instanceId, session);
        return End_getInstance(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getInstance(AsyncCallback callback, object state, string instanceId, Session session)
      #else
      public void send_getInstance(string instanceId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getInstance", TMessageType.Call, seqid_));
        getInstance_args args = new getInstance_args();
        args.InstanceId = instanceId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getInstance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInstance_result result = new getInstance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInstance failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateDisposableInstance(AsyncCallback callback, object state, string instanceId, int viewCount, int viewTimeLimit, Session session)
      {
        return send_updateDisposableInstance(callback, state, instanceId, viewCount, viewTimeLimit, session);
      }

      public void End_updateDisposableInstance(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateDisposableInstance();
      }

      #endif

      public void updateDisposableInstance(string instanceId, int viewCount, int viewTimeLimit, Session session)
      {
        #if !SILVERLIGHT
        send_updateDisposableInstance(instanceId, viewCount, viewTimeLimit, session);
        recv_updateDisposableInstance();

        #else
        var asyncResult = Begin_updateDisposableInstance(null, null, instanceId, viewCount, viewTimeLimit, session);
        End_updateDisposableInstance(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateDisposableInstance(AsyncCallback callback, object state, string instanceId, int viewCount, int viewTimeLimit, Session session)
      #else
      public void send_updateDisposableInstance(string instanceId, int viewCount, int viewTimeLimit, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateDisposableInstance", TMessageType.Call, seqid_));
        updateDisposableInstance_args args = new updateDisposableInstance_args();
        args.InstanceId = instanceId;
        args.ViewCount = viewCount;
        args.ViewTimeLimit = viewTimeLimit;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateDisposableInstance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateDisposableInstance_result result = new updateDisposableInstance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessage(AsyncCallback callback, object state, string instanceId, string msgId, Session session)
      {
        return send_getMessage(callback, state, instanceId, msgId, session);
      }

      public string End_getMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessage();
      }

      #endif

      public string getMessage(string instanceId, string msgId, Session session)
      {
        #if !SILVERLIGHT
        send_getMessage(instanceId, msgId, session);
        return recv_getMessage();

        #else
        var asyncResult = Begin_getMessage(null, null, instanceId, msgId, session);
        return End_getMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessage(AsyncCallback callback, object state, string instanceId, string msgId, Session session)
      #else
      public void send_getMessage(string instanceId, string msgId, Session session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessage", TMessageType.Call, seqid_));
        getMessage_args args = new getMessage_args();
        args.InstanceId = instanceId;
        args.MsgId = msgId;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessage_result result = new getMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        if (result.__isset.se) {
          throw result.Se;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessage failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getGroups"] = getGroups_Process;
        processMap_["saveBlockedInstanceIds"] = saveBlockedInstanceIds_Process;
        processMap_["saveBlockedInstanceId"] = saveBlockedInstanceId_Process;
        processMap_["saveMutedInstanceIds"] = saveMutedInstanceIds_Process;
        processMap_["saveMutedInstanceId"] = saveMutedInstanceId_Process;
        processMap_["saveUserBlockedInstancess"] = saveUserBlockedInstancess_Process;
        processMap_["saveMuteUserIds"] = saveMuteUserIds_Process;
        processMap_["saveMuteUserId"] = saveMuteUserId_Process;
        processMap_["getBlockedInstances"] = getBlockedInstances_Process;
        processMap_["getUserBlockedInstances"] = getUserBlockedInstances_Process;
        processMap_["getMutedInstances"] = getMutedInstances_Process;
        processMap_["getMutedUsers"] = getMutedUsers_Process;
        processMap_["saveGroupForUsers"] = saveGroupForUsers_Process;
        processMap_["updatePushCode"] = updatePushCode_Process;
        processMap_["instanceOperation"] = instanceOperation_Process;
        processMap_["msgDelete"] = msgDelete_Process;
        processMap_["chatMemAddRem"] = chatMemAddRem_Process;
        processMap_["getInstance"] = getInstance_Process;
        processMap_["updateDisposableInstance"] = updateDisposableInstance_Process;
        processMap_["getMessage"] = getMessage_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroups_args args = new getGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroups_result result = new getGroups_result();
        try {
          result.Success = iface_.getGroups(args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveBlockedInstanceIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveBlockedInstanceIds_args args = new saveBlockedInstanceIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveBlockedInstanceIds_result result = new saveBlockedInstanceIds_result();
        try {
          iface_.saveBlockedInstanceIds(args.Instances, args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveBlockedInstanceIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveBlockedInstanceId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveBlockedInstanceId_args args = new saveBlockedInstanceId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveBlockedInstanceId_result result = new saveBlockedInstanceId_result();
        try {
          iface_.saveBlockedInstanceId(args.InstanceId, args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveBlockedInstanceId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveMutedInstanceIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveMutedInstanceIds_args args = new saveMutedInstanceIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveMutedInstanceIds_result result = new saveMutedInstanceIds_result();
        try {
          iface_.saveMutedInstanceIds(args.Instances, args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveMutedInstanceIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveMutedInstanceId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveMutedInstanceId_args args = new saveMutedInstanceId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveMutedInstanceId_result result = new saveMutedInstanceId_result();
        try {
          iface_.saveMutedInstanceId(args.InstanceId, args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveMutedInstanceId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveUserBlockedInstancess_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveUserBlockedInstancess_args args = new saveUserBlockedInstancess_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveUserBlockedInstancess_result result = new saveUserBlockedInstancess_result();
        try {
          iface_.saveUserBlockedInstancess(args.InstanceId, args.UserIdList, args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveUserBlockedInstancess", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveMuteUserIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveMuteUserIds_args args = new saveMuteUserIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveMuteUserIds_result result = new saveMuteUserIds_result();
        try {
          iface_.saveMuteUserIds(args.UserIdList, args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveMuteUserIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveMuteUserId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveMuteUserId_args args = new saveMuteUserId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveMuteUserId_result result = new saveMuteUserId_result();
        try {
          iface_.saveMuteUserId(args.MuteUserId, args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveMuteUserId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBlockedInstances_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBlockedInstances_args args = new getBlockedInstances_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBlockedInstances_result result = new getBlockedInstances_result();
        try {
          result.Success = iface_.getBlockedInstances(args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getBlockedInstances", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserBlockedInstances_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserBlockedInstances_args args = new getUserBlockedInstances_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserBlockedInstances_result result = new getUserBlockedInstances_result();
        try {
          result.Success = iface_.getUserBlockedInstances(args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getUserBlockedInstances", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMutedInstances_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMutedInstances_args args = new getMutedInstances_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMutedInstances_result result = new getMutedInstances_result();
        try {
          result.Success = iface_.getMutedInstances(args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getMutedInstances", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMutedUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMutedUsers_args args = new getMutedUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMutedUsers_result result = new getMutedUsers_result();
        try {
          result.Success = iface_.getMutedUsers(args.UserId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getMutedUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveGroupForUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveGroupForUsers_args args = new saveGroupForUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveGroupForUsers_result result = new saveGroupForUsers_result();
        try {
          iface_.saveGroupForUsers(args.GroupId, args.UserIdList, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("saveGroupForUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updatePushCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updatePushCode_args args = new updatePushCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updatePushCode_result result = new updatePushCode_result();
        try {
          iface_.updatePushCode(args.PushCode, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updatePushCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void instanceOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        instanceOperation_args args = new instanceOperation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        instanceOperation_result result = new instanceOperation_result();
        try {
          iface_.instanceOperation(args.Instances, args.Operations, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("instanceOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void msgDelete_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        msgDelete_args args = new msgDelete_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        msgDelete_result result = new msgDelete_result();
        try {
          result.Success = iface_.msgDelete(args.InstanceId, args.MsgList, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("msgDelete", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void chatMemAddRem_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        chatMemAddRem_args args = new chatMemAddRem_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        chatMemAddRem_result result = new chatMemAddRem_result();
        try {
          iface_.chatMemAddRem(args.InstanceId, args.UserList, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("chatMemAddRem", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getInstance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInstance_args args = new getInstance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInstance_result result = new getInstance_result();
        try {
          result.Success = iface_.getInstance(args.InstanceId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getInstance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateDisposableInstance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateDisposableInstance_args args = new updateDisposableInstance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateDisposableInstance_result result = new updateDisposableInstance_result();
        try {
          iface_.updateDisposableInstance(args.InstanceId, args.ViewCount, args.ViewTimeLimit, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("updateDisposableInstance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessage_args args = new getMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessage_result result = new getMessage_result();
        try {
          result.Success = iface_.getMessage(args.InstanceId, args.MsgId, args.Session);
        } catch (ChatUserInfoException ex) {
          result.Ex = ex;
        } catch (SessionException se) {
          result.Se = se;
        }
        oprot.WriteMessageBegin(new TMessage("getMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroups_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroups_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroups_result : TBase
    {
      private List<string> _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list328 = iprot.ReadListBegin();
                  for( int _i329 = 0; _i329 < _list328.Count; ++_i329)
                  {
                    string _elem330;
                    _elem330 = iprot.ReadString();
                    Success.Add(_elem330);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter331 in Success)
              {
                oprot.WriteString(_iter331);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getGroups_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveBlockedInstanceIds_args : TBase
    {
      private List<string> _instances;
      private string _userId;
      private Session _session;

      public List<string> Instances
      {
        get
        {
          return _instances;
        }
        set
        {
          __isset.instances = true;
          this._instances = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instances;
        public bool userId;
        public bool session;
      }

      public saveBlockedInstanceIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Instances = new List<string>();
                  TList _list332 = iprot.ReadListBegin();
                  for( int _i333 = 0; _i333 < _list332.Count; ++_i333)
                  {
                    string _elem334;
                    _elem334 = iprot.ReadString();
                    Instances.Add(_elem334);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveBlockedInstanceIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Instances != null && __isset.instances) {
          field.Name = "instances";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Instances.Count));
            foreach (string _iter335 in Instances)
            {
              oprot.WriteString(_iter335);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveBlockedInstanceIds_args(");
        bool __first = true;
        if (Instances != null && __isset.instances) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instances: ");
          __sb.Append(Instances);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveBlockedInstanceIds_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveBlockedInstanceIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveBlockedInstanceIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveBlockedInstanceIds_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveBlockedInstanceId_args : TBase
    {
      private string _instanceId;
      private string _userId;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool userId;
        public bool session;
      }

      public saveBlockedInstanceId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveBlockedInstanceId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveBlockedInstanceId_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveBlockedInstanceId_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveBlockedInstanceId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveBlockedInstanceId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveBlockedInstanceId_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMutedInstanceIds_args : TBase
    {
      private List<string> _instances;
      private string _userId;
      private Session _session;

      public List<string> Instances
      {
        get
        {
          return _instances;
        }
        set
        {
          __isset.instances = true;
          this._instances = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instances;
        public bool userId;
        public bool session;
      }

      public saveMutedInstanceIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Instances = new List<string>();
                  TList _list336 = iprot.ReadListBegin();
                  for( int _i337 = 0; _i337 < _list336.Count; ++_i337)
                  {
                    string _elem338;
                    _elem338 = iprot.ReadString();
                    Instances.Add(_elem338);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMutedInstanceIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Instances != null && __isset.instances) {
          field.Name = "instances";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Instances.Count));
            foreach (string _iter339 in Instances)
            {
              oprot.WriteString(_iter339);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMutedInstanceIds_args(");
        bool __first = true;
        if (Instances != null && __isset.instances) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instances: ");
          __sb.Append(Instances);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMutedInstanceIds_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveMutedInstanceIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMutedInstanceIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMutedInstanceIds_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMutedInstanceId_args : TBase
    {
      private string _instanceId;
      private string _userId;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool userId;
        public bool session;
      }

      public saveMutedInstanceId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMutedInstanceId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMutedInstanceId_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMutedInstanceId_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveMutedInstanceId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMutedInstanceId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMutedInstanceId_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveUserBlockedInstancess_args : TBase
    {
      private string _instanceId;
      private List<string> _userIdList;
      private string _userId;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public List<string> UserIdList
      {
        get
        {
          return _userIdList;
        }
        set
        {
          __isset.userIdList = true;
          this._userIdList = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool userIdList;
        public bool userId;
        public bool session;
      }

      public saveUserBlockedInstancess_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  UserIdList = new List<string>();
                  TList _list340 = iprot.ReadListBegin();
                  for( int _i341 = 0; _i341 < _list340.Count; ++_i341)
                  {
                    string _elem342;
                    _elem342 = iprot.ReadString();
                    UserIdList.Add(_elem342);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveUserBlockedInstancess_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (UserIdList != null && __isset.userIdList) {
          field.Name = "userIdList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserIdList.Count));
            foreach (string _iter343 in UserIdList)
            {
              oprot.WriteString(_iter343);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveUserBlockedInstancess_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (UserIdList != null && __isset.userIdList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIdList: ");
          __sb.Append(UserIdList);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveUserBlockedInstancess_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveUserBlockedInstancess_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveUserBlockedInstancess_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveUserBlockedInstancess_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMuteUserIds_args : TBase
    {
      private List<string> _userIdList;
      private string _userId;
      private Session _session;

      public List<string> UserIdList
      {
        get
        {
          return _userIdList;
        }
        set
        {
          __isset.userIdList = true;
          this._userIdList = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userIdList;
        public bool userId;
        public bool session;
      }

      public saveMuteUserIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  UserIdList = new List<string>();
                  TList _list344 = iprot.ReadListBegin();
                  for( int _i345 = 0; _i345 < _list344.Count; ++_i345)
                  {
                    string _elem346;
                    _elem346 = iprot.ReadString();
                    UserIdList.Add(_elem346);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMuteUserIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserIdList != null && __isset.userIdList) {
          field.Name = "userIdList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserIdList.Count));
            foreach (string _iter347 in UserIdList)
            {
              oprot.WriteString(_iter347);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMuteUserIds_args(");
        bool __first = true;
        if (UserIdList != null && __isset.userIdList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIdList: ");
          __sb.Append(UserIdList);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMuteUserIds_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveMuteUserIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMuteUserIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMuteUserIds_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMuteUserId_args : TBase
    {
      private string _muteUserId;
      private string _userId;
      private Session _session;

      public string MuteUserId
      {
        get
        {
          return _muteUserId;
        }
        set
        {
          __isset.muteUserId = true;
          this._muteUserId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool muteUserId;
        public bool userId;
        public bool session;
      }

      public saveMuteUserId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                MuteUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMuteUserId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MuteUserId != null && __isset.muteUserId) {
          field.Name = "muteUserId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MuteUserId);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMuteUserId_args(");
        bool __first = true;
        if (MuteUserId != null && __isset.muteUserId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MuteUserId: ");
          __sb.Append(MuteUserId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveMuteUserId_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveMuteUserId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveMuteUserId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveMuteUserId_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedInstances_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getBlockedInstances_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedInstances_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBlockedInstances_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedInstances_result : TBase
    {
      private List<ChatBlockedInstance> _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public List<ChatBlockedInstance> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getBlockedInstances_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChatBlockedInstance>();
                  TList _list348 = iprot.ReadListBegin();
                  for( int _i349 = 0; _i349 < _list348.Count; ++_i349)
                  {
                    ChatBlockedInstance _elem350;
                    _elem350 = new ChatBlockedInstance();
                    _elem350.Read(iprot);
                    Success.Add(_elem350);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedInstances_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChatBlockedInstance _iter351 in Success)
              {
                _iter351.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getBlockedInstances_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserBlockedInstances_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getUserBlockedInstances_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserBlockedInstances_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserBlockedInstances_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserBlockedInstances_result : TBase
    {
      private List<ChatUserBlockedInstance> _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public List<ChatUserBlockedInstance> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getUserBlockedInstances_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChatUserBlockedInstance>();
                  TList _list352 = iprot.ReadListBegin();
                  for( int _i353 = 0; _i353 < _list352.Count; ++_i353)
                  {
                    ChatUserBlockedInstance _elem354;
                    _elem354 = new ChatUserBlockedInstance();
                    _elem354.Read(iprot);
                    Success.Add(_elem354);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserBlockedInstances_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChatUserBlockedInstance _iter355 in Success)
              {
                _iter355.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserBlockedInstances_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMutedInstances_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getMutedInstances_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMutedInstances_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMutedInstances_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMutedInstances_result : TBase
    {
      private List<ChatMutedInstance> _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public List<ChatMutedInstance> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getMutedInstances_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChatMutedInstance>();
                  TList _list356 = iprot.ReadListBegin();
                  for( int _i357 = 0; _i357 < _list356.Count; ++_i357)
                  {
                    ChatMutedInstance _elem358;
                    _elem358 = new ChatMutedInstance();
                    _elem358.Read(iprot);
                    Success.Add(_elem358);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMutedInstances_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChatMutedInstance _iter359 in Success)
              {
                _iter359.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMutedInstances_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMutedUsers_args : TBase
    {
      private string _userId;
      private Session _session;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool session;
      }

      public getMutedUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMutedUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMutedUsers_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMutedUsers_result : TBase
    {
      private List<ChatMutedUser> _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public List<ChatMutedUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getMutedUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChatMutedUser>();
                  TList _list360 = iprot.ReadListBegin();
                  for( int _i361 = 0; _i361 < _list360.Count; ++_i361)
                  {
                    ChatMutedUser _elem362;
                    _elem362 = new ChatMutedUser();
                    _elem362.Read(iprot);
                    Success.Add(_elem362);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMutedUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChatMutedUser _iter363 in Success)
              {
                _iter363.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMutedUsers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveGroupForUsers_args : TBase
    {
      private string _groupId;
      private List<string> _userIdList;
      private Session _session;

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public List<string> UserIdList
      {
        get
        {
          return _userIdList;
        }
        set
        {
          __isset.userIdList = true;
          this._userIdList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool userIdList;
        public bool session;
      }

      public saveGroupForUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  UserIdList = new List<string>();
                  TList _list364 = iprot.ReadListBegin();
                  for( int _i365 = 0; _i365 < _list364.Count; ++_i365)
                  {
                    string _elem366;
                    _elem366 = iprot.ReadString();
                    UserIdList.Add(_elem366);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveGroupForUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (UserIdList != null && __isset.userIdList) {
          field.Name = "userIdList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserIdList.Count));
            foreach (string _iter367 in UserIdList)
            {
              oprot.WriteString(_iter367);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveGroupForUsers_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (UserIdList != null && __isset.userIdList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIdList: ");
          __sb.Append(UserIdList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveGroupForUsers_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public saveGroupForUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveGroupForUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveGroupForUsers_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updatePushCode_args : TBase
    {
      private string _pushCode;
      private Session _session;

      public string PushCode
      {
        get
        {
          return _pushCode;
        }
        set
        {
          __isset.pushCode = true;
          this._pushCode = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pushCode;
        public bool session;
      }

      public updatePushCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PushCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updatePushCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PushCode != null && __isset.pushCode) {
          field.Name = "pushCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PushCode);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updatePushCode_args(");
        bool __first = true;
        if (PushCode != null && __isset.pushCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PushCode: ");
          __sb.Append(PushCode);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updatePushCode_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public updatePushCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updatePushCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updatePushCode_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class instanceOperation_args : TBase
    {
      private List<string> _instances;
      private InstanceOperation _operations;
      private Session _session;

      public List<string> Instances
      {
        get
        {
          return _instances;
        }
        set
        {
          __isset.instances = true;
          this._instances = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="InstanceOperation"/>
      /// </summary>
      public InstanceOperation Operations
      {
        get
        {
          return _operations;
        }
        set
        {
          __isset.operations = true;
          this._operations = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instances;
        public bool operations;
        public bool session;
      }

      public instanceOperation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Instances = new List<string>();
                  TList _list368 = iprot.ReadListBegin();
                  for( int _i369 = 0; _i369 < _list368.Count; ++_i369)
                  {
                    string _elem370;
                    _elem370 = iprot.ReadString();
                    Instances.Add(_elem370);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Operations = (InstanceOperation)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("instanceOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Instances != null && __isset.instances) {
          field.Name = "instances";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Instances.Count));
            foreach (string _iter371 in Instances)
            {
              oprot.WriteString(_iter371);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.operations) {
          field.Name = "operations";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Operations);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("instanceOperation_args(");
        bool __first = true;
        if (Instances != null && __isset.instances) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instances: ");
          __sb.Append(Instances);
        }
        if (__isset.operations) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Operations: ");
          __sb.Append(Operations);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class instanceOperation_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public instanceOperation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("instanceOperation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("instanceOperation_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class msgDelete_args : TBase
    {
      private string _instanceId;
      private List<string> _msgList;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public List<string> MsgList
      {
        get
        {
          return _msgList;
        }
        set
        {
          __isset.msgList = true;
          this._msgList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool msgList;
        public bool session;
      }

      public msgDelete_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  MsgList = new List<string>();
                  TList _list372 = iprot.ReadListBegin();
                  for( int _i373 = 0; _i373 < _list372.Count; ++_i373)
                  {
                    string _elem374;
                    _elem374 = iprot.ReadString();
                    MsgList.Add(_elem374);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("msgDelete_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (MsgList != null && __isset.msgList) {
          field.Name = "msgList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MsgList.Count));
            foreach (string _iter375 in MsgList)
            {
              oprot.WriteString(_iter375);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("msgDelete_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (MsgList != null && __isset.msgList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MsgList: ");
          __sb.Append(MsgList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class msgDelete_result : TBase
    {
      private List<string> _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public msgDelete_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list376 = iprot.ReadListBegin();
                  for( int _i377 = 0; _i377 < _list376.Count; ++_i377)
                  {
                    string _elem378;
                    _elem378 = iprot.ReadString();
                    Success.Add(_elem378);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("msgDelete_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter379 in Success)
              {
                oprot.WriteString(_iter379);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("msgDelete_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class chatMemAddRem_args : TBase
    {
      private string _instanceId;
      private List<string> _userList;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public List<string> UserList
      {
        get
        {
          return _userList;
        }
        set
        {
          __isset.userList = true;
          this._userList = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool userList;
        public bool session;
      }

      public chatMemAddRem_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  UserList = new List<string>();
                  TList _list380 = iprot.ReadListBegin();
                  for( int _i381 = 0; _i381 < _list380.Count; ++_i381)
                  {
                    string _elem382;
                    _elem382 = iprot.ReadString();
                    UserList.Add(_elem382);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("chatMemAddRem_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (UserList != null && __isset.userList) {
          field.Name = "userList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserList.Count));
            foreach (string _iter383 in UserList)
            {
              oprot.WriteString(_iter383);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("chatMemAddRem_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (UserList != null && __isset.userList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserList: ");
          __sb.Append(UserList);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class chatMemAddRem_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public chatMemAddRem_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("chatMemAddRem_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("chatMemAddRem_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInstance_args : TBase
    {
      private string _instanceId;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool session;
      }

      public getInstance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInstance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInstance_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInstance_result : TBase
    {
      private string _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getInstance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInstance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInstance_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDisposableInstance_args : TBase
    {
      private string _instanceId;
      private int _viewCount;
      private int _viewTimeLimit;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public int ViewCount
      {
        get
        {
          return _viewCount;
        }
        set
        {
          __isset.viewCount = true;
          this._viewCount = value;
        }
      }

      public int ViewTimeLimit
      {
        get
        {
          return _viewTimeLimit;
        }
        set
        {
          __isset.viewTimeLimit = true;
          this._viewTimeLimit = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool viewCount;
        public bool viewTimeLimit;
        public bool session;
      }

      public updateDisposableInstance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ViewCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ViewTimeLimit = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDisposableInstance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.viewCount) {
          field.Name = "viewCount";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ViewCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.viewTimeLimit) {
          field.Name = "viewTimeLimit";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ViewTimeLimit);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateDisposableInstance_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (__isset.viewCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ViewCount: ");
          __sb.Append(ViewCount);
        }
        if (__isset.viewTimeLimit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ViewTimeLimit: ");
          __sb.Append(ViewTimeLimit);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDisposableInstance_result : TBase
    {
      private ChatUserInfoException _ex;
      private SessionException _se;

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
        public bool se;
      }

      public updateDisposableInstance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDisposableInstance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateDisposableInstance_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessage_args : TBase
    {
      private string _instanceId;
      private string _msgId;
      private Session _session;

      public string InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public string MsgId
      {
        get
        {
          return _msgId;
        }
        set
        {
          __isset.msgId = true;
          this._msgId = value;
        }
      }

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instanceId;
        public bool msgId;
        public bool session;
      }

      public getMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                InstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MsgId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InstanceId != null && __isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (MsgId != null && __isset.msgId) {
          field.Name = "msgId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MsgId);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMessage_args(");
        bool __first = true;
        if (InstanceId != null && __isset.instanceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstanceId: ");
          __sb.Append(InstanceId);
        }
        if (MsgId != null && __isset.msgId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MsgId: ");
          __sb.Append(MsgId);
        }
        if (Session != null && __isset.session) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session: ");
          __sb.Append(Session== null ? "<null>" : Session.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessage_result : TBase
    {
      private string _success;
      private ChatUserInfoException _ex;
      private SessionException _se;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ChatUserInfoException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }

      public SessionException Se
      {
        get
        {
          return _se;
        }
        set
        {
          __isset.se = true;
          this._se = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
        public bool se;
      }

      public getMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ChatUserInfoException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Se = new SessionException();
                Se.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.se) {
          if (Se != null) {
            field.Name = "Se";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Se.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMessage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        if (Se != null && __isset.se) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Se: ");
          __sb.Append(Se== null ? "<null>" : Se.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
